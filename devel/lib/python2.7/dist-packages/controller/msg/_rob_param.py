# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from controller/rob_param.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class rob_param(genpy.Message):
  _md5sum = "0491c34928b4803b4c4b4d889e27e443"
  _type = "controller/rob_param"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int64 x
int64 y 
int64 z
int64 rx
int64 ry
float64 rz
int64 j1
int64 j2
int64 j3
int64 j4
int64 j5
float64 j6
int64 select_mode
int64 start
float64 forward_back
int64 gear
int64 rs_button
int64 md_ds_button
float64 rc_en_button
float64 start_stop
"""
  __slots__ = ['x','y','z','rx','ry','rz','j1','j2','j3','j4','j5','j6','select_mode','start','forward_back','gear','rs_button','md_ds_button','rc_en_button','start_stop']
  _slot_types = ['int64','int64','int64','int64','int64','float64','int64','int64','int64','int64','int64','float64','int64','int64','float64','int64','int64','int64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x,y,z,rx,ry,rz,j1,j2,j3,j4,j5,j6,select_mode,start,forward_back,gear,rs_button,md_ds_button,rc_en_button,start_stop

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(rob_param, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x is None:
        self.x = 0
      if self.y is None:
        self.y = 0
      if self.z is None:
        self.z = 0
      if self.rx is None:
        self.rx = 0
      if self.ry is None:
        self.ry = 0
      if self.rz is None:
        self.rz = 0.
      if self.j1 is None:
        self.j1 = 0
      if self.j2 is None:
        self.j2 = 0
      if self.j3 is None:
        self.j3 = 0
      if self.j4 is None:
        self.j4 = 0
      if self.j5 is None:
        self.j5 = 0
      if self.j6 is None:
        self.j6 = 0.
      if self.select_mode is None:
        self.select_mode = 0
      if self.start is None:
        self.start = 0
      if self.forward_back is None:
        self.forward_back = 0.
      if self.gear is None:
        self.gear = 0
      if self.rs_button is None:
        self.rs_button = 0
      if self.md_ds_button is None:
        self.md_ds_button = 0
      if self.rc_en_button is None:
        self.rc_en_button = 0.
      if self.start_stop is None:
        self.start_stop = 0.
    else:
      self.x = 0
      self.y = 0
      self.z = 0
      self.rx = 0
      self.ry = 0
      self.rz = 0.
      self.j1 = 0
      self.j2 = 0
      self.j3 = 0
      self.j4 = 0
      self.j5 = 0
      self.j6 = 0.
      self.select_mode = 0
      self.start = 0
      self.forward_back = 0.
      self.gear = 0
      self.rs_button = 0
      self.md_ds_button = 0
      self.rc_en_button = 0.
      self.start_stop = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5qd5qd2qd3q2d().pack(_x.x, _x.y, _x.z, _x.rx, _x.ry, _x.rz, _x.j1, _x.j2, _x.j3, _x.j4, _x.j5, _x.j6, _x.select_mode, _x.start, _x.forward_back, _x.gear, _x.rs_button, _x.md_ds_button, _x.rc_en_button, _x.start_stop))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 160
      (_x.x, _x.y, _x.z, _x.rx, _x.ry, _x.rz, _x.j1, _x.j2, _x.j3, _x.j4, _x.j5, _x.j6, _x.select_mode, _x.start, _x.forward_back, _x.gear, _x.rs_button, _x.md_ds_button, _x.rc_en_button, _x.start_stop,) = _get_struct_5qd5qd2qd3q2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5qd5qd2qd3q2d().pack(_x.x, _x.y, _x.z, _x.rx, _x.ry, _x.rz, _x.j1, _x.j2, _x.j3, _x.j4, _x.j5, _x.j6, _x.select_mode, _x.start, _x.forward_back, _x.gear, _x.rs_button, _x.md_ds_button, _x.rc_en_button, _x.start_stop))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 160
      (_x.x, _x.y, _x.z, _x.rx, _x.ry, _x.rz, _x.j1, _x.j2, _x.j3, _x.j4, _x.j5, _x.j6, _x.select_mode, _x.start, _x.forward_back, _x.gear, _x.rs_button, _x.md_ds_button, _x.rc_en_button, _x.start_stop,) = _get_struct_5qd5qd2qd3q2d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5qd5qd2qd3q2d = None
def _get_struct_5qd5qd2qd3q2d():
    global _struct_5qd5qd2qd3q2d
    if _struct_5qd5qd2qd3q2d is None:
        _struct_5qd5qd2qd3q2d = struct.Struct("<5qd5qd2qd3q2d")
    return _struct_5qd5qd2qd3q2d
