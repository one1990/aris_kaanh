// Generated by gencpp from file controller/rob_param.msg
// DO NOT EDIT!


#ifndef CONTROLLER_MESSAGE_ROB_PARAM_H
#define CONTROLLER_MESSAGE_ROB_PARAM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace controller
{
template <class ContainerAllocator>
struct rob_param_
{
  typedef rob_param_<ContainerAllocator> Type;

  rob_param_()
    : x(0)
    , y(0)
    , z(0)
    , rx(0)
    , ry(0)
    , rz(0.0)
    , j1(0)
    , j2(0)
    , j3(0)
    , j4(0)
    , j5(0)
    , j6(0.0)
    , select_mode(0)
    , start(0)
    , forward_back(0.0)
    , gear(0)
    , rs_button(0)
    , md_ds_button(0)
    , rc_en_button(0.0)
    , start_stop(0.0)  {
    }
  rob_param_(const ContainerAllocator& _alloc)
    : x(0)
    , y(0)
    , z(0)
    , rx(0)
    , ry(0)
    , rz(0.0)
    , j1(0)
    , j2(0)
    , j3(0)
    , j4(0)
    , j5(0)
    , j6(0.0)
    , select_mode(0)
    , start(0)
    , forward_back(0.0)
    , gear(0)
    , rs_button(0)
    , md_ds_button(0)
    , rc_en_button(0.0)
    , start_stop(0.0)  {
  (void)_alloc;
    }



   typedef int64_t _x_type;
  _x_type x;

   typedef int64_t _y_type;
  _y_type y;

   typedef int64_t _z_type;
  _z_type z;

   typedef int64_t _rx_type;
  _rx_type rx;

   typedef int64_t _ry_type;
  _ry_type ry;

   typedef double _rz_type;
  _rz_type rz;

   typedef int64_t _j1_type;
  _j1_type j1;

   typedef int64_t _j2_type;
  _j2_type j2;

   typedef int64_t _j3_type;
  _j3_type j3;

   typedef int64_t _j4_type;
  _j4_type j4;

   typedef int64_t _j5_type;
  _j5_type j5;

   typedef double _j6_type;
  _j6_type j6;

   typedef int64_t _select_mode_type;
  _select_mode_type select_mode;

   typedef int64_t _start_type;
  _start_type start;

   typedef double _forward_back_type;
  _forward_back_type forward_back;

   typedef int64_t _gear_type;
  _gear_type gear;

   typedef int64_t _rs_button_type;
  _rs_button_type rs_button;

   typedef int64_t _md_ds_button_type;
  _md_ds_button_type md_ds_button;

   typedef double _rc_en_button_type;
  _rc_en_button_type rc_en_button;

   typedef double _start_stop_type;
  _start_stop_type start_stop;





  typedef boost::shared_ptr< ::controller::rob_param_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::controller::rob_param_<ContainerAllocator> const> ConstPtr;

}; // struct rob_param_

typedef ::controller::rob_param_<std::allocator<void> > rob_param;

typedef boost::shared_ptr< ::controller::rob_param > rob_paramPtr;
typedef boost::shared_ptr< ::controller::rob_param const> rob_paramConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::controller::rob_param_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::controller::rob_param_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace controller

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'controller': ['/root/catkin_ws/src/controller/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::controller::rob_param_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::controller::rob_param_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::controller::rob_param_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::controller::rob_param_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::controller::rob_param_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::controller::rob_param_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::controller::rob_param_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0491c34928b4803b4c4b4d889e27e443";
  }

  static const char* value(const ::controller::rob_param_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0491c34928b4803bULL;
  static const uint64_t static_value2 = 0x4c4b4d889e27e443ULL;
};

template<class ContainerAllocator>
struct DataType< ::controller::rob_param_<ContainerAllocator> >
{
  static const char* value()
  {
    return "controller/rob_param";
  }

  static const char* value(const ::controller::rob_param_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::controller::rob_param_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 x\n\
int64 y \n\
int64 z\n\
int64 rx\n\
int64 ry\n\
float64 rz\n\
int64 j1\n\
int64 j2\n\
int64 j3\n\
int64 j4\n\
int64 j5\n\
float64 j6\n\
int64 select_mode\n\
int64 start\n\
float64 forward_back\n\
int64 gear\n\
int64 rs_button\n\
int64 md_ds_button\n\
float64 rc_en_button\n\
float64 start_stop\n\
";
  }

  static const char* value(const ::controller::rob_param_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::controller::rob_param_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.rx);
      stream.next(m.ry);
      stream.next(m.rz);
      stream.next(m.j1);
      stream.next(m.j2);
      stream.next(m.j3);
      stream.next(m.j4);
      stream.next(m.j5);
      stream.next(m.j6);
      stream.next(m.select_mode);
      stream.next(m.start);
      stream.next(m.forward_back);
      stream.next(m.gear);
      stream.next(m.rs_button);
      stream.next(m.md_ds_button);
      stream.next(m.rc_en_button);
      stream.next(m.start_stop);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct rob_param_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::controller::rob_param_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::controller::rob_param_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<int64_t>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<int64_t>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<int64_t>::stream(s, indent + "  ", v.z);
    s << indent << "rx: ";
    Printer<int64_t>::stream(s, indent + "  ", v.rx);
    s << indent << "ry: ";
    Printer<int64_t>::stream(s, indent + "  ", v.ry);
    s << indent << "rz: ";
    Printer<double>::stream(s, indent + "  ", v.rz);
    s << indent << "j1: ";
    Printer<int64_t>::stream(s, indent + "  ", v.j1);
    s << indent << "j2: ";
    Printer<int64_t>::stream(s, indent + "  ", v.j2);
    s << indent << "j3: ";
    Printer<int64_t>::stream(s, indent + "  ", v.j3);
    s << indent << "j4: ";
    Printer<int64_t>::stream(s, indent + "  ", v.j4);
    s << indent << "j5: ";
    Printer<int64_t>::stream(s, indent + "  ", v.j5);
    s << indent << "j6: ";
    Printer<double>::stream(s, indent + "  ", v.j6);
    s << indent << "select_mode: ";
    Printer<int64_t>::stream(s, indent + "  ", v.select_mode);
    s << indent << "start: ";
    Printer<int64_t>::stream(s, indent + "  ", v.start);
    s << indent << "forward_back: ";
    Printer<double>::stream(s, indent + "  ", v.forward_back);
    s << indent << "gear: ";
    Printer<int64_t>::stream(s, indent + "  ", v.gear);
    s << indent << "rs_button: ";
    Printer<int64_t>::stream(s, indent + "  ", v.rs_button);
    s << indent << "md_ds_button: ";
    Printer<int64_t>::stream(s, indent + "  ", v.md_ds_button);
    s << indent << "rc_en_button: ";
    Printer<double>::stream(s, indent + "  ", v.rc_en_button);
    s << indent << "start_stop: ";
    Printer<double>::stream(s, indent + "  ", v.start_stop);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROLLER_MESSAGE_ROB_PARAM_H
