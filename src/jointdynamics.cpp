#include"jointdynamics.h"
#include<stdio.h>
#include<math.h>
#include<array>
#include"robotconfig.h"
#include <aris.hpp>
using namespace JointDynamicsInt;

using namespace CONFIG;
using namespace aris::plan;
using namespace aris::dynamic;

double t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20,
t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40,
t41, t42, t43, t44, t45, t46, t47, t48, t49, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t60,
t61, t62, t63, t64, t65, t66, t67, t68, t69, t70, t71, t72, t73, t74, t75, t76, t77, t78, t79, t80,
t81, t82, t83, t84, t85, t86, t87, t88, t89, t90, t91, t92, t93, t94, t95, t96, t97, t98, t99, t100,
t101, t102, t103, t104, t105, t106, t107, t108, t109, t110, t111, t112, t113, t114, t115, t116, t117, t118, t119, t120,
t121, t122, t123, t124, t125, t126, t127, t128, t129, t130, t131, t132, t133, t134, t135, t136, t137, t138, t139, t140,
t141, t142, t143, t144, t145, t146, t147, t148, t149, t150, t151, t152, t153, t154, t155, t156, t157, t158, t159, t160,
t161, t162, t163, t164, t165, t166, t167, t168, t169, t170, t171, t172, t173, t174, t175, t176, t177, t178, t179, t180,
t181, t182, t183, t184, t185, t186, t187, t188, t189, t190, t191, t192, t193, t194, t195, t196, t197, t198, t199, t200,
t201, t202, t203, t204, t205, t206, t207, t208, t209, t210, t211, t212, t213, t214, t215, t216, t217, t218, t219, t220,
t221, t222, t223, t224, t225, t226, t227, t228, t229, t230, t231, t232, t233, t234, t235, t236, t237, t238, t239, t240,
t241, t242, t243, t244, t245, t246, t247, t248, t249, t250, t251, t252, t253, t254, t255, t256, t257, t258, t259, t260,
t261, t262, t263, t264, t265, t266, t267, t268, t269, t270, t271, t272, t273, t274, t275, t276, t277, t278, t279, t280,
t281, t282, t283, t284, t285, t286, t287, t288, t289, t290, t291, t292, t293, t294, t295, t296, t297, t298, t299, t300,
t301, t302, t303, t304, t305, t306, t307, t308, t309, t310, t311, t312, t313, t314, t315, t316, t317, t318, t319, t320,
t321, t322, t323, t324, t325, t326, t327, t328, t329, t330, t331, t332, t333, t334, t335, t336, t337, t338, t339, t340,
t341, t342, t343, t344, t345, t346, t347, t348, t349, t350, t351, t352, t353, t354, t355, t356, t357, t358, t359, t360,
t361, t362, t363, t364, t365, t366, t367, t368, t369, t370, t371, t372, t373, t374, t375, t376, t377, t378, t379, t380,
t381, t382, t383, t384, t385, t386, t387, t388, t389, t390, t391, t392, t393, t394, t395, t396, t397, t398, t399, t400,
t401, t402, t403, t404, t405, t406, t407, t408, t409, t410, t411, t412, t413, t414, t415, t416, t417, t418, t419, t420,
t421, t422, t423, t424, t425, t426, t427, t428, t429, t430, t431, t432, t433, t434, t435, t436, t437, t438, t439, t440,
t441, t442, t443, t444, t445, t446, t447, t448, t449, t450, t451, t452, t453, t454, t455, t456, t457, t458, t459, t460,
t461, t462, t463, t464, t465, t466, t467, t468, t469, t470, t471, t472, t473, t474, t475, t476, t477, t478, t479, t480,
t481, t482, t483, t484, t485, t486, t487, t488, t489, t490, t491, t492, t493, t494, t495, t496, t497, t498, t499, t500,
t501, t502, t503, t504, t505, t506, t507, t508, t509, t510, t511, t512, t513, t514, t515, t516, t517, t518, t519, t520,
t521, t522, t523, t524, t525, t526, t527, t528, t529, t530, t531, t532, t533, t534, t535, t536, t537, t538, t539, t540,
t541, t542, t543, t544, t545, t546, t547, t548, t549, t550, t551, t552, t553, t554, t555, t556, t557, t558, t559, t560,
t561, t562, t563, t564, t565, t566, t567, t568, t569, t570, t571, t572, t573, t574, t575, t576, t577, t578, t579, t580,
t581, t582, t583, t584, t585, t586, t587, t588, t589, t590, t591, t592, t593, t594, t595, t596, t597, t598, t599, t600,
t601, t602, t603, t604, t605, t606, t607, t608, t609, t610, t611, t612, t613, t614, t615, t616, t617, t618, t619, t620,
t621, t622, t623, t624, t625, t626, t627, t628, t629, t630, t631, t632, t633, t634, t635, t636, t637, t638, t639, t640,
t641, t642, t643, t644, t645, t646, t647, t648, t649, t650, t651, t652, t653, t654, t655, t656, t657, t658, t659, t660,
t661, t662, t663, t664, t665, t666, t667, t668, t669, t670, t671, t672, t673, t674, t675, t676, t677, t678, t679, t680,
t681, t682, t683, t684, t685, t686, t687, t688, t689, t690, t691, t692, t693, t694, t695, t696, t697, t698, t699, t700,
t701, t702, t703, t704, t705, t706, t707, t708, t709, t710, t711, t712, t713, t714, t715, t716, t717, t718, t719, t720,
t721, t722, t723, t724, t725, t726, t727, t728, t729, t730, t731, t732, t733, t734, t735, t736, t737, t738, t739, t740,
t741, t742, t743, t744, t745, t746, t747, t748, t749, t750, t751, t752, t753, t754, t755, t756, t757, t758, t759, t760,
t761, t762, t763, t764, t765, t766, t767, t768, t769, t770, t771, t772, t773, t774, t775, t776, t777, t778, t779, t780,
t781, t782, t783, t784, t785, t786, t787, t788, t789, t790, t791, t792, t793, t794, t795, t796, t797, t798, t799, t800,
t801, t802, t803, t804, t805, t806, t807, t808, t809, t810, t811, t812, t813, t814, t815, t816, t817, t818, t819, t820,
t821, t822, t823, t824, t825, t826, t827, t828, t829, t830, t831, t832, t833, t834, t835, t836, t837, t838, t839, t840,
t841, t842, t843, t844, t845, t846, t847, t848, t849, t850, t851, t852, t853, t854, t855, t856, t857, t858, t859, t860,
t861, t862, t863, t864, t865, t866, t867, t868, t869, t870, t871, t872, t873, t874, t875, t876, t877, t878, t879, t880,
t881, t882, t883, t884, t885, t886, t887, t888, t889, t890, t891, t892, t893, t894, t895, t896, t897, t898, t899, t900,
t901, t902, t903, t904, t905, t906, t907, t908, t909, t910, t911, t912, t913, t914, t915, t916, t917, t918, t919, t920,
t921, t922, t923, t924, t925, t926, t927, t928, t929, t930, t931, t932, t933, t934, t935, t936, t937, t938, t939, t940,
t941, t942, t943, t944, t945, t946, t947, t948, t949, t950, t951, t952, t953, t954, t955, t956, t957, t958, t959, t960,
t961, t962, t963, t964, t965, t966, t967, t968, t969, t970, t971, t972, t973, t974, t975, t976, t977, t978, t979, t980,
t981, t982, t983, t984, t985, t986, t987, t988, t989, t990, t991, t992, t993, t994, t995, t996, t997, t998, t999, t1000,
t1001, t1002, t1003, t1004, t1005, t1006, t1007, t1008, t1009, t1010, t1011, t1012, t1013, t1014, t1015, t1016, t1017, t1018, t1019, t1020,
t1021, t1022, t1023, t1024, t1025, t1026, t1027, t1028, t1029, t1030, t1031, t1032, t1033, t1034, t1035, t1036, t1037, t1038, t1039, t1040,
t1041, t1042, t1043, t1044, t1045, t1046, t1047, t1048, t1049, t1050, t1051, t1052, t1053, t1054, t1055, t1056, t1057, t1058, t1059, t1060,
t1061, t1062, t1063, t1064, t1065, t1066, t1067, t1068, t1069, t1070, t1071, t1072, t1073, t1074, t1075, t1076, t1077, t1078, t1079, t1080,
t1081, t1082, t1083, t1084, t1085, t1086, t1087, t1088, t1089, t1090, t1091, t1092, t1093, t1094, t1095, t1096, t1097, t1098, t1099, t1100,
t1101, t1102, t1103, t1104, t1105, t1106, t1107, t1108, t1109, t1110, t1111, t1112, t1113, t1114, t1115, t1116, t1117, t1118, t1119, t1120,
t1121, t1122, t1123, t1124, t1125, t1126, t1127, t1128, t1129, t1130, t1131, t1132, t1133, t1134, t1135, t1136, t1137, t1138, t1139, t1140,
t1141, t1142, t1143, t1144, t1145, t1146, t1147, t1148, t1149, t1150, t1151, t1152, t1153, t1154, t1155, t1156, t1157, t1158, t1159, t1160,
t1161, t1162, t1163, t1164, t1165, t1166, t1167, t1168, t1169, t1170, t1171, t1172, t1173, t1174, t1175, t1176, t1177, t1178, t1179, t1180,
t1181, t1182, t1183, t1184, t1185, t1186, t1187, t1188, t1189, t1190, t1191, t1192, t1193, t1194, t1195, t1196, t1197, t1198, t1199, t1200,
t1201, t1202, t1203, t1204, t1205, t1206, t1207, t1208, t1209, t1210, t1211, t1212, t1213, t1214, t1215, t1216, t1217, t1218, t1219, t1220,
t1221, t1222, t1223, t1224, t1225, t1226, t1227, t1228, t1229, t1230, t1231, t1232, t1233, t1234, t1235, t1236, t1237, t1238, t1239, t1240,
t1241, t1242, t1243, t1244, t1245, t1246, t1247, t1248, t1249, t1250, t1251, t1252, t1253, t1254, t1255, t1256, t1257, t1258, t1259, t1260,
t1261, t1262, t1263, t1264, t1265, t1266, t1267, t1268, t1269, t1270, t1271, t1272, t1273, t1274, t1275, t1276, t1277, t1278, t1279, t1280,
t1281, t1282, t1283, t1284, t1285, t1286, t1287, t1288, t1289, t1290, t1291, t1292, t1293, t1294, t1295, t1296, t1297, t1298, t1299, t1300,
t1301, t1302, t1303, t1304, t1305, t1306, t1307, t1308, t1309, t1310, t1311, t1312, t1313, t1314, t1315, t1316, t1317, t1318, t1319, t1320,
t1321, t1322, t1323, t1324, t1325, t1326, t1327, t1328, t1329, t1330, t1331, t1332, t1333, t1334, t1335, t1336, t1337, t1338, t1339, t1340,
t1341, t1342, t1343, t1344, t1345, t1346, t1347, t1348, t1349, t1350, t1351, t1352, t1353, t1354, t1355, t1356, t1357, t1358, t1359, t1360,
t1361, t1362, t1363, t1364, t1365, t1366, t1367, t1368, t1369, t1370, t1371, t1372, t1373, t1374, t1375, t1376, t1377, t1378, t1379, t1380,
t1381, t1382, t1383, t1384, t1385, t1386, t1387, t1388, t1389, t1390, t1391, t1392, t1393, t1394, t1395, t1396, t1397, t1398, t1399, t1400,
t1401, t1402, t1403, t1404, t1405, t1406, t1407, t1408, t1409, t1410, t1411, t1412, t1413, t1414, t1415, t1416, t1417, t1418, t1419, t1420,
t1421, t1422, t1423, t1424, t1425, t1426, t1427, t1428, t1429, t1430, t1431, t1432, t1433, t1434, t1435, t1436, t1437, t1438, t1439, t1440,
t1441, t1442, t1443, t1444, t1445, t1446, t1447, t1448, t1449, t1450, t1451, t1452, t1453, t1454, t1455, t1456, t1457, t1458, t1459, t1460,
t1461, t1462, t1463, t1464, t1465, t1466, t1467, t1468, t1469, t1470, t1471, t1472, t1473, t1474, t1475, t1476, t1477, t1478, t1479, t1480,
t1481, t1482, t1483, t1484, t1485, t1486, t1487, t1488, t1489, t1490, t1491, t1492, t1493, t1494, t1495, t1496, t1497, t1498, t1499, t1500,
t1501, t1502, t1503, t1504, t1505, t1506, t1507, t1508, t1509, t1510, t1511, t1512, t1513, t1514, t1515, t1516, t1517, t1518, t1519, t1520,
t1521, t1522, t1523, t1524, t1525, t1526, t1527, t1528, t1529, t1530, t1531, t1532, t1533, t1534, t1535, t1536, t1537, t1538, t1539, t1540,
t1541, t1542, t1543, t1544, t1545, t1546, t1547, t1548, t1549, t1550, t1551, t1552, t1553, t1554, t1555, t1556, t1557, t1558, t1559, t1560,
t1561, t1562, t1563, t1564, t1565, t1566, t1567, t1568, t1569, t1570, t1571, t1572, t1573, t1574, t1575, t1576, t1577, t1578, t1579, t1580,
t1581, t1582, t1583, t1584, t1585, t1586, t1587, t1588, t1589, t1590, t1591, t1592, t1593, t1594, t1595, t1596, t1597, t1598, t1599, t1600,
t1601, t1602, t1603, t1604, t1605, t1606, t1607, t1608, t1609, t1610, t1611, t1612, t1613, t1614, t1615, t1616, t1617, t1618, t1619, t1620,
t1621, t1622, t1623, t1624, t1625, t1626, t1627, t1628, t1629, t1630, t1631, t1632, t1633, t1634, t1635, t1636, t1637, t1638, t1639, t1640,
t1641, t1642, t1643, t1644, t1645, t1646, t1647, t1648, t1649, t1650, t1651, t1652, t1653, t1654, t1655, t1656, t1657, t1658, t1659, t1660,
t1661, t1662, t1663, t1664, t1665, t1666, t1667, t1668, t1669, t1670, t1671, t1672, t1673, t1674, t1675, t1676, t1677, t1678, t1679, t1680,
t1681, t1682, t1683, t1684, t1685, t1686, t1687, t1688, t1689, t1690, t1691, t1692, t1693, t1694, t1695, t1696, t1697, t1698, t1699, t1700,
t1701, t1702, t1703, t1704, t1705, t1706, t1707, t1708, t1709, t1710, t1711, t1712, t1713, t1714, t1715, t1716, t1717, t1718, t1719, t1720,
t1721, t1722, t1723, t1724, t1725, t1726, t1727, t1728, t1729, t1730, t1731, t1732, t1733, t1734, t1735, t1736, t1737, t1738, t1739, t1740,
t1741, t1742, t1743, t1744, t1745, t1746, t1747, t1748, t1749, t1750, t1751, t1752, t1753, t1754, t1755, t1756, t1757, t1758, t1759, t1760,
t1761, t1762, t1763, t1764, t1765, t1766, t1767, t1768, t1769, t1770, t1771, t1772, t1773, t1774, t1775, t1776, t1777, t1778, t1779, t1780,
t1781, t1782, t1783, t1784, t1785, t1786, t1787, t1788, t1789, t1790, t1791, t1792, t1793, t1794, t1795, t1796, t1797, t1798, t1799, t1800,
t1801, t1802, t1803, t1804, t1805, t1806, t1807, t1808, t1809, t1810, t1811, t1812, t1813, t1814, t1815, t1816, t1817, t1818, t1819, t1820,
t1821, t1822, t1823, t1824, t1825, t1826, t1827, t1828, t1829, t1830, t1831, t1832, t1833, t1834, t1835, t1836, t1837, t1838, t1839, t1840,
t1841, t1842, t1843, t1844, t1845, t1846, t1847, t1848, t1849, t1850, t1851, t1852, t1853, t1854, t1855, t1856, t1857, t1858, t1859, t1860,
t1861, t1862, t1863, t1864, t1865, t1866, t1867, t1868, t1869, t1870, t1871, t1872, t1873, t1874, t1875, t1876, t1877, t1878, t1879, t1880,
t1881, t1882, t1883, t1884, t1885, t1886, t1887, t1888, t1889, t1890, t1891, t1892, t1893, t1894, t1895, t1896, t1897, t1898, t1899, t1900,
t1901, t1902, t1903, t1904, t1905, t1906, t1907, t1908, t1909, t1910, t1911, t1912, t1913, t1914, t1915, t1916, t1917, t1918, t1919, t1920,
t1921, t1922, t1923, t1924, t1925, t1926, t1927, t1928, t1929, t1930, t1931, t1932, t1933, t1934, t1935, t1936, t1937, t1938, t1939, t1940,
t1941, t1942, t1943, t1944, t1945, t1946, t1947, t1948, t1949, t1950, t1951, t1952, t1953, t1954, t1955, t1956, t1957, t1958, t1959, t1960,
t1961, t1962, t1963, t1964, t1965, t1966, t1967, t1968, t1969, t1970, t1971, t1972, t1973, t1974, t1975, t1976, t1977, t1978, t1979, t1980,
t1981, t1982, t1983, t1984, t1985, t1986, t1987, t1988, t1989, t1990, t1991, t1992, t1993, t1994, t1995, t1996, t1997, t1998, t1999, t2000,
t2001, t2002, t2003, t2004, t2005, t2006, t2007, t2008, t2009, t2010, t2011, t2012, t2013, t2014, t2015, t2016, t2017, t2018, t2019, t2020,
t2021, t2022, t2023, t2024, t2025, t2026, t2027, t2028, t2029, t2030, t2031, t2032, t2033, t2034, t2035, t2036, t2037, t2038, t2039, t2040,
t2041, t2042, t2043, t2044, t2045, t2046, t2047, t2048, t2049, t2050, t2051, t2052, t2053, t2054, t2055, t2056, t2057, t2058, t2059, t2060,
t2061, t2062, t2063, t2064, t2065, t2066, t2067, t2068, t2069, t2070, t2071, t2072, t2073, t2074, t2075, t2076, t2077, t2078, t2079, t2080,
t2081, t2082, t2083, t2084, t2085, t2086, t2087, t2088, t2089, t2090, t2091, t2092, t2093, t2094, t2095, t2096, t2097, t2098, t2099, t2100,
t2101, t2102, t2103, t2104, t2105, t2106, t2107, t2108, t2109, t2110, t2111, t2112, t2113, t2114, t2115, t2116, t2117, t2118, t2119, t2120,
t2121, t2122, t2123, t2124, t2125, t2126, t2127, t2128, t2129, t2130, t2131, t2132, t2133, t2134, t2135, t2136, t2137, t2138, t2139, t2140,
t2141, t2142, t2143, t2144, t2145, t2146, t2147, t2148, t2149, t2150, t2151, t2152, t2153, t2154, t2155, t2156, t2157, t2158, t2159, t2160,
t2161, t2162, t2163, t2164, t2165, t2166, t2167, t2168, t2169, t2170, t2171, t2172, t2173, t2174, t2175, t2176, t2177, t2178, t2179, t2180,
t2181, t2182, t2183, t2184, t2185, t2186, t2187, t2188, t2189, t2190, t2191, t2192, t2193, t2194, t2195, t2196, t2197, t2198, t2199, t2200,
t2201, t2202, t2203, t2204, t2205, t2206, t2207, t2208, t2209, t2210, t2211, t2212, t2213, t2214, t2215, t2216, t2217, t2218, t2219, t2220,
t2221, t2222, t2223, t2224, t2225, t2226, t2227, t2228, t2229, t2230, t2231, t2232, t2233, t2234, t2235, t2236, t2237, t2238, t2239, t2240,
t2241, t2242, t2243, t2244, t2245, t2246, t2247, t2248, t2249, t2250, t2251, t2252, t2253, t2254, t2255, t2256, t2257, t2258, t2259, t2260,
t2261, t2262, t2263, t2264, t2265, t2266, t2267, t2268, t2269, t2270, t2271, t2272, t2273, t2274, t2275, t2276, t2277, t2278, t2279, t2280,
t2281, t2282, t2283, t2284, t2285, t2286, t2287, t2288, t2289, t2290, t2291, t2292, t2293, t2294, t2295, t2296, t2297, t2298, t2299, t2300,
t2301, t2302, t2303, t2304, t2305, t2306, t2307, t2308, t2309, t2310, t2311, t2312, t2313, t2314, t2315, t2316, t2317, t2318, t2319, t2320,
t2321, t2322, t2323, t2324, t2325, t2326, t2327, t2328, t2329, t2330, t2331, t2332, t2333, t2334, t2335, t2336, t2337, t2338, t2339, t2340,
t2341, t2342, t2343, t2344, t2345, t2346, t2347, t2348, t2349, t2350, t2351, t2352, t2353, t2354, t2355, t2356, t2357, t2358, t2359, t2360,
t2361, t2362, t2363, t2364, t2365, t2366, t2367, t2368, t2369, t2370, t2371, t2372, t2373, t2374, t2375, t2376, t2377, t2378, t2379, t2380,
t2381, t2382, t2383, t2384, t2385, t2386, t2387, t2388, t2389, t2390, t2391, t2392, t2393, t2394, t2395, t2396, t2397, t2398, t2399, t2400,
t2401, t2402, t2403, t2404, t2405, t2406, t2407, t2408, t2409, t2410, t2411, t2412, t2413, t2414, t2415, t2416, t2417, t2418, t2419, t2420,
t2421, t2422, t2423, t2424, t2425, t2426, t2427, t2428, t2429, t2430, t2431, t2432, t2433, t2434, t2435, t2436, t2437, t2438, t2439, t2440,
t2441, t2442, t2443, t2444, t2445, t2446, t2447, t2448, t2449, t2450, t2451, t2452, t2453, t2454, t2455, t2456, t2457, t2458, t2459, t2460,
t2461, t2462, t2463, t2464, t2465, t2466, t2467, t2468, t2469, t2470, t2471, t2472, t2473, t2474, t2475, t2476, t2477, t2478, t2479, t2480,
t2481, t2482, t2483, t2484, t2485, t2486, t2487, t2488, t2489, t2490, t2491, t2492, t2493, t2494, t2495, t2496, t2497, t2498, t2499, t2500,
t2501, t2502, t2503, t2504, t2505, t2506, t2507, t2508, t2509, t2510, t2511, t2512, t2513, t2514, t2515, t2516, t2517, t2518, t2519, t2520,
t2521, t2522, t2523, t2524, t2525, t2526, t2527, t2528, t2529, t2530, t2531, t2532, t2533, t2534, t2535, t2536, t2537, t2538, t2539, t2540,
t2541, t2542, t2543, t2544, t2545, t2546, t2547, t2548, t2549, t2550, t2551, t2552, t2553, t2554, t2555, t2556, t2557, t2558, t2559, t2560,
t2561, t2562, t2563, t2564, t2565, t2566, t2567, t2568, t2569, t2570, t2571, t2572, t2573, t2574, t2575, t2576, t2577, t2578, t2579, t2580,
t2581, t2582, t2583, t2584, t2585, t2586, t2587, t2588, t2589, t2590, t2591, t2592, t2593, t2594, t2595, t2596, t2597, t2598, t2599, t2600,
t2601, t2602, t2603, t2604, t2605, t2606, t2607, t2608, t2609, t2610, t2611, t2612, t2613, t2614, t2615, t2616, t2617, t2618, t2619, t2620,
t2621, t2622, t2623, t2624, t2625, t2626, t2627, t2628, t2629, t2630, t2631, t2632, t2633, t2634, t2635, t2636, t2637, t2638, t2639, t2640,
t2641, t2642, t2643, t2644, t2645, t2646, t2647, t2648, t2649, t2650, t2651, t2652, t2653, t2654, t2655, t2656, t2657, t2658, t2659, t2660,
t2661, t2662, t2663, t2664, t2665, t2666, t2667, t2668, t2669, t2670, t2671, t2672, t2673, t2674, t2675, t2676, t2677, t2678, t2679, t2680,
t2681, t2682, t2683, t2684, t2685, t2686, t2687, t2688, t2689, t2690, t2691, t2692, t2693, t2694, t2695, t2696, t2697, t2698, t2699, t2700,
t2701, t2702, t2703, t2704, t2705, t2706, t2707, t2708, t2709, t2710, t2711, t2712, t2713, t2714, t2715, t2716, t2717, t2718, t2719, t2720,
t2721, t2722, t2723, t2724, t2725, t2726, t2727, t2728, t2729, t2730, t2731, t2732, t2733, t2734, t2735, t2736, t2737, t2738, t2739, t2740,
t2741, t2742, t2743, t2744, t2745, t2746, t2747, t2748, t2749, t2750, t2751, t2752, t2753, t2754, t2755, t2756, t2757, t2758, t2759, t2760,
t2761, t2762, t2763, t2764, t2765, t2766, t2767, t2768, t2769, t2770, t2771, t2772, t2773, t2774, t2775, t2776, t2777, t2778, t2779, t2780,
t2781, t2782, t2783, t2784, t2785, t2786, t2787, t2788, t2789, t2790, t2791, t2792, t2793, t2794, t2795, t2796, t2797, t2798, t2799, t2800,
t2801, t2802, t2803, t2804, t2805, t2806, t2807, t2808, t2809, t2810, t2811, t2812, t2813, t2814, t2815, t2816, t2817, t2818, t2819, t2820,
t2821, t2822, t2823, t2824, t2825, t2826, t2827, t2828, t2829, t2830, t2831, t2832, t2833, t2834, t2835, t2836, t2837, t2838, t2839, t2840,
t2841, t2842, t2843, t2844, t2845, t2846, t2847, t2848, t2849, t2850, t2851, t2852, t2853, t2854, t2855, t2856, t2857, t2858, t2859, t2860,
t2861, t2862, t2863, t2864, t2865, t2866, t2867, t2868, t2869, t2870, t2871, t2872, t2873, t2874, t2875, t2876, t2877, t2878, t2879, t2880,
t2881, t2882, t2883, t2884, t2885, t2886, t2887, t2888, t2889, t2890, t2891, t2892, t2893, t2894, t2895, t2896, t2897, t2898, t2899, t2900,
t2901, t2902, t2903, t2904, t2905, t2906, t2907, t2908, t2909, t2910, t2911, t2912, t2913, t2914, t2915, t2916, t2917, t2918, t2919, t2920,
t2921, t2922, t2923, t2924, t2925, t2926, t2927, t2928, t2929, t2930, t2931, t2932, t2933, t2934, t2935, t2936, t2937, t2938, t2939, t2940,
t2941, t2942, t2943, t2944, t2945, t2946, t2947, t2948, t2949, t2950, t2951, t2952, t2953, t2954, t2955, t2956, t2957, t2958, t2959, t2960,
t2961, t2962, t2963, t2964, t2965, t2966, t2967, t2968, t2969, t2970, t2971, t2972, t2973, t2974, t2975, t2976, t2977, t2978, t2979, t2980,
t2981, t2982, t2983, t2984, t2985, t2986, t2987, t2988, t2989, t2990, t2991, t2992, t2993, t2994, t2995, t2996, t2997, t2998, t2999, t3000,
t3001, t3002, t3003, t3004, t3005, t3006, t3007, t3008, t3009, t3010, t3011, t3012, t3013, t3014, t3015, t3016, t3017, t3018, t3019, t3020,
t3021, t3022, t3023, t3024, t3025, t3026, t3027, t3028, t3029, t3030, t3031, t3032, t3033, t3034, t3035, t3036, t3037, t3038, t3039, t3040,
t3041, t3042, t3043, t3044, t3045, t3046, t3047, t3048, t3049, t3050, t3051, t3052, t3053, t3054, t3055, t3056, t3057, t3058, t3059, t3060,
t3061, t3062, t3063, t3064, t3065, t3066, t3067, t3068, t3069, t3070, t3071, t3072, t3073, t3074, t3075, t3076, t3077, t3078, t3079, t3080,
t3081, t3082, t3083, t3084, t3085, t3086, t3087, t3088, t3089, t3090, t3091, t3092, t3093, t3094, t3095, t3096, t3097, t3098, t3099, t3100,
t3101, t3102, t3103, t3104, t3105, t3106, t3107, t3108, t3109, t3110, t3111, t3112, t3113, t3114, t3115, t3116, t3117, t3118, t3119, t3120,
t3121, t3122, t3123, t3124, t3125, t3126, t3127, t3128, t3129, t3130, t3131, t3132, t3133, t3134, t3135, t3136, t3137, t3138, t3139, t3140,
t3141, t3142, t3143, t3144, t3145, t3146, t3147, t3148, t3149, t3150, t3151, t3152, t3153, t3154, t3155, t3156, t3157, t3158, t3159, t3160,
t3161, t3162, t3163, t3164, t3165, t3166, t3167, t3168, t3169, t3170, t3171, t3172, t3173, t3174, t3175, t3176, t3177, t3178, t3179, t3180,
t3181, t3182, t3183, t3184, t3185, t3186, t3187, t3188, t3189, t3190, t3191, t3192, t3193, t3194, t3195, t3196, t3197, t3198, t3199, t3200,
t3201, t3202, t3203, t3204, t3205, t3206, t3207, t3208, t3209, t3210, t3211, t3212, t3213, t3214, t3215, t3216, t3217, t3218, t3219, t3220,
t3221, t3222, t3223, t3224, t3225, t3226, t3227, t3228, t3229, t3230, t3231, t3232, t3233, t3234, t3235, t3236, t3237, t3238, t3239, t3240,
t3241, t3242, t3243, t3244, t3245, t3246, t3247, t3248, t3249, t3250, t3251, t3252, t3253, t3254, t3255, t3256, t3257, t3258, t3259, t3260,
t3261, t3262, t3263, t3264, t3265, t3266, t3267, t3268, t3269, t3270, t3271, t3272, t3273, t3274, t3275, t3276, t3277, t3278, t3279, t3280,
t3281, t3282, t3283, t3284, t3285, t3286, t3287, t3288, t3289, t3290, t3291, t3292, t3293, t3294, t3295, t3296, t3297, t3298, t3299, t3300;



jointdynamics::jointdynamics()
        {

        }

int sign(double x)
{
    double margin=0;
    if (x > margin) return 1;
    if (abs(x) < margin||abs(x)==margin) return 0;
    if (x < -margin) return -1;
}

void JointMatrix(const double* q, const double* dq, const double* ddq, const double* ts, double* distalVec)
{
    
		//double[] qTemp=new double[common.RobotAxis];
      //  , dqTemp, ddqTemp;
    double q1, q2, q3, q4, q5, q6;
    double dq1, dq2, dq3, dq4, dq5, dq6;
    double ddq1, ddq2, ddq3, ddq4, ddq5, ddq6;
    double ts1, ts2, ts3, ts4, ts5, ts6;
    double g = 9.81;

    q1 = q[0];
    q2 = q[1];
    q3 = q[2];
    q4 = q[3];
    q5 = q[4];
    q6 = q[5];

    dq1 = dq[0]; dq2 = dq[1]; dq3 = dq[2]; dq4 = dq[3]; dq5 = dq[4]; dq6 = dq[5];
    ddq1 = ddq[0]; ddq2 = ddq[1]; ddq3 = ddq[2]; ddq4 = ddq[3]; ddq5 = ddq[4]; ddq6 = ddq[5];

    ts1 = ts[0]; ts2 = ts[1]; ts3 = ts[2]; ts4 = ts[3]; ts5 = ts[4]; ts6 = ts[5];

    double A0[6][JointGroupDim];
    for (int i = 0; i < 6; i++)
        for (int j = 0; j < JointGroupDim; j++)
            A0[i][j] = 0;

	double DF = 0;//The Sixth Coordinate in Wrist
  
    
	t2 = sin(q2);
	t3 = cos(q2);
	t4 = ddq1 * t2;
	t5 = dq1 * dq1;
	t6 = ddq1 * t3;
	t7 = dq1 * dq2*t2*t3;
	t8 = dq2 * dq2;
	t9 = t2 * t3*t5;
	t10 = t6 - dq1 * dq2*t2*2.0;
	t11 = dq1 * dq2*t3*2.0;
	t12 = t4 + t11;
	t13 = t3 * t3;
	t14 = t2 * t2;
	t15 = sin(q3);
	t16 = cos(q3);
	t17 = dq1 * dq2*t3;
	t18 = t4 + t17;
	t23 = dq1 * dq2*t2;
	t19 = t6 - t23;
	t20 = dq1 * t2*t15;
	t30 = dq1 * t3*t16;
	t21 = t20 - t30;
	t22 = t16 * t18;
	t24 = t15 * t19;
	t31 = dq3 * t21;
	t25 = t22 + t24 - t31;
	t26 = dq2 + dq3;
	t27 = dq1 * t3*t15;
	t28 = dq1 * t2*t16;
	t29 = t27 + t28;
	t32 = dq3 * t29;
	t33 = t15 * t18;
	t34 = t26 * t29;
	t41 = t16 * t19;
	t35 = t32 + t33 + t34 - t41;
	t60 = t21 * t26;
	t36 = t22 + t24 - t31 - t60;
	t37 = t26 * t26;
	t38 = t29 * t29;
	t39 = t37 - t38;
	t44 = t21 * t29;
	t40 = ddq2 + ddq3 - t44;
	t42 = t32 + t33 - t41;
	t43 = t20 - t30;
	t45 = t20 - t30;
	t46 = t16 * t26*t29;
	t47 = t20 - t30;
	t48 = a2 * ddq1;
	t49 = a3 * t19;
	t50 = a3 * dq2;
	t51 = d3 * dq1*t2;
	t52 = t50 + t51;
	t55 = dq1 * t2*t52;
	t56 = d3 * t5*t13;
	t53 = t48 + t49 - t55 - t56;
	t54 = t20 - t30;
	t57 = t16 * t53;
	t58 = t29 * (t20 - t30);
	t59 = ddq2 + ddq3 + t58;
	t61 = t15 * t53;
	t62 = t37 + t38;
	t63 = g * t3;
	t64 = g * t2;
	t65 = a2 * t3*t5;
	t66 = a3 * ddq2;
	t67 = d3 * t18;
	t68 = a2 * t2*t5;
	t69 = a3 * t2*t3*t5;
	t75 = d3 * dq1*dq2*t3;
	t70 = -t63 + t66 + t67 + t68 + t69 - t75;
	t71 = dq2 * t52;
	t72 = d3 * t19;
	t73 = a3 * t5*t13;
	t74 = t64 + t65 + t71 + t72 + t73;
	t76 = t15 * t70;
	t86 = t16 * t74;
	t77 = t76 - t86;
	t78 = t16 * t70;
	t79 = t15 * t74;
	t80 = t78 + t79;
	t81 = t20 - t30;
	t82 = t32 + t33 - t34 - t41;
	t83 = t26 * (t20 - t30);
	t84 = t22 + t24 - t31 + t83;
	t85 = t20 - t30;
	t87 = cos(q4);
	t88 = sin(q4);
	t89 = t26 * t88;
	t90 = t29 * t87;
	t91 = t89 + t90;
	t92 = t26 * t87;
	t94 = t29 * t88;
	t93 = t92 - t94;
	t95 = dq4 * t93;
	t96 = t25 * t87;
	t97 = ddq2 + ddq3;
	t98 = t88 * t97;
	t99 = t95 + t96 + t98;
	t100 = t87 * t99;
	t101 = dq4 + t20 - t30;
	t133 = t88 * t91*t101;
	t102 = t100 - t133;
	t103 = dq4 * t91;
	t104 = t25 * t88;
	t105 = t91 * t101;
	t122 = t87 * t97;
	t106 = t103 + t104 + t105 - t122;
	t107 = t87 * t106;
	t108 = t93 * t101;
	t109 = t95 + t96 + t98 + t108;
	t110 = t88 * t109;
	t111 = t107 + t110;
	t112 = t91 * t91;
	t113 = t93 * t93;
	t114 = t112 - t113;
	t115 = t91 * t93;
	t116 = ddq4 + t32 + t33 - t41 + t115;
	t117 = t87 * t116;
	t118 = t101 * t101;
	t119 = t88 * (t112 - t118);
	t120 = t117 + t119;
	t121 = t95 + t96 + t98 - t108;
	t123 = t16 * t91*t93;
	t124 = t103 + t104 - t122;
	t125 = t88 * t124;
	t132 = t87 * t93*t101;
	t126 = t125 - t132;
	t127 = ddq4 + t32 + t33 - t41 - t115;
	t128 = t88 * t127;
	t129 = t113 - t118;
	t130 = t128 - t87 * t129;
	t131 = t103 + t104 - t105 - t122;
	t134 = t132 + t133;
	t135 = ddq4 + t32 + t33 - t41;
	t136 = t113 + t118;
	t137 = -t20 + t30;
	t138 = d4 * t29;
	t139 = t117 - t88 * t136;
	t148 = a4 * t137;
	t140 = t138 - t148;
	t141 = a4 * t97;
	t142 = d4 * t88*t136;
	t143 = a4 * t42;
	t144 = dq3 * t137;
	t145 = t22 + t24 + t144;
	t146 = a4 * t26*t29;
	t147 = a4 * t37;
	t149 = d4 * t97;
	t163 = t137 * t140;
	t150 = -t76 + t86 + t147 + t149 - t163;
	t151 = t88 * t150;
	t152 = a4 * t87*t116;
	t153 = t87 * t136;
	t154 = t88 * t116;
	t155 = t153 + t154;
	t156 = t88 * t145;
	t157 = t103 + t105 - t122 + t156;
	t164 = d4 * t37;
	t165 = t29 * t140;
	t158 = t78 + t79 + t141 - t164 - t165;
	t159 = t112 + t118;
	t160 = d4 * t145;
	t161 = d4 * t26*t137;
	t162 = -t48 - t49 + t55 + t56 + t143 + t146 + t160 + t161;
	t166 = t87 * t158;
	t167 = d4 * t88*t127;
	t168 = d4 * t87*t159;
	t169 = t166 + t167 + t168;
	t170 = t87 * t159;
	t171 = t128 + t170;
	t172 = t88 * t162;
	t173 = a4 * t88*t127;
	t174 = a4 * t87*t159;
	t181 = t87 * t150;
	t175 = t172 + t173 + t174 - t181;
	t176 = t87 * t127;
	t590 = t88 * t159;
	t177 = t176 - t590;
	t178 = t87 * t145;
	t179 = t95 + t98 + t108 + t178;
	t180 = t87 * t162;
	t182 = t95 + t98 - t108 + t178;
	t183 = t103 - t105 - t122 + t156;
	t184 = t151 + t180;
	t185 = t87 * t184;
	t186 = t172 - t181;
	t187 = t88 * t186;
	t188 = d4 * t87*t182;
	t189 = d4 * t88*t183;
	t190 = t185 + t187 + t188 + t189;
	t191 = t87 * t182;
	t192 = t88 * t183;
	t193 = t191 + t192;
	t194 = a4 * t87*t182;
	t195 = a4 * t88*t183;
	t196 = t194 + t195;
	t197 = t112 + t113;
	t198 = t87 * t183;
	t592 = t88 * t182;
	t199 = t198 - t592;
	t200 = a4 * t87*t184;
	t201 = a4 * t88*t186;
	t202 = t200 + t201;
	t203 = d4 * t87*t184;
	t204 = d4 * t88*t186;
	t205 = t203 + t204;
	t206 = t88 * t184;
	t591 = t87 * t186;
	t207 = t206 - t591;
	t208 = t185 + t187;
	t209 = cos(q5);
	t210 = sin(q5);
	t211 = t91 * t210;
	t212 = t101 * t209;
	t213 = t211 + t212;
	t214 = t91 * t209;
	t215 = t95 + t98 + t178;
	t216 = t135 * t210;
	t217 = dq5 * t213;
	t221 = t209 * t215;
	t218 = t216 + t217 - t221;
	t219 = dq5 + t92 - t94;
	t223 = t101 * t210;
	t220 = t214 - t223;
	t222 = t209 * t218;
	t224 = t210 * t218;
	t274 = t209 * t219*t220;
	t225 = t224 - t274;
	t226 = t219 * t220;
	t227 = t210 * t215;
	t228 = t135 * t209;
	t229 = dq5 * t220;
	t230 = t226 + t227 + t228 + t229;
	t231 = t213 * t219;
	t232 = t216 + t217 - t221 + t231;
	t233 = t214 - t223;
	t234 = t209 * t232;
	t235 = t209 * t230;
	t595 = t210 * t232;
	t236 = t235 - t595;
	t237 = t213 * t213;
	t238 = t214 - t223;
	t239 = t87 * t236;
	t240 = t210 * t230;
	t241 = t234 + t240;
	t242 = t214 - t223;
	t243 = t219 * t219;
	t244 = t214 - t223;
	t245 = t213 * t220;
	t246 = -ddq5 + t103 - t122 + t156 + t245;
	t247 = t216 + t217 - t221 - t231;
	t248 = t88 * t247;
	t249 = t214 - t223;
	t250 = t209 * t246;
	t251 = t214 - t223;
	t252 = t210 * t246;
	t253 = t88 * t213*(t214 - t223);
	t254 = dq5 * (t214 - t223);
	t255 = t227 + t228 + t254;
	t256 = t210 * t255;
	t257 = t209 * t213*t219;
	t258 = t256 + t257;
	t259 = t87 * t258;
	t260 = t253 + t259;
	t261 = t209 * t255;
	t275 = t210 * t213*t219;
	t262 = t261 - t275;
	t263 = ddq5 - t103 + t122 - t156 + t245;
	t264 = t237 - t243;
	t265 = t209 * t264;
	t305 = t210 * t263;
	t266 = t265 - t305;
	t267 = t87 * t266;
	t268 = -t226 + t227 + t228 + t254;
	t269 = t88 * t268;
	t270 = t267 + t269;
	t271 = t209 * t263;
	t272 = t210 * t264;
	t273 = t271 + t272;
	t276 = t210 * t219*t220;
	t277 = t274 + t275;
	t278 = t257 - t276;
	t279 = t87 * t278;
	t280 = ddq5 - t103 + t122 - t156;
	t281 = t88 * t280;
	t282 = t279 + t281;
	t283 = t237 + t243;
	t285 = t209 * t283;
	t284 = t252 - t285;
	t286 = t184 * t209;
	t287 = a4 * t87*t230;
	t288 = a4 * t88*t284;
	t289 = t286 + t287 + t288;
	t290 = t158 * t209;
	t320 = t186 * t210;
	t291 = t290 - t320;
	t292 = d4 * t87*t230;
	t293 = t87 * t184*t210;
	t294 = d4 * t88*t284;
	t295 = t292 + t293 + t294 - t88 * t291;
	t296 = t88 * t230;
	t297 = t210 * t283;
	t298 = t87 * t230;
	t299 = t88 * t284;
	t300 = t298 + t299;
	t301 = t214 - t223;
	t302 = t214 - t223;
	t303 = t214 - t223;
	t304 = t214 - t223;
	t306 = t214 - t223;
	t307 = t87 * t232;
	t308 = t214 - t223;
	t309 = t158 * t210;
	t310 = t186 * t209;
	t311 = t309 + t310;
	t312 = t88 * t311;
	t313 = t214 - t223;
	t314 = t87 * t184*t209;
	t315 = t184 * t210;
	t316 = t214 - t223;
	t317 = a4 * t87*t232;
	t318 = t214 - t223;
	t319 = t214 - t223;
	t321 = t214 - t223;
	t322 = t214 - t223;
	t323 = t209 * t268;
	t324 = t210 * (t216 + t217 - t221 - t231);
	t325 = t323 + t324;
	t326 = t214 - t223;
	t327 = t214 - t223;
	t328 = t214 - t223;
	t329 = t88 * t325;
	t330 = t209 * t291;
	t331 = t210 * t311;
	t332 = t330 + t331;
	t333 = t87 * t332;
	t334 = t214 - t223;
	t335 = d4 * t88*t325;
	t336 = t209 * t311;
	t337 = t214 - t223;
	t338 = a4 * t88*t325;
	t339 = t87 * t325;
	t340 = t214 - t223;
	t341 = t209 * t247;
	t605 = t210 * t268;
	t342 = t341 - t605;
	t344 = t210 * t291;
	t343 = t336 - t344;
	t345 = d4 * t88*t343;
	t346 = t203 + t345;
	t347 = a4 * t88*t343;
	t348 = t200 + t347;
	t609 = t87 * t343;
	t349 = t206 - t609;
	t350 = t88 * t343;
	t351 = t185 + t350;
	t352 = cos(q6);
	t353 = sin(q6);
	t354 = t219 * t352;
	t357 = t220 * t353;
	t355 = t354 - t357;
	t356 = t219 * t353;
	t358 = dq6 * t355;
	t359 = t280 * t353;
	t365 = t218 * t352;
	t360 = t358 + t359 - t365;
	t361 = t352 * t360;
	t362 = t352 * (t214 - t223);
	t363 = t356 + t362;
	t364 = dq6 + t211 + t212;
	t368 = t353 * t363*t364;
	t366 = t361 - t368;
	t367 = t209 * t355*t363;
	t369 = t209 * t366;
	t418 = t210 * t355*t363;
	t370 = t369 - t418;
	t371 = t353 * t360;
	t372 = t352 * t363*t364;
	t373 = t371 + t372;
	t374 = t87 * t370 - t88 * t373;
	t375 = t355 * t364;
	t376 = t358 + t359 - t365 + t375;
	t377 = t363 * t364;
	t378 = dq6 * t363;
	t381 = t218 * t353;
	t382 = t280 * t352;
	t379 = t377 + t378 - t381 - t382;
	t380 = t353 * t376;
	t383 = t352 * t379;
	t384 = t380 + t383;
	t385 = t355 * t355;
	t386 = t363 * t363;
	t387 = t385 - t386;
	t388 = t210 * t384;
	t692 = t209 * t387;
	t389 = t388 - t692;
	t390 = t352 * t376;
	t610 = t353 * t379;
	t391 = t390 - t610;
	t392 = t88 * t391;
	t393 = t209 * t384;
	t394 = t210 * t387;
	t395 = t393 + t394;
	t396 = t87 * t395;
	t397 = t392 + t396;
	t398 = t364 * t364;
	t399 = t386 - t398;
	t400 = t355 * t363;
	t401 = ddq6 + t227 + t228 + t254 + t400;
	t402 = t353 * t399;
	t403 = t352 * t401;
	t404 = t402 + t403;
	t405 = t358 + t359 - t365 - t375;
	t406 = t352 * t399;
	t456 = t353 * t401;
	t407 = t406 - t456;
	t408 = t88 * t407;
	t409 = t210 * t405;
	t410 = t209 * t404;
	t411 = t409 + t410;
	t412 = t87 * t411;
	t413 = t408 + t412;
	t414 = -t378 + t381 + t382;
	t415 = t353 * t414;
	t416 = t352 * t355*t364;
	t417 = t415 + t416;
	t419 = t210 * t417;
	t420 = t367 + t419;
	t611 = t209 * t417;
	t421 = t418 - t611;
	t422 = t352 * t414;
	t440 = t353 * t355*t364;
	t423 = t422 - t440;
	t424 = ddq6 + t227 + t228 + t254 - t400;
	t425 = t385 - t398;
	t426 = t352 * t425;
	t434 = t353 * t424;
	t427 = t426 - t434;
	t428 = t377 - t378 + t381 + t382;
	t429 = t353 * t425;
	t430 = t352 * t424;
	t431 = t429 + t430;
	t432 = t88 * t431;
	t433 = t210 * t428;
	t435 = t209 * t427;
	t436 = t433 + t435;
	t437 = t432 - t87 * t436;
	t438 = t209 * t428;
	t439 = t438 - t210 * t427;
	t441 = ddq6 + t227 + t228 + t254;
	t442 = t368 + t416;
	t443 = t372 - t440;
	t444 = t88 * t443;
	t445 = t210 * t441;
	t446 = t209 * t442;
	t447 = t445 + t446;
	t448 = t87 * t447;
	t449 = t444 + t448;
	t450 = t209 * t441;
	t694 = t210 * t442;
	t451 = t450 - t694;
	t452 = t214 - t223;
	t453 = DF * t243;
	t454 = t214 - t223;
	t455 = t385 + t398;
	t475 = DF * t218;
	t476 = DF * t213*t219;
	t457 = t151 + t180 - t475 - t476;
	t458 = t352 * t457;
	t477 = DF * t280;
	t478 = DF * t213*t220;
	t459 = t309 + t310 - t477 - t478;
	t479 = t353 * t459;
	t460 = t458 - t479;
	t461 = t214 - t223;
	t462 = DF * t352*t401;
	t463 = t210 * t379;
	t464 = t352 * t455;
	t465 = t456 + t464;
	t468 = t209 * t465;
	t466 = t463 - t468;
	t469 = t353 * t455;
	t467 = t403 - t469;
	t470 = t88 * t466;
	t471 = t214 - t223;
	t472 = DF * t353*t401;
	t473 = DF * t352*t455;
	t474 = t214 - t223;
	t480 = t210 * t460;
	t481 = d4 * t87*t467;
	t482 = d4 * t88*t466;
	t483 = t209 * t460;
	t484 = t214 - t223;
	t485 = a4 * t88*t466;
	t486 = t87 * t466;
	t614 = t88 * t467;
	t487 = t486 - t614;
	t488 = t210 * t465;
	t489 = t209 * t379;
	t490 = t488 + t489;
	t491 = t87 * t467;
	t492 = t470 + t491;
	t493 = a4 * t87*t467;
	t494 = t214 - t223;
	t495 = t214 - t223;
	t496 = t386 + t398;
	t497 = t352 * t459;
	t498 = t353 * t457;
	t499 = t497 + t498;
	t500 = t214 - t223;
	t501 = DF * t353*t424;
	t502 = DF * t352*t496;
	t503 = t352 * t496;
	t504 = t434 + t503;
	t505 = t210 * t376;
	t508 = t353 * t496;
	t506 = t430 - t508;
	t509 = t209 * t506;
	t507 = t505 - t509;
	t510 = t87 * t504;
	t511 = t510 - t88 * t507;
	t512 = t214 - t223;
	t513 = DF * t352*t424;
	t514 = t214 - t223;
	t515 = t210 * t499;
	t516 = d4 * t87*t504;
	t517 = t209 * t499;
	t518 = t214 - t223;
	t519 = a4 * t87*t504;
	t520 = t87 * t507;
	t521 = t88 * t504;
	t522 = t520 + t521;
	t523 = t210 * t506;
	t524 = t209 * t376;
	t525 = t523 + t524;
	t526 = t352 * t405;
	t534 = t353 * t428;
	t527 = t526 - t534;
	t528 = t385 + t386;
	t529 = t210 * t528;
	t530 = t353 * t405;
	t531 = t352 * t428;
	t532 = t530 + t531;
	t535 = t209 * t532;
	t533 = t529 - t535;
	t536 = t352 * t460;
	t537 = t353 * t499;
	t538 = DF * t352*t405;
	t540 = DF * t353*t428;
	t539 = t536 + t537 + t538 - t540;
	t541 = a4 * t87*t527;
	t542 = a4 * t88*t533;
	t543 = t541 + t542 - t210 * t539;
	t544 = t87 * t527;
	t545 = t88 * t533;
	t546 = t544 + t545;
	t547 = t353 * t460;
	t548 = DF * t352*t428;
	t549 = DF * t353*t405;
	t560 = t352 * t499;
	t550 = t547 + t548 + t549 - t560;
	t551 = d4 * t88*t533;
	t552 = t209 * t528;
	t553 = t210 * (t530 + t531);
	t554 = t552 + t553;
	t555 = t88 * t527;
	t556 = t87 * t209*t539;
	t557 = d4 * t87*t527;
	t558 = t551 + t556 + t557 - t88 * t550;
	t617 = t87 * t533;
	t559 = t555 - t617;
	t561 = t214 - t223;
	t562 = t536 + t537;
	t563 = t547 - t560;
	t564 = t209 * t563;
	t565 = t214 - t223;
	t566 = DF * t352*t460;
	t567 = DF * t353*t499;
	t568 = t566 + t567;
	t569 = t214 - t223;
	t570 = t214 - t223;
	t571 = t214 - t223;
	t572 = DF * t353*t460;
	t618 = DF * t352*t499;
	t573 = t572 - t618;
	t574 = t88 * t573;
	t575 = t214 - t223;
	t576 = t214 - t223;
	t577 = t210 * t568;
	t578 = t214 - t223;
	t579 = t214 - t223;
	t580 = t88 * t562;
	t581 = t214 - t223;
	t582 = t5 * t13;
	t583 = t5 * t14;
	t584 = t64 + t65;
	t585 = t137 * t137;
	t586 = t29 * t137;
	t587 = t26 * t137;
	t588 = t87 * t91*t101;
	t589 = t88 * t158;
	t593 = t210 * t219*(t214 - t223);
	t594 = t222 + t593;
	t596 = t214 - t223;
	t597 = t214 - t223;
	t598 = t209 * (-ddq5 + t103 - t122 + t156 + t245);
	t599 = t297 + t598;
	t600 = t296 - t87 * t284;
	t601 = t214 - t223;
	t602 = t214 - t223;
	t603 = t214 - t223;
	t604 = t214 - t223;
	t606 = t214 - t223;
	t607 = t214 - t223;
	t608 = d4 * t88*t184;
	t612 = t214 - t223;
	t613 = t214 - t223;
	t615 = t214 - t223;
	t616 = t214 - t223;
	t619 = t214 - t223;
	t620 = t210 * (t547 - t560);
	t621 = t214 - t223;
	t622 = t214 - t223;
	t623 = t214 - t223;
	t624 = t38 - t585;
	t625 = -t22 - t24 - t144 + t587;
	t626 = t88 * t215;
	t627 = t588 + t626;
	t628 = t87 * t179;
	t629 = t628 - t88 * t157;
	t630 = t87 * (t112 - t118);
	t631 = -t154 + t630;
	t632 = t103 - t122 + t156;
	t633 = t88 * t93*t101;
	t634 = -t176 - t88 * t129;
	t635 = -t588 + t633;
	t636 = d4 * t88*t116;
	t637 = d4 * t87*t136;
	t638 = d4 * t87*t127;
	t639 = d4 * t88*t182;
	t640 = a4 * t158;
	t641 = t87 * t213*(t214 - t223);
	t642 = t641 - t88 * t594;
	t643 = t214 - t223;
	t644 = t87 * (t216 + t217 - t221 - t231);
	t645 = t214 - t223;
	t646 = t88 * t258;
	t647 = t646 - t87 * t213*t220;
	t648 = t87 * t268;
	t649 = t88 * (t305 - t209 * (t237 - t243));
	t650 = t648 + t649;
	t651 = t87 * t280;
	t652 = t651 - t88 * t278;
	t653 = t87 * t291;
	t654 = d4 * t88*(t226 + t227 + t228 + t229);
	t655 = t88 * t184*t210;
	t656 = t214 - t223;
	t657 = t214 - t223;
	t658 = t88 * t184*t209;
	t659 = t88 * t332;
	t660 = t214 - t223;
	t661 = a4 * t332;
	t662 = t88 * t370;
	t663 = t87 * t373;
	t664 = t662 + t663;
	t665 = t87 * (t390 - t610);
	t666 = t665 - t88 * t395;
	t667 = t87 * (t406 - t456);
	t668 = t667 - t88 * t411;
	t669 = t88 * (t418 - t611);
	t670 = t87 * t423;
	t671 = t669 + t670;
	t672 = -t87 * t431 - t88 * t436;
	t673 = t88 * t447;
	t674 = t673 - t87 * t443;
	t675 = t214 - t223;
	t676 = t214 - t223;
	t677 = d4 * t88*(t403 - t469);
	t678 = t214 - t223;
	t679 = t214 - t223;
	t680 = t87 * (t547 + t548 + t549 - t560);
	t681 = d4 * t88*(t526 - t534);
	t682 = DF * t352*(t358 + t359 - t365 - t375);
	t683 = t536 + t537 - t540 + t682;
	t684 = t88 * t209*t683;
	t685 = t87 * (t572 - t618);
	t686 = t214 - t223;
	t687 = t88 * t209*t568;
	t688 = d4 * t88*t562;
	t689 = t214 - t223;
	t690 = t214 - t223;
	t691 = t210 * t366;
	t693 = t209 * t405;
	t695 = t214 - t223;
	t696 = t214 - t223;
	t697 = t214 - t223;
	t698 = t214 - t223;
	t699 = t214 - t223;
	A0[0][5] = ddq1;
	A0[0][10] = t7 + t2 * t18;
	A0[0][11] = t2 * t10 + t3 * t12;
	A0[0][12] = -t2 * (ddq2 + t9) - t3 * (t8 - t5 * t14);
	A0[0][13] = -t7 + t3 * t19;
	A0[0][14] = -t3 * (ddq2 - t9) + t2 * (t8 - t5 * t13);
	A0[0][16] = a2 * t10 + a2 * ddq1*t3;
	A0[0][17] = -a2 * t12 - a2 * ddq1*t2;
	A0[0][18] = -a2 * (t582 + t583) + t3 * t584 - t2 * (t63 - a2 * t2*t5);
	A0[0][19] = (a2*a2)*ddq1;
	A0[0][20] = t2 * (t16*t25 - t15 * t26*t29) + t3 * (t46 + t15 * t25);
	A0[0][21] = -t2 * (t15*t36 + t16 * t35) - t3 * (t15*t35 - t16 * t36);
	A0[0][22] = t2 * (t15*t39 - t16 * t40) - t3 * (t15*t40 + t16 * t39);
	A0[0][23] = -t3 * (t16*t42 - t15 * t21*t26) + t2 * (t15*t42 + t16 * t26*(t20 - t30));
	A0[0][24] = t2 * (t15*t59 + t16 * (t37 - t45 * t45)) - t3 * (t16*(ddq2 + ddq3 + t44) - t15 * (t37 - t43 * t43));
	A0[0][25] = -t3 * (t46 + t15 * t21*t26) - t2 * (t16*t21*t26 - t15 * t26*t29);
	A0[0][26] = -t2 * (t61 - d3 * t16*t40 + d3 * t15*(t37 + t47 * t47)) - a2 * t35 + t3 * (t57 - a3 * t35 + d3 * t15*t40 + d3 * t16*(t37 + t54 * t54));
	A0[0][27] = -t3 * (t61 + a3 * t36 - d3 * t16*t59 + d3 * t15*t62) - a2 * t36 - t2 * (t57 + d3 * t15*t59 + d3 * t16*t62);
	A0[0][28] = t2 * (t15*t77 + t16 * t80 + d3 * t15*t82 + d3 * t16*t84) - a2 * (t38 + t85 * t85) - t3 * (t16*t77 - t15 * t80 + a3 * (t38 + t81 * t81) + d3 * t16*t82 - d3 * t15*t84);
	A0[0][29] = a2 * t53 + t2 * (d3*t15*t77 + d3 * t16*t80) + t3 * (a3*t53 - d3 * t16*t77 + d3 * t15*t80);
	A0[0][30] = t2 * (t16*t102 - t15 * t91*t93) + t3 * (t123 + t15 * t102);
	A0[0][31] = -t2 * (t16*t111 - t15 * t114) - t3 * (t15*t111 + t16 * t114);
	A0[0][32] = -t2 * (t15*t121 + t16 * t120) - t3 * (t15*t120 - t16 * t121);
	A0[0][33] = t2 * (t16*t126 + t15 * t91*t93) - t3 * (t123 - t15 * t126);
	A0[0][34] = t2 * (t15*t131 + t16 * t130) + t3 * (t15*t130 - t16 * t131);
	A0[0][35] = t2 * (t15*t135 + t16 * t134) + t3 * (t15*t134 - t16 * t135);
	A0[0][36] = -t3 * (a3*t139 + t16 * (t151 + t152 + t87 * (-t48 - t49 + t55 + t56 + t143 + t146 + d4 * t25 - d4 * t21*t26) - a4 * t88*t136) + t15 * (t142 + t88 * (t78 + t79 + t141 - d4 * t37 - t29 * (t138 + a4 * t21)) - d4 * t87*t116) - d3 * t16*t155 + d3 * t15*t157) - a2 * t139 - t2 * (-t15 * (t151 + t152 + t180 - a4 * t88*t136) + t16 * (t142 + t589 - d4 * t87*t116) + d3 * t15*t155 + d3 * t16*t157);
	A0[0][37] = -t2 * (t16*t169 + t15 * t175 + d3 * t15*t177 + d3 * t16*t179) + a2 * t171 + t3 * (a3*t171 - t15 * t169 + t16 * t175 + d3 * t16*t177 - d3 * t15*t179);
	A0[0][38] = t2 * (t16*t190 + t15 * t196 - d3 * t16*t197 + d3 * t15*t199) - a2 * t193 - t3 * (a3*t193 - t15 * t190 + t16 * t196 + d3 * t15*t197 + d3 * t16*t199);
	A0[0][39] = t2 * (t15*t202 + t16 * t205 + d3 * t16*t158 - d3 * t15*t207) - a2 * t208 + t3 * (-a3 * t208 - t16 * t202 + t15 * t205 + d3 * t15*t158 + d3 * t16*t207);
	A0[0][40] = t2 * (t15*t225 - t16 * (t253 + t87 * t594)) - t3 * (t15*(t87*(t222 + t276) + t88 * t213*t220) + t16 * t225);
	A0[0][41] = -t3 * (t16*t241 + t15 * (t239 - t88 * (t237 - t233 * t233))) + t2 * (t15*t241 - t16 * (t239 - t88 * (t237 - t238 * t238)));
	A0[0][42] = -t3 * (t15*(t248 - t87 * (t250 + t210 * (t243 - t242 * t242))) - t16 * (t252 - t209 * (t243 - t244 * t244))) - t2 * (t16*(t248 - t87 * (t250 + t210 * (t243 - t249 * t249))) + t15 * (t252 - t209 * (t243 - t251 * t251)));
	A0[0][43] = t2 * (t16*t260 + t15 * t262) + t3 * (t15*t260 - t16 * t262);
	A0[0][44] = -t2 * (t16*t270 - t15 * t273) - t3 * (t15*t270 + t16 * t273);
	A0[0][45] = t2 * (t15*t277 - t16 * t282) - t3 * (t16*t277 + t15 * t282);
	A0[0][46] = -t3 * (a3*t300 + t16 * t289 - t15 * t295 + d3 * t15*(t250 + t297) - d3 * t16*t600) - a2 * t300 + t2 * (t15*t289 + t16 * t295 - d3 * t15*(t296 - t87 * (t252 - t285)) - d3 * t16*t599);
	A0[0][47] = t3 * (t15*(t312 + t314 - d4 * t88*(t271 - t210 * (t243 + t303 * t303)) - d4 * t87*t232) + t16 * (t315 + t317 + a4 * t88*(t271 - t210 * (t243 + t302 * t302))) + a3 * (t307 + t88 * (t271 - t210 * (t243 + t301 * t301))) - d3 * t15*(t305 + t209 * (t243 + t306 * t306)) + d3 * t16*(t87*(t271 - t210 * (t243 + t304 * t304)) - t88 * t232)) - t2 * (-t16 * (t312 + t314 - d4 * t88*(t271 - t210 * (t243 + t313 * t313)) - d4 * t87*t232) + t15 * (t315 + t317 + a4 * t88*(t271 - t210 * (t243 + t316 * t316))) + d3 * t16*(t305 + t209 * (t243 + t319 * t319)) + d3 * t15*(t87*(t271 - t210 * (t243 + t318 * t318)) - t88 * t232)) + a2 * (t307 + t88 * (t271 - t210 * (t243 + t308 * t308)));
	A0[0][48] = -a2 * (t329 + t87 * (t237 + t327 * t327)) + t2 * (t15*(t336 + t338 - t210 * t291 + a4 * t87*(t237 + t321 * t321)) + t16 * (t333 + t335 + d4 * t87*(t237 + t322 * t322)) + d3 * t15*(t339 - t88 * (t237 + t326 * t326)) - d3 * t16*t342) - t3 * (a3*(t329 + t87 * (t237 + t328 * t328)) + t16 * (t336 + t338 - t210 * t291 + a4 * t87*(t237 + t337 * t337)) - t15 * (t333 + t335 + d4 * t87*(t237 + t334 * t334)) + d3 * t16*(t339 - t88 * (t237 + t340 * t340)) + d3 * t15*t342);
	A0[0][49] = t2 * (t16*t346 + t15 * t348 + d3 * t16*t332 - d3 * t15*t349) - a2 * t351 + t3 * (-a3 * t351 + t15 * t346 - t16 * t348 + d3 * t15*t332 + d3 * t16*t349);
	A0[0][50] = t3 * (t15*t374 + t16 * (t367 + t210 * (t361 - t353 * t364*(t356 + t220 * t352)))) - t2 * (t15*(t367 + t691) - t16 * t374);
	A0[0][51] = t2 * (t15*t389 - t16 * t397) - t3 * (t16*t389 + t15 * t397);
	A0[0][52] = -t3 * (t15*t413 - t16 * (t693 - t210 * t404)) + t2 * (t15*(t210*t404 - t209 * (t358 + t359 - t365 - t375)) - t16 * t413);
	A0[0][53] = t2 * (t15*t420 + t16 * (t87*t421 - t88 * t423)) - t3 * (t16*t420 - t15 * (t87*t421 - t88 * t423));
	A0[0][54] = t2 * (t16*t437 - t15 * t439) + t3 * (t15*t437 + t16 * t439);
	A0[0][55] = t2 * (t16*t449 + t15 * t451) + t3 * (t15*t449 - t16 * t451);
	A0[0][56] = -a2 * t492 + t2 * (t15*(t483 + t485 + t493 - t210 * (t462 + t353 * (-t290 + t320 + t453 + DF * (t461*t461)) - DF * t353*t455)) + t16 * (t481 + t482 + t87 * (t480 + t209 * (t462 + t353 * (-t290 + t320 + t453 + DF * (t454*t454)) - DF * t353*t455)) - t88 * (t472 + t473 - t352 * (-t290 + t320 + t453 + DF * (t452*t452)))) + d3 * t15*t487 - d3 * t16*t490) - t3 * (t16*(t483 + t485 + t493 - t210 * (t462 + t353 * (-t290 + t320 + t453 + DF * (t484*t484)) - DF * t353*t455)) + a3 * t492 - t15 * (t481 + t482 + t87 * (t480 + t209 * (t462 + t353 * (-t290 + t320 + t453 + DF * (t474*t474)) - DF * t353*t455)) - t88 * (t472 + t473 - t352 * (-t290 + t320 + t453 + DF * (t471*t471)))) + d3 * t16*t487 + d3 * t15*t490);
	A0[0][57] = -t3 * (t15*(t516 + t87 * (t515 + t209 * (t501 + t502 - t352 * (-t290 + t320 + t453 + DF * (t514*t514)))) + t88 * (t513 + t353 * (-t290 + t320 + t453 + DF * (t512*t512)) - DF * t353*t496) - d4 * t88*t507) - a3 * t511 - t16 * (t517 + t519 - t210 * (t501 + t502 - t352 * (-t290 + t320 + t453 + DF * (t518*t518))) - a4 * t88*t507) + d3 * t16*t522 + d3 * t15*t525) + a2 * t511 - t2 * (t16*(t516 + t87 * (t515 + t209 * (t501 + t502 - t352 * (-t290 + t320 + t453 + DF * (t495*t495)))) + t88 * (t513 + t353 * (-t290 + t320 + t453 + DF * (t494*t494)) - DF * t353*t496) - d4 * t88*t507) + t15 * (t517 + t519 - t210 * (t501 + t502 - t352 * (-t290 + t320 + t453 + DF * (t500*t500))) - a4 * t88*t507) - d3 * t15*t522 + d3 * t16*t525);
	A0[0][58] = t2 * (t15*t543 + t16 * t558 - d3 * t16*t554 - d3 * t15*t559) - a2 * t546 - t3 * (a3*t546 + t16 * t543 - t15 * t558 + d3 * t15*t554 - d3 * t16*t559);
	A0[0][59] = t3 * (a3*(t88*(t564 - t210 * (-t290 + t320 + t453 + DF * (t576*t576))) - t87 * t562) - t15 * (t574 + d4 * t88*(t564 - t210 * (-t290 + t320 + t453 + DF * (t575*t575))) - d4 * t87*t562 - t87 * t209*t568) + t16 * (t577 + a4 * t88*(t564 - t210 * (-t290 + t320 + t453 + DF * (t578*t578))) - a4 * t87*t562) + d3 * t16*(t580 + t87 * (t564 - t210 * (-t290 + t320 + t453 + DF * (t579*t579)))) - d3 * t15*(t620 + t209 * (-t290 + t320 + t453 + DF * (t581*t581)))) + a2 * (t88*(t564 - t210 * (-t290 + t320 + t453 + DF * (t561*t561))) - t87 * t562) - t2 * (t16*(t574 + d4 * t88*(t564 - t210 * (-t290 + t320 + t453 + DF * (t569*t569))) - d4 * t87*t562 - t87 * t209*t568) + t15 * (t577 + a4 * t88*(t564 - t210 * (-t290 + t320 + t453 + DF * (t565*t565))) - a4 * t87*t562) + d3 * t15*(t580 + t87 * (t564 - t210 * (-t290 + t320 + t453 + DF * (t570*t570)))) + d3 * t16*(t210*t563 + t209 * (-t290 + t320 + t453 + DF * (t571*t571))));
	A0[1][10] = -t9;
	A0[1][11] = -t582 + t583;
	A0[1][12] = -t4;
	A0[1][13] = t9;
	A0[1][14] = -t6;
	A0[1][15] = ddq2;
	A0[1][16] = -t63 + t68;
	A0[1][17] = t584;
	A0[1][20] = -t29 * t137;
	A0[1][21] = t624;
	A0[1][22] = t625;
	A0[1][23] = t586;
	A0[1][24] = t82;
	A0[1][25] = t97;
	A0[1][26] = t78 + t79 - a3 * t15*(t37 + t585) + a3 * t16*(ddq2 + ddq3 + t586);
	A0[1][27] = -t76 + t86 - a3 * t15*(ddq2 + ddq3 - t586) - a3 * t16*t62;
	A0[1][28] = a3 * t15*t82 + a3 * t16*(t22 + t24 + t144 - t587);
	A0[1][29] = a3 * t15*t77 + a3 * t16*t80;
	A0[1][30] = t627;
	A0[1][31] = t629;
	A0[1][32] = t631;
	A0[1][33] = -t87 * t632 - t88 * t93*t101;
	A0[1][34] = t634;
	A0[1][35] = t635;
	A0[1][36] = t166 + t636 + t637 - a4 * t157 - a3 * t15*t155 - a3 * t16*t157;
	A0[1][37] = -t589 + t638 - a4 * t179 - a3 * t15*t177 - a3 * t16*t179 - d4 * t88*t159;
	A0[1][38] = t206 - t591 + t639 - a4 * t197 - a3 * t16*t197 + a3 * t15*t199 - d4 * t87*t183;
	A0[1][39] = t608 + t640 + a3 * t16*t158 - a3 * t15*t207 - d4 * t87*t186;
	A0[1][40] = t642;
	A0[1][41] = -t88 * t236 - t87 * (t237 - t596 * t596);
	A0[1][42] = t644 + t88 * (t598 + t210 * (t243 - t597 * t597));
	A0[1][43] = t647;
	A0[1][44] = t650;
	A0[1][45] = t652;
	A0[1][46] = t653 + t654 + t655 - a4 * t599 - a3 * t15*t600 - a3 * t16*t599 - d4 * t87*t284;
	A0[1][47] = t658 - a4 * (t305 + t209 * (t243 + t601 * t601)) - t87 * t311 - a3 * t16*(t305 + t209 * (t243 + t603 * t603)) + d4 * t87*(t271 - t210 * (t243 + t604 * t604)) - d4 * t88*t232 - a3 * t15*(t87*(t271 - t210 * (t243 + t602 * t602)) - t88 * t232);
	A0[1][48] = t659 - a4 * t342 + a3 * t15*(t339 - t88 * (t237 + t606 * t606)) - a3 * t16*t342 - d4 * t87*t325 + d4 * t88*(t237 + t607 * t607);
	A0[1][49] = t608 + t661 + a3 * t16*t332 - a3 * t15*t349 - d4 * t87*t343;
	A0[1][50] = t664;
	A0[1][51] = t666;
	A0[1][52] = t668;
	A0[1][53] = t671;
	A0[1][54] = t672;
	A0[1][55] = t674;
	A0[1][56] = t677 - a4 * t490 + t88 * (t480 + t209 * (t462 + t353 * (-t290 + t320 + t453 + DF * (t613*t613)) - DF * t353*t455)) + t87 * (t472 + t473 - t352 * (-t290 + t320 + t453 + DF * (t612*t612))) + a3 * t15*t487 - a3 * t16*t490 - d4 * t87*t466;
	A0[1][57] = -t88 * (t515 + t209 * (t501 + t502 - t352 * (-t290 + t320 + t453 + DF * (t616*t616)))) - a4 * t525 + t87 * (t513 + t353 * (-t290 + t320 + t453 + DF * (t615*t615)) - DF * t353*t496) + a3 * t15*t522 - a3 * t16*t525 - d4 * t88*t504 - d4 * t87*t507;
	A0[1][58] = t680 + t681 + t684 - a4 * t554 - a3 * t16*t554 - a3 * t15*t559 - d4 * t87*t533;
	A0[1][59] = t685 + t687 + t688 - a4 * (t620 + t209 * (-t290 + t320 + t453 + DF * (t619*t619))) - a3 * t15*(t580 + t87 * (t564 - t210 * (-t290 + t320 + t453 + DF * (t621*t621)))) - a3 * t16*(t620 + t209 * (-t290 + t320 + t453 + DF * (t622*t622))) + d4 * t87*(t564 - t210 * (-t290 + t320 + t453 + DF * (t623*t623)));
	A0[2][20] = -t586;
	A0[2][21] = t624;
	A0[2][22] = t625;
	A0[2][23] = t586;
	A0[2][24] = t82;
	A0[2][25] = t97;
	A0[2][26] = t80;
	A0[2][27] = -t76 + t86;
	A0[2][30] = t627;
	A0[2][31] = t629;
	A0[2][32] = t631;
	A0[2][33] = -t633 - t87 * t632;
	A0[2][34] = t634;
	A0[2][35] = t635;
	A0[2][36] = t166 + t636 + t637 - a4 * t157;
	A0[2][37] = -t589 + t638 - a4 * t179 - d4 * t88*t159;
	A0[2][38] = t206 - t591 + t639 - a4 * t197 - d4 * t87*t183;
	A0[2][39] = t608 + t640 - d4 * t87*t186;
	A0[2][40] = t642;
	A0[2][41] = -t88 * t236 - t87 * (t237 - t643 * t643);
	A0[2][42] = t644 + t88 * (t598 + t210 * (t243 - t645 * t645));
	A0[2][43] = t647;
	A0[2][44] = t650;
	A0[2][45] = t652;
	A0[2][46] = t653 + t654 + t655 - a4 * t599 - d4 * t87*t284;
	A0[2][47] = t658 - a4 * (t305 + t209 * (t243 + t656 * t656)) - t87 * t311 + d4 * t87*(t271 - t210 * (t243 + t657 * t657)) - d4 * t88*t232;
	A0[2][48] = t659 - a4 * t342 - d4 * t87*t325 + d4 * t88*(t237 + t660 * t660);
	A0[2][49] = t608 + t661 - d4 * t87*t343;
	A0[2][50] = t664;
	A0[2][51] = t666;
	A0[2][52] = t668;
	A0[2][53] = t671;
	A0[2][54] = t672;
	A0[2][55] = t674;
	A0[2][56] = t677 - a4 * t490 + t88 * (t480 + t209 * (t462 + t353 * (-t290 + t320 + t453 + DF * (t676*t676)) - DF * t353*t455)) + t87 * (t472 + t473 - t352 * (-t290 + t320 + t453 + DF * (t675*t675))) - d4 * t87*t466;
	A0[2][57] = -t88 * (t515 + t209 * (t501 + t502 - t352 * (-t290 + t320 + t453 + DF * (t679*t679)))) - a4 * t525 + t87 * (t513 + t353 * (-t290 + t320 + t453 + DF * (t678*t678)) - DF * t353*t496) - d4 * t88*t504 - d4 * t87*t507;
	A0[2][58] = t680 + t681 + t684 - a4 * t554 - d4 * t87*t533;
	A0[2][59] = t685 + t687 + t688 - a4 * (t620 + t209 * (-t290 + t320 + t453 + DF * (t686*t686))) + d4 * t87*(t564 - t210 * (-t290 + t320 + t453 + DF * (t689*t689)));
	A0[3][30] = -t115;
	A0[3][31] = t114;
	A0[3][32] = -t95 - t98 + t108 - t178;
	A0[3][33] = t115;
	A0[3][34] = t183;
	A0[3][35] = t135;
	A0[3][36] = t184;
	A0[3][37] = -t172 + t181;
	A0[3][40] = t225;
	A0[3][41] = t234 + t210 * (t226 + t227 + t228 + t229);
	A0[3][42] = -t252 + t209 * (t243 - t690 * t690);
	A0[3][43] = t262;
	A0[3][44] = t209 * (ddq5 - t103 + t122 - t156 + t245) + t210 * (t237 - t243);
	A0[3][45] = t275 + t209 * t219*(t214 - t223);
	A0[3][46] = t286;
	A0[3][47] = -t315;
	A0[3][48] = t343;
	A0[3][50] = -t367 - t691;
	A0[3][51] = t389;
	A0[3][52] = -t693 + t210 * (t402 + t403);
	A0[3][53] = t420;
	A0[3][54] = -t438 + t210 * (t426 - t434);
	A0[3][55] = t451;
	A0[3][56] = t483 - t210 * (t462 + t353 * (-t290 + t320 + t453 + DF * (t695*t695)) - DF * t353*t455);
	A0[3][57] = -t517 + t210 * (t501 + t502 - t352 * (-t290 + t320 + t453 + DF * (t696*t696)));
	A0[3][58] = -t210 * t683;
	A0[3][59] = -t577;
	A0[4][40] = t213 * (t214 - t223);
	A0[4][41] = -t237 + t697 * t697;
	A0[4][42] = t247;
	A0[4][43] = -t245;
	A0[4][44] = t268;
	A0[4][45] = t280;
	A0[4][46] = t291;
	A0[4][47] = -t309 - t310;
	A0[4][50] = t373;
	A0[4][51] = t391;
	A0[4][52] = -t456 + t352 * (t386 - t398);
	A0[4][53] = t423;
	A0[4][54] = -t429 - t430;
	A0[4][55] = -t372 + t440;
	A0[4][56] = t472 + t473 - t352 * (-t290 + t320 + t453 + DF * (t698*t698));
	A0[4][57] = t513 + t353 * (-t290 + t320 + t453 + DF * (t699*t699)) - DF * t353*t496;
	A0[4][58] = t547 + t548 - t560 + DF * t353*(t358 + t359 - t365 - t375);
	A0[4][59] = t573;
	A0[5][50] = -t400;
	A0[5][51] = -t385 + t386;
	A0[5][52] = -t358 - t359 + t365 + t375;
	A0[5][53] = t400;
	A0[5][54] = -t377 + t378 - t381 - t382;
	A0[5][55] = t441;
	A0[5][56] = t460;
	A0[5][57] = -t497 - t498;


    for (int i = 0; i < 6; i++)
        for (int j = 0; j < JointGroupDim; j++)
           distalVec[(JointGroupDim) * i + j] = A0[i][j];

}


//inline int id(int m, int n, int cols) { return m * cols + n;}
void JointReducedMatrix(const double* q, const double* dq, const double* ddq, const double* ts, const double* CoefInv, double* distalVec)
{

	//double[] qTemp=new double[common.RobotAxis];
  //  , dqTemp, ddqTemp;
	double q1, q2, q3, q4, q5, q6;
	double dq1, dq2, dq3, dq4, dq5, dq6;
	double ddq1, ddq2, ddq3, ddq4, ddq5, ddq6;
	double ts1, ts2, ts3, ts4, ts5, ts6;
	double g = 9.81;

	q1 = q[0];
	q2 = q[1];
	q3 = q[2];
	q4 = q[3];
	q5 = q[4];
	q6 = q[5];

	dq1 = dq[0]; dq2 = dq[1]; dq3 = dq[2]; dq4 = dq[3]; dq5 = dq[4]; dq6 = dq[5];
	ddq1 = ddq[0]; ddq2 = ddq[1]; ddq3 = ddq[2]; ddq4 = ddq[3]; ddq5 = ddq[4]; ddq6 = ddq[5];

	ts1 = ts[0]; ts2 = ts[1]; ts3 = ts[2]; ts4 = ts[3]; ts5 = ts[4]; ts6 = ts[5];

	double A0[6][JointGroupDim];
	for (int i = 0; i < 6; i++)
		for (int j = 0; j < JointGroupDim; j++)
			A0[i][j] = 0;

	double DF = 0;//The Sixth Coordinate in Wrist


	t2 = sin(q2);
	t3 = cos(q2);
	t4 = ddq1 * t2;
	t5 = dq1 * dq1;
	t6 = ddq1 * t3;
	t7 = dq1 * dq2*t2*t3;
	t8 = dq2 * dq2;
	t9 = t2 * t3*t5;
	t10 = t6 - dq1 * dq2*t2*2.0;
	t11 = dq1 * dq2*t3*2.0;
	t12 = t4 + t11;
	t13 = t3 * t3;
	t14 = t2 * t2;
	t15 = sin(q3);
	t16 = cos(q3);
	t17 = dq1 * dq2*t3;
	t18 = t4 + t17;
	t23 = dq1 * dq2*t2;
	t19 = t6 - t23;
	t20 = dq1 * t2*t15;
	t30 = dq1 * t3*t16;
	t21 = t20 - t30;
	t22 = t16 * t18;
	t24 = t15 * t19;
	t31 = dq3 * t21;
	t25 = t22 + t24 - t31;
	t26 = dq2 + dq3;
	t27 = dq1 * t3*t15;
	t28 = dq1 * t2*t16;
	t29 = t27 + t28;
	t32 = dq3 * t29;
	t33 = t15 * t18;
	t34 = t26 * t29;
	t41 = t16 * t19;
	t35 = t32 + t33 + t34 - t41;
	t60 = t21 * t26;
	t36 = t22 + t24 - t31 - t60;
	t37 = t26 * t26;
	t38 = t29 * t29;
	t39 = t37 - t38;
	t44 = t21 * t29;
	t40 = ddq2 + ddq3 - t44;
	t42 = t32 + t33 - t41;
	t43 = t20 - t30;
	t45 = t20 - t30;
	t46 = t16 * t26*t29;
	t47 = t20 - t30;
	t48 = a2 * ddq1;
	t49 = a3 * t19;
	t50 = a3 * dq2;
	t51 = d3 * dq1*t2;
	t52 = t50 + t51;
	t55 = dq1 * t2*t52;
	t56 = d3 * t5*t13;
	t53 = t48 + t49 - t55 - t56;
	t54 = t20 - t30;
	t57 = t16 * t53;
	t58 = t29 * (t20 - t30);
	t59 = ddq2 + ddq3 + t58;
	t61 = t15 * t53;
	t62 = t37 + t38;
	t63 = g * t3;
	t64 = g * t2;
	t65 = a2 * t3*t5;
	t66 = a3 * ddq2;
	t67 = d3 * t18;
	t68 = a2 * t2*t5;
	t69 = a3 * t2*t3*t5;
	t75 = d3 * dq1*dq2*t3;
	t70 = -t63 + t66 + t67 + t68 + t69 - t75;
	t71 = dq2 * t52;
	t72 = d3 * t19;
	t73 = a3 * t5*t13;
	t74 = t64 + t65 + t71 + t72 + t73;
	t76 = t15 * t70;
	t86 = t16 * t74;
	t77 = t76 - t86;
	t78 = t16 * t70;
	t79 = t15 * t74;
	t80 = t78 + t79;
	t81 = t20 - t30;
	t82 = t32 + t33 - t34 - t41;
	t83 = t26 * (t20 - t30);
	t84 = t22 + t24 - t31 + t83;
	t85 = t20 - t30;
	t87 = cos(q4);
	t88 = sin(q4);
	t89 = t26 * t88;
	t90 = t29 * t87;
	t91 = t89 + t90;
	t92 = t26 * t87;
	t94 = t29 * t88;
	t93 = t92 - t94;
	t95 = dq4 * t93;
	t96 = t25 * t87;
	t97 = ddq2 + ddq3;
	t98 = t88 * t97;
	t99 = t95 + t96 + t98;
	t100 = t87 * t99;
	t101 = dq4 + t20 - t30;
	t133 = t88 * t91*t101;
	t102 = t100 - t133;
	t103 = dq4 * t91;
	t104 = t25 * t88;
	t105 = t91 * t101;
	t122 = t87 * t97;
	t106 = t103 + t104 + t105 - t122;
	t107 = t87 * t106;
	t108 = t93 * t101;
	t109 = t95 + t96 + t98 + t108;
	t110 = t88 * t109;
	t111 = t107 + t110;
	t112 = t91 * t91;
	t113 = t93 * t93;
	t114 = t112 - t113;
	t115 = t91 * t93;
	t116 = ddq4 + t32 + t33 - t41 + t115;
	t117 = t87 * t116;
	t118 = t101 * t101;
	t119 = t88 * (t112 - t118);
	t120 = t117 + t119;
	t121 = t95 + t96 + t98 - t108;
	t123 = t16 * t91*t93;
	t124 = t103 + t104 - t122;
	t125 = t88 * t124;
	t132 = t87 * t93*t101;
	t126 = t125 - t132;
	t127 = ddq4 + t32 + t33 - t41 - t115;
	t128 = t88 * t127;
	t129 = t113 - t118;
	t130 = t128 - t87 * t129;
	t131 = t103 + t104 - t105 - t122;
	t134 = t132 + t133;
	t135 = ddq4 + t32 + t33 - t41;
	t136 = t113 + t118;
	t137 = -t20 + t30;
	t138 = d4 * t29;
	t139 = t117 - t88 * t136;
	t148 = a4 * t137;
	t140 = t138 - t148;
	t141 = a4 * t97;
	t142 = d4 * t88*t136;
	t143 = a4 * t42;
	t144 = dq3 * t137;
	t145 = t22 + t24 + t144;
	t146 = a4 * t26*t29;
	t147 = a4 * t37;
	t149 = d4 * t97;
	t163 = t137 * t140;
	t150 = -t76 + t86 + t147 + t149 - t163;
	t151 = t88 * t150;
	t152 = a4 * t87*t116;
	t153 = t87 * t136;
	t154 = t88 * t116;
	t155 = t153 + t154;
	t156 = t88 * t145;
	t157 = t103 + t105 - t122 + t156;
	t164 = d4 * t37;
	t165 = t29 * t140;
	t158 = t78 + t79 + t141 - t164 - t165;
	t159 = t112 + t118;
	t160 = d4 * t145;
	t161 = d4 * t26*t137;
	t162 = -t48 - t49 + t55 + t56 + t143 + t146 + t160 + t161;
	t166 = t87 * t158;
	t167 = d4 * t88*t127;
	t168 = d4 * t87*t159;
	t169 = t166 + t167 + t168;
	t170 = t87 * t159;
	t171 = t128 + t170;
	t172 = t88 * t162;
	t173 = a4 * t88*t127;
	t174 = a4 * t87*t159;
	t181 = t87 * t150;
	t175 = t172 + t173 + t174 - t181;
	t176 = t87 * t127;
	t590 = t88 * t159;
	t177 = t176 - t590;
	t178 = t87 * t145;
	t179 = t95 + t98 + t108 + t178;
	t180 = t87 * t162;
	t182 = t95 + t98 - t108 + t178;
	t183 = t103 - t105 - t122 + t156;
	t184 = t151 + t180;
	t185 = t87 * t184;
	t186 = t172 - t181;
	t187 = t88 * t186;
	t188 = d4 * t87*t182;
	t189 = d4 * t88*t183;
	t190 = t185 + t187 + t188 + t189;
	t191 = t87 * t182;
	t192 = t88 * t183;
	t193 = t191 + t192;
	t194 = a4 * t87*t182;
	t195 = a4 * t88*t183;
	t196 = t194 + t195;
	t197 = t112 + t113;
	t198 = t87 * t183;
	t592 = t88 * t182;
	t199 = t198 - t592;
	t200 = a4 * t87*t184;
	t201 = a4 * t88*t186;
	t202 = t200 + t201;
	t203 = d4 * t87*t184;
	t204 = d4 * t88*t186;
	t205 = t203 + t204;
	t206 = t88 * t184;
	t591 = t87 * t186;
	t207 = t206 - t591;
	t208 = t185 + t187;
	t209 = cos(q5);
	t210 = sin(q5);
	t211 = t91 * t210;
	t212 = t101 * t209;
	t213 = t211 + t212;
	t214 = t91 * t209;
	t215 = t95 + t98 + t178;
	t216 = t135 * t210;
	t217 = dq5 * t213;
	t221 = t209 * t215;
	t218 = t216 + t217 - t221;
	t219 = dq5 + t92 - t94;
	t223 = t101 * t210;
	t220 = t214 - t223;
	t222 = t209 * t218;
	t224 = t210 * t218;
	t274 = t209 * t219*t220;
	t225 = t224 - t274;
	t226 = t219 * t220;
	t227 = t210 * t215;
	t228 = t135 * t209;
	t229 = dq5 * t220;
	t230 = t226 + t227 + t228 + t229;
	t231 = t213 * t219;
	t232 = t216 + t217 - t221 + t231;
	t233 = t214 - t223;
	t234 = t209 * t232;
	t235 = t209 * t230;
	t595 = t210 * t232;
	t236 = t235 - t595;
	t237 = t213 * t213;
	t238 = t214 - t223;
	t239 = t87 * t236;
	t240 = t210 * t230;
	t241 = t234 + t240;
	t242 = t214 - t223;
	t243 = t219 * t219;
	t244 = t214 - t223;
	t245 = t213 * t220;
	t246 = -ddq5 + t103 - t122 + t156 + t245;
	t247 = t216 + t217 - t221 - t231;
	t248 = t88 * t247;
	t249 = t214 - t223;
	t250 = t209 * t246;
	t251 = t214 - t223;
	t252 = t210 * t246;
	t253 = t88 * t213*(t214 - t223);
	t254 = dq5 * (t214 - t223);
	t255 = t227 + t228 + t254;
	t256 = t210 * t255;
	t257 = t209 * t213*t219;
	t258 = t256 + t257;
	t259 = t87 * t258;
	t260 = t253 + t259;
	t261 = t209 * t255;
	t275 = t210 * t213*t219;
	t262 = t261 - t275;
	t263 = ddq5 - t103 + t122 - t156 + t245;
	t264 = t237 - t243;
	t265 = t209 * t264;
	t305 = t210 * t263;
	t266 = t265 - t305;
	t267 = t87 * t266;
	t268 = -t226 + t227 + t228 + t254;
	t269 = t88 * t268;
	t270 = t267 + t269;
	t271 = t209 * t263;
	t272 = t210 * t264;
	t273 = t271 + t272;
	t276 = t210 * t219*t220;
	t277 = t274 + t275;
	t278 = t257 - t276;
	t279 = t87 * t278;
	t280 = ddq5 - t103 + t122 - t156;
	t281 = t88 * t280;
	t282 = t279 + t281;
	t283 = t237 + t243;
	t285 = t209 * t283;
	t284 = t252 - t285;
	t286 = t184 * t209;
	t287 = a4 * t87*t230;
	t288 = a4 * t88*t284;
	t289 = t286 + t287 + t288;
	t290 = t158 * t209;
	t320 = t186 * t210;
	t291 = t290 - t320;
	t292 = d4 * t87*t230;
	t293 = t87 * t184*t210;
	t294 = d4 * t88*t284;
	t295 = t292 + t293 + t294 - t88 * t291;
	t296 = t88 * t230;
	t297 = t210 * t283;
	t298 = t87 * t230;
	t299 = t88 * t284;
	t300 = t298 + t299;
	t301 = t214 - t223;
	t302 = t214 - t223;
	t303 = t214 - t223;
	t304 = t214 - t223;
	t306 = t214 - t223;
	t307 = t87 * t232;
	t308 = t214 - t223;
	t309 = t158 * t210;
	t310 = t186 * t209;
	t311 = t309 + t310;
	t312 = t88 * t311;
	t313 = t214 - t223;
	t314 = t87 * t184*t209;
	t315 = t184 * t210;
	t316 = t214 - t223;
	t317 = a4 * t87*t232;
	t318 = t214 - t223;
	t319 = t214 - t223;
	t321 = t214 - t223;
	t322 = t214 - t223;
	t323 = t209 * t268;
	t324 = t210 * (t216 + t217 - t221 - t231);
	t325 = t323 + t324;
	t326 = t214 - t223;
	t327 = t214 - t223;
	t328 = t214 - t223;
	t329 = t88 * t325;
	t330 = t209 * t291;
	t331 = t210 * t311;
	t332 = t330 + t331;
	t333 = t87 * t332;
	t334 = t214 - t223;
	t335 = d4 * t88*t325;
	t336 = t209 * t311;
	t337 = t214 - t223;
	t338 = a4 * t88*t325;
	t339 = t87 * t325;
	t340 = t214 - t223;
	t341 = t209 * t247;
	t605 = t210 * t268;
	t342 = t341 - t605;
	t344 = t210 * t291;
	t343 = t336 - t344;
	t345 = d4 * t88*t343;
	t346 = t203 + t345;
	t347 = a4 * t88*t343;
	t348 = t200 + t347;
	t609 = t87 * t343;
	t349 = t206 - t609;
	t350 = t88 * t343;
	t351 = t185 + t350;
	t352 = cos(q6);
	t353 = sin(q6);
	t354 = t219 * t352;
	t357 = t220 * t353;
	t355 = t354 - t357;
	t356 = t219 * t353;
	t358 = dq6 * t355;
	t359 = t280 * t353;
	t365 = t218 * t352;
	t360 = t358 + t359 - t365;
	t361 = t352 * t360;
	t362 = t352 * (t214 - t223);
	t363 = t356 + t362;
	t364 = dq6 + t211 + t212;
	t368 = t353 * t363*t364;
	t366 = t361 - t368;
	t367 = t209 * t355*t363;
	t369 = t209 * t366;
	t418 = t210 * t355*t363;
	t370 = t369 - t418;
	t371 = t353 * t360;
	t372 = t352 * t363*t364;
	t373 = t371 + t372;
	t374 = t87 * t370 - t88 * t373;
	t375 = t355 * t364;
	t376 = t358 + t359 - t365 + t375;
	t377 = t363 * t364;
	t378 = dq6 * t363;
	t381 = t218 * t353;
	t382 = t280 * t352;
	t379 = t377 + t378 - t381 - t382;
	t380 = t353 * t376;
	t383 = t352 * t379;
	t384 = t380 + t383;
	t385 = t355 * t355;
	t386 = t363 * t363;
	t387 = t385 - t386;
	t388 = t210 * t384;
	t692 = t209 * t387;
	t389 = t388 - t692;
	t390 = t352 * t376;
	t610 = t353 * t379;
	t391 = t390 - t610;
	t392 = t88 * t391;
	t393 = t209 * t384;
	t394 = t210 * t387;
	t395 = t393 + t394;
	t396 = t87 * t395;
	t397 = t392 + t396;
	t398 = t364 * t364;
	t399 = t386 - t398;
	t400 = t355 * t363;
	t401 = ddq6 + t227 + t228 + t254 + t400;
	t402 = t353 * t399;
	t403 = t352 * t401;
	t404 = t402 + t403;
	t405 = t358 + t359 - t365 - t375;
	t406 = t352 * t399;
	t456 = t353 * t401;
	t407 = t406 - t456;
	t408 = t88 * t407;
	t409 = t210 * t405;
	t410 = t209 * t404;
	t411 = t409 + t410;
	t412 = t87 * t411;
	t413 = t408 + t412;
	t414 = -t378 + t381 + t382;
	t415 = t353 * t414;
	t416 = t352 * t355*t364;
	t417 = t415 + t416;
	t419 = t210 * t417;
	t420 = t367 + t419;
	t611 = t209 * t417;
	t421 = t418 - t611;
	t422 = t352 * t414;
	t440 = t353 * t355*t364;
	t423 = t422 - t440;
	t424 = ddq6 + t227 + t228 + t254 - t400;
	t425 = t385 - t398;
	t426 = t352 * t425;
	t434 = t353 * t424;
	t427 = t426 - t434;
	t428 = t377 - t378 + t381 + t382;
	t429 = t353 * t425;
	t430 = t352 * t424;
	t431 = t429 + t430;
	t432 = t88 * t431;
	t433 = t210 * t428;
	t435 = t209 * t427;
	t436 = t433 + t435;
	t437 = t432 - t87 * t436;
	t438 = t209 * t428;
	t439 = t438 - t210 * t427;
	t441 = ddq6 + t227 + t228 + t254;
	t442 = t368 + t416;
	t443 = t372 - t440;
	t444 = t88 * t443;
	t445 = t210 * t441;
	t446 = t209 * t442;
	t447 = t445 + t446;
	t448 = t87 * t447;
	t449 = t444 + t448;
	t450 = t209 * t441;
	t694 = t210 * t442;
	t451 = t450 - t694;
	t452 = t214 - t223;
	t453 = DF * t243;
	t454 = t214 - t223;
	t455 = t385 + t398;
	t475 = DF * t218;
	t476 = DF * t213*t219;
	t457 = t151 + t180 - t475 - t476;
	t458 = t352 * t457;
	t477 = DF * t280;
	t478 = DF * t213*t220;
	t459 = t309 + t310 - t477 - t478;
	t479 = t353 * t459;
	t460 = t458 - t479;
	t461 = t214 - t223;
	t462 = DF * t352*t401;
	t463 = t210 * t379;
	t464 = t352 * t455;
	t465 = t456 + t464;
	t468 = t209 * t465;
	t466 = t463 - t468;
	t469 = t353 * t455;
	t467 = t403 - t469;
	t470 = t88 * t466;
	t471 = t214 - t223;
	t472 = DF * t353*t401;
	t473 = DF * t352*t455;
	t474 = t214 - t223;
	t480 = t210 * t460;
	t481 = d4 * t87*t467;
	t482 = d4 * t88*t466;
	t483 = t209 * t460;
	t484 = t214 - t223;
	t485 = a4 * t88*t466;
	t486 = t87 * t466;
	t614 = t88 * t467;
	t487 = t486 - t614;
	t488 = t210 * t465;
	t489 = t209 * t379;
	t490 = t488 + t489;
	t491 = t87 * t467;
	t492 = t470 + t491;
	t493 = a4 * t87*t467;
	t494 = t214 - t223;
	t495 = t214 - t223;
	t496 = t386 + t398;
	t497 = t352 * t459;
	t498 = t353 * t457;
	t499 = t497 + t498;
	t500 = t214 - t223;
	t501 = DF * t353*t424;
	t502 = DF * t352*t496;
	t503 = t352 * t496;
	t504 = t434 + t503;
	t505 = t210 * t376;
	t508 = t353 * t496;
	t506 = t430 - t508;
	t509 = t209 * t506;
	t507 = t505 - t509;
	t510 = t87 * t504;
	t511 = t510 - t88 * t507;
	t512 = t214 - t223;
	t513 = DF * t352*t424;
	t514 = t214 - t223;
	t515 = t210 * t499;
	t516 = d4 * t87*t504;
	t517 = t209 * t499;
	t518 = t214 - t223;
	t519 = a4 * t87*t504;
	t520 = t87 * t507;
	t521 = t88 * t504;
	t522 = t520 + t521;
	t523 = t210 * t506;
	t524 = t209 * t376;
	t525 = t523 + t524;
	t526 = t352 * t405;
	t534 = t353 * t428;
	t527 = t526 - t534;
	t528 = t385 + t386;
	t529 = t210 * t528;
	t530 = t353 * t405;
	t531 = t352 * t428;
	t532 = t530 + t531;
	t535 = t209 * t532;
	t533 = t529 - t535;
	t536 = t352 * t460;
	t537 = t353 * t499;
	t538 = DF * t352*t405;
	t540 = DF * t353*t428;
	t539 = t536 + t537 + t538 - t540;
	t541 = a4 * t87*t527;
	t542 = a4 * t88*t533;
	t543 = t541 + t542 - t210 * t539;
	t544 = t87 * t527;
	t545 = t88 * t533;
	t546 = t544 + t545;
	t547 = t353 * t460;
	t548 = DF * t352*t428;
	t549 = DF * t353*t405;
	t560 = t352 * t499;
	t550 = t547 + t548 + t549 - t560;
	t551 = d4 * t88*t533;
	t552 = t209 * t528;
	t553 = t210 * (t530 + t531);
	t554 = t552 + t553;
	t555 = t88 * t527;
	t556 = t87 * t209*t539;
	t557 = d4 * t87*t527;
	t558 = t551 + t556 + t557 - t88 * t550;
	t617 = t87 * t533;
	t559 = t555 - t617;
	t561 = t214 - t223;
	t562 = t536 + t537;
	t563 = t547 - t560;
	t564 = t209 * t563;
	t565 = t214 - t223;
	t566 = DF * t352*t460;
	t567 = DF * t353*t499;
	t568 = t566 + t567;
	t569 = t214 - t223;
	t570 = t214 - t223;
	t571 = t214 - t223;
	t572 = DF * t353*t460;
	t618 = DF * t352*t499;
	t573 = t572 - t618;
	t574 = t88 * t573;
	t575 = t214 - t223;
	t576 = t214 - t223;
	t577 = t210 * t568;
	t578 = t214 - t223;
	t579 = t214 - t223;
	t580 = t88 * t562;
	t581 = t214 - t223;
	t582 = t5 * t13;
	t583 = t5 * t14;
	t584 = t64 + t65;
	t585 = t137 * t137;
	t586 = t29 * t137;
	t587 = t26 * t137;
	t588 = t87 * t91*t101;
	t589 = t88 * t158;
	t593 = t210 * t219*(t214 - t223);
	t594 = t222 + t593;
	t596 = t214 - t223;
	t597 = t214 - t223;
	t598 = t209 * (-ddq5 + t103 - t122 + t156 + t245);
	t599 = t297 + t598;
	t600 = t296 - t87 * t284;
	t601 = t214 - t223;
	t602 = t214 - t223;
	t603 = t214 - t223;
	t604 = t214 - t223;
	t606 = t214 - t223;
	t607 = t214 - t223;
	t608 = d4 * t88*t184;
	t612 = t214 - t223;
	t613 = t214 - t223;
	t615 = t214 - t223;
	t616 = t214 - t223;
	t619 = t214 - t223;
	t620 = t210 * (t547 - t560);
	t621 = t214 - t223;
	t622 = t214 - t223;
	t623 = t214 - t223;
	t624 = t38 - t585;
	t625 = -t22 - t24 - t144 + t587;
	t626 = t88 * t215;
	t627 = t588 + t626;
	t628 = t87 * t179;
	t629 = t628 - t88 * t157;
	t630 = t87 * (t112 - t118);
	t631 = -t154 + t630;
	t632 = t103 - t122 + t156;
	t633 = t88 * t93*t101;
	t634 = -t176 - t88 * t129;
	t635 = -t588 + t633;
	t636 = d4 * t88*t116;
	t637 = d4 * t87*t136;
	t638 = d4 * t87*t127;
	t639 = d4 * t88*t182;
	t640 = a4 * t158;
	t641 = t87 * t213*(t214 - t223);
	t642 = t641 - t88 * t594;
	t643 = t214 - t223;
	t644 = t87 * (t216 + t217 - t221 - t231);
	t645 = t214 - t223;
	t646 = t88 * t258;
	t647 = t646 - t87 * t213*t220;
	t648 = t87 * t268;
	t649 = t88 * (t305 - t209 * (t237 - t243));
	t650 = t648 + t649;
	t651 = t87 * t280;
	t652 = t651 - t88 * t278;
	t653 = t87 * t291;
	t654 = d4 * t88*(t226 + t227 + t228 + t229);
	t655 = t88 * t184*t210;
	t656 = t214 - t223;
	t657 = t214 - t223;
	t658 = t88 * t184*t209;
	t659 = t88 * t332;
	t660 = t214 - t223;
	t661 = a4 * t332;
	t662 = t88 * t370;
	t663 = t87 * t373;
	t664 = t662 + t663;
	t665 = t87 * (t390 - t610);
	t666 = t665 - t88 * t395;
	t667 = t87 * (t406 - t456);
	t668 = t667 - t88 * t411;
	t669 = t88 * (t418 - t611);
	t670 = t87 * t423;
	t671 = t669 + t670;
	t672 = -t87 * t431 - t88 * t436;
	t673 = t88 * t447;
	t674 = t673 - t87 * t443;
	t675 = t214 - t223;
	t676 = t214 - t223;
	t677 = d4 * t88*(t403 - t469);
	t678 = t214 - t223;
	t679 = t214 - t223;
	t680 = t87 * (t547 + t548 + t549 - t560);
	t681 = d4 * t88*(t526 - t534);
	t682 = DF * t352*(t358 + t359 - t365 - t375);
	t683 = t536 + t537 - t540 + t682;
	t684 = t88 * t209*t683;
	t685 = t87 * (t572 - t618);
	t686 = t214 - t223;
	t687 = t88 * t209*t568;
	t688 = d4 * t88*t562;
	t689 = t214 - t223;
	t690 = t214 - t223;
	t691 = t210 * t366;
	t693 = t209 * t405;
	t695 = t214 - t223;
	t696 = t214 - t223;
	t697 = t214 - t223;
	t698 = t214 - t223;
	t699 = t214 - t223;
	A0[0][5] = ddq1;
	A0[0][10] = t7 + t2 * t18;
	A0[0][11] = t2 * t10 + t3 * t12;
	A0[0][12] = -t2 * (ddq2 + t9) - t3 * (t8 - t5 * t14);
	A0[0][13] = -t7 + t3 * t19;
	A0[0][14] = -t3 * (ddq2 - t9) + t2 * (t8 - t5 * t13);
	A0[0][16] = a2 * t10 + a2 * ddq1*t3;
	A0[0][17] = -a2 * t12 - a2 * ddq1*t2;
	A0[0][18] = -a2 * (t582 + t583) + t3 * t584 - t2 * (t63 - a2 * t2*t5);
	A0[0][19] = (a2*a2)*ddq1;
	A0[0][20] = t2 * (t16*t25 - t15 * t26*t29) + t3 * (t46 + t15 * t25);
	A0[0][21] = -t2 * (t15*t36 + t16 * t35) - t3 * (t15*t35 - t16 * t36);
	A0[0][22] = t2 * (t15*t39 - t16 * t40) - t3 * (t15*t40 + t16 * t39);
	A0[0][23] = -t3 * (t16*t42 - t15 * t21*t26) + t2 * (t15*t42 + t16 * t26*(t20 - t30));
	A0[0][24] = t2 * (t15*t59 + t16 * (t37 - t45 * t45)) - t3 * (t16*(ddq2 + ddq3 + t44) - t15 * (t37 - t43 * t43));
	A0[0][25] = -t3 * (t46 + t15 * t21*t26) - t2 * (t16*t21*t26 - t15 * t26*t29);
	A0[0][26] = -t2 * (t61 - d3 * t16*t40 + d3 * t15*(t37 + t47 * t47)) - a2 * t35 + t3 * (t57 - a3 * t35 + d3 * t15*t40 + d3 * t16*(t37 + t54 * t54));
	A0[0][27] = -t3 * (t61 + a3 * t36 - d3 * t16*t59 + d3 * t15*t62) - a2 * t36 - t2 * (t57 + d3 * t15*t59 + d3 * t16*t62);
	A0[0][28] = t2 * (t15*t77 + t16 * t80 + d3 * t15*t82 + d3 * t16*t84) - a2 * (t38 + t85 * t85) - t3 * (t16*t77 - t15 * t80 + a3 * (t38 + t81 * t81) + d3 * t16*t82 - d3 * t15*t84);
	A0[0][29] = a2 * t53 + t2 * (d3*t15*t77 + d3 * t16*t80) + t3 * (a3*t53 - d3 * t16*t77 + d3 * t15*t80);
	A0[0][30] = t2 * (t16*t102 - t15 * t91*t93) + t3 * (t123 + t15 * t102);
	A0[0][31] = -t2 * (t16*t111 - t15 * t114) - t3 * (t15*t111 + t16 * t114);
	A0[0][32] = -t2 * (t15*t121 + t16 * t120) - t3 * (t15*t120 - t16 * t121);
	A0[0][33] = t2 * (t16*t126 + t15 * t91*t93) - t3 * (t123 - t15 * t126);
	A0[0][34] = t2 * (t15*t131 + t16 * t130) + t3 * (t15*t130 - t16 * t131);
	A0[0][35] = t2 * (t15*t135 + t16 * t134) + t3 * (t15*t134 - t16 * t135);
	A0[0][36] = -t3 * (a3*t139 + t16 * (t151 + t152 + t87 * (-t48 - t49 + t55 + t56 + t143 + t146 + d4 * t25 - d4 * t21*t26) - a4 * t88*t136) + t15 * (t142 + t88 * (t78 + t79 + t141 - d4 * t37 - t29 * (t138 + a4 * t21)) - d4 * t87*t116) - d3 * t16*t155 + d3 * t15*t157) - a2 * t139 - t2 * (-t15 * (t151 + t152 + t180 - a4 * t88*t136) + t16 * (t142 + t589 - d4 * t87*t116) + d3 * t15*t155 + d3 * t16*t157);
	A0[0][37] = -t2 * (t16*t169 + t15 * t175 + d3 * t15*t177 + d3 * t16*t179) + a2 * t171 + t3 * (a3*t171 - t15 * t169 + t16 * t175 + d3 * t16*t177 - d3 * t15*t179);
	A0[0][38] = t2 * (t16*t190 + t15 * t196 - d3 * t16*t197 + d3 * t15*t199) - a2 * t193 - t3 * (a3*t193 - t15 * t190 + t16 * t196 + d3 * t15*t197 + d3 * t16*t199);
	A0[0][39] = t2 * (t15*t202 + t16 * t205 + d3 * t16*t158 - d3 * t15*t207) - a2 * t208 + t3 * (-a3 * t208 - t16 * t202 + t15 * t205 + d3 * t15*t158 + d3 * t16*t207);
	A0[0][40] = t2 * (t15*t225 - t16 * (t253 + t87 * t594)) - t3 * (t15*(t87*(t222 + t276) + t88 * t213*t220) + t16 * t225);
	A0[0][41] = -t3 * (t16*t241 + t15 * (t239 - t88 * (t237 - t233 * t233))) + t2 * (t15*t241 - t16 * (t239 - t88 * (t237 - t238 * t238)));
	A0[0][42] = -t3 * (t15*(t248 - t87 * (t250 + t210 * (t243 - t242 * t242))) - t16 * (t252 - t209 * (t243 - t244 * t244))) - t2 * (t16*(t248 - t87 * (t250 + t210 * (t243 - t249 * t249))) + t15 * (t252 - t209 * (t243 - t251 * t251)));
	A0[0][43] = t2 * (t16*t260 + t15 * t262) + t3 * (t15*t260 - t16 * t262);
	A0[0][44] = -t2 * (t16*t270 - t15 * t273) - t3 * (t15*t270 + t16 * t273);
	A0[0][45] = t2 * (t15*t277 - t16 * t282) - t3 * (t16*t277 + t15 * t282);
	A0[0][46] = -t3 * (a3*t300 + t16 * t289 - t15 * t295 + d3 * t15*(t250 + t297) - d3 * t16*t600) - a2 * t300 + t2 * (t15*t289 + t16 * t295 - d3 * t15*(t296 - t87 * (t252 - t285)) - d3 * t16*t599);
	A0[0][47] = t3 * (t15*(t312 + t314 - d4 * t88*(t271 - t210 * (t243 + t303 * t303)) - d4 * t87*t232) + t16 * (t315 + t317 + a4 * t88*(t271 - t210 * (t243 + t302 * t302))) + a3 * (t307 + t88 * (t271 - t210 * (t243 + t301 * t301))) - d3 * t15*(t305 + t209 * (t243 + t306 * t306)) + d3 * t16*(t87*(t271 - t210 * (t243 + t304 * t304)) - t88 * t232)) - t2 * (-t16 * (t312 + t314 - d4 * t88*(t271 - t210 * (t243 + t313 * t313)) - d4 * t87*t232) + t15 * (t315 + t317 + a4 * t88*(t271 - t210 * (t243 + t316 * t316))) + d3 * t16*(t305 + t209 * (t243 + t319 * t319)) + d3 * t15*(t87*(t271 - t210 * (t243 + t318 * t318)) - t88 * t232)) + a2 * (t307 + t88 * (t271 - t210 * (t243 + t308 * t308)));
	A0[0][48] = -a2 * (t329 + t87 * (t237 + t327 * t327)) + t2 * (t15*(t336 + t338 - t210 * t291 + a4 * t87*(t237 + t321 * t321)) + t16 * (t333 + t335 + d4 * t87*(t237 + t322 * t322)) + d3 * t15*(t339 - t88 * (t237 + t326 * t326)) - d3 * t16*t342) - t3 * (a3*(t329 + t87 * (t237 + t328 * t328)) + t16 * (t336 + t338 - t210 * t291 + a4 * t87*(t237 + t337 * t337)) - t15 * (t333 + t335 + d4 * t87*(t237 + t334 * t334)) + d3 * t16*(t339 - t88 * (t237 + t340 * t340)) + d3 * t15*t342);
	A0[0][49] = t2 * (t16*t346 + t15 * t348 + d3 * t16*t332 - d3 * t15*t349) - a2 * t351 + t3 * (-a3 * t351 + t15 * t346 - t16 * t348 + d3 * t15*t332 + d3 * t16*t349);
	A0[0][50] = t3 * (t15*t374 + t16 * (t367 + t210 * (t361 - t353 * t364*(t356 + t220 * t352)))) - t2 * (t15*(t367 + t691) - t16 * t374);
	A0[0][51] = t2 * (t15*t389 - t16 * t397) - t3 * (t16*t389 + t15 * t397);
	A0[0][52] = -t3 * (t15*t413 - t16 * (t693 - t210 * t404)) + t2 * (t15*(t210*t404 - t209 * (t358 + t359 - t365 - t375)) - t16 * t413);
	A0[0][53] = t2 * (t15*t420 + t16 * (t87*t421 - t88 * t423)) - t3 * (t16*t420 - t15 * (t87*t421 - t88 * t423));
	A0[0][54] = t2 * (t16*t437 - t15 * t439) + t3 * (t15*t437 + t16 * t439);
	A0[0][55] = t2 * (t16*t449 + t15 * t451) + t3 * (t15*t449 - t16 * t451);
	A0[0][56] = -a2 * t492 + t2 * (t15*(t483 + t485 + t493 - t210 * (t462 + t353 * (-t290 + t320 + t453 + DF * (t461*t461)) - DF * t353*t455)) + t16 * (t481 + t482 + t87 * (t480 + t209 * (t462 + t353 * (-t290 + t320 + t453 + DF * (t454*t454)) - DF * t353*t455)) - t88 * (t472 + t473 - t352 * (-t290 + t320 + t453 + DF * (t452*t452)))) + d3 * t15*t487 - d3 * t16*t490) - t3 * (t16*(t483 + t485 + t493 - t210 * (t462 + t353 * (-t290 + t320 + t453 + DF * (t484*t484)) - DF * t353*t455)) + a3 * t492 - t15 * (t481 + t482 + t87 * (t480 + t209 * (t462 + t353 * (-t290 + t320 + t453 + DF * (t474*t474)) - DF * t353*t455)) - t88 * (t472 + t473 - t352 * (-t290 + t320 + t453 + DF * (t471*t471)))) + d3 * t16*t487 + d3 * t15*t490);
	A0[0][57] = -t3 * (t15*(t516 + t87 * (t515 + t209 * (t501 + t502 - t352 * (-t290 + t320 + t453 + DF * (t514*t514)))) + t88 * (t513 + t353 * (-t290 + t320 + t453 + DF * (t512*t512)) - DF * t353*t496) - d4 * t88*t507) - a3 * t511 - t16 * (t517 + t519 - t210 * (t501 + t502 - t352 * (-t290 + t320 + t453 + DF * (t518*t518))) - a4 * t88*t507) + d3 * t16*t522 + d3 * t15*t525) + a2 * t511 - t2 * (t16*(t516 + t87 * (t515 + t209 * (t501 + t502 - t352 * (-t290 + t320 + t453 + DF * (t495*t495)))) + t88 * (t513 + t353 * (-t290 + t320 + t453 + DF * (t494*t494)) - DF * t353*t496) - d4 * t88*t507) + t15 * (t517 + t519 - t210 * (t501 + t502 - t352 * (-t290 + t320 + t453 + DF * (t500*t500))) - a4 * t88*t507) - d3 * t15*t522 + d3 * t16*t525);
	A0[0][58] = t2 * (t15*t543 + t16 * t558 - d3 * t16*t554 - d3 * t15*t559) - a2 * t546 - t3 * (a3*t546 + t16 * t543 - t15 * t558 + d3 * t15*t554 - d3 * t16*t559);
	A0[0][59] = t3 * (a3*(t88*(t564 - t210 * (-t290 + t320 + t453 + DF * (t576*t576))) - t87 * t562) - t15 * (t574 + d4 * t88*(t564 - t210 * (-t290 + t320 + t453 + DF * (t575*t575))) - d4 * t87*t562 - t87 * t209*t568) + t16 * (t577 + a4 * t88*(t564 - t210 * (-t290 + t320 + t453 + DF * (t578*t578))) - a4 * t87*t562) + d3 * t16*(t580 + t87 * (t564 - t210 * (-t290 + t320 + t453 + DF * (t579*t579)))) - d3 * t15*(t620 + t209 * (-t290 + t320 + t453 + DF * (t581*t581)))) + a2 * (t88*(t564 - t210 * (-t290 + t320 + t453 + DF * (t561*t561))) - t87 * t562) - t2 * (t16*(t574 + d4 * t88*(t564 - t210 * (-t290 + t320 + t453 + DF * (t569*t569))) - d4 * t87*t562 - t87 * t209*t568) + t15 * (t577 + a4 * t88*(t564 - t210 * (-t290 + t320 + t453 + DF * (t565*t565))) - a4 * t87*t562) + d3 * t15*(t580 + t87 * (t564 - t210 * (-t290 + t320 + t453 + DF * (t570*t570)))) + d3 * t16*(t210*t563 + t209 * (-t290 + t320 + t453 + DF * (t571*t571))));
	A0[1][10] = -t9;
	A0[1][11] = -t582 + t583;
	A0[1][12] = -t4;
	A0[1][13] = t9;
	A0[1][14] = -t6;
	A0[1][15] = ddq2;
	A0[1][16] = -t63 + t68;
	A0[1][17] = t584;
	A0[1][20] = -t29 * t137;
	A0[1][21] = t624;
	A0[1][22] = t625;
	A0[1][23] = t586;
	A0[1][24] = t82;
	A0[1][25] = t97;
	A0[1][26] = t78 + t79 - a3 * t15*(t37 + t585) + a3 * t16*(ddq2 + ddq3 + t586);
	A0[1][27] = -t76 + t86 - a3 * t15*(ddq2 + ddq3 - t586) - a3 * t16*t62;
	A0[1][28] = a3 * t15*t82 + a3 * t16*(t22 + t24 + t144 - t587);
	A0[1][29] = a3 * t15*t77 + a3 * t16*t80;
	A0[1][30] = t627;
	A0[1][31] = t629;
	A0[1][32] = t631;
	A0[1][33] = -t87 * t632 - t88 * t93*t101;
	A0[1][34] = t634;
	A0[1][35] = t635;
	A0[1][36] = t166 + t636 + t637 - a4 * t157 - a3 * t15*t155 - a3 * t16*t157;
	A0[1][37] = -t589 + t638 - a4 * t179 - a3 * t15*t177 - a3 * t16*t179 - d4 * t88*t159;
	A0[1][38] = t206 - t591 + t639 - a4 * t197 - a3 * t16*t197 + a3 * t15*t199 - d4 * t87*t183;
	A0[1][39] = t608 + t640 + a3 * t16*t158 - a3 * t15*t207 - d4 * t87*t186;
	A0[1][40] = t642;
	A0[1][41] = -t88 * t236 - t87 * (t237 - t596 * t596);
	A0[1][42] = t644 + t88 * (t598 + t210 * (t243 - t597 * t597));
	A0[1][43] = t647;
	A0[1][44] = t650;
	A0[1][45] = t652;
	A0[1][46] = t653 + t654 + t655 - a4 * t599 - a3 * t15*t600 - a3 * t16*t599 - d4 * t87*t284;
	A0[1][47] = t658 - a4 * (t305 + t209 * (t243 + t601 * t601)) - t87 * t311 - a3 * t16*(t305 + t209 * (t243 + t603 * t603)) + d4 * t87*(t271 - t210 * (t243 + t604 * t604)) - d4 * t88*t232 - a3 * t15*(t87*(t271 - t210 * (t243 + t602 * t602)) - t88 * t232);
	A0[1][48] = t659 - a4 * t342 + a3 * t15*(t339 - t88 * (t237 + t606 * t606)) - a3 * t16*t342 - d4 * t87*t325 + d4 * t88*(t237 + t607 * t607);
	A0[1][49] = t608 + t661 + a3 * t16*t332 - a3 * t15*t349 - d4 * t87*t343;
	A0[1][50] = t664;
	A0[1][51] = t666;
	A0[1][52] = t668;
	A0[1][53] = t671;
	A0[1][54] = t672;
	A0[1][55] = t674;
	A0[1][56] = t677 - a4 * t490 + t88 * (t480 + t209 * (t462 + t353 * (-t290 + t320 + t453 + DF * (t613*t613)) - DF * t353*t455)) + t87 * (t472 + t473 - t352 * (-t290 + t320 + t453 + DF * (t612*t612))) + a3 * t15*t487 - a3 * t16*t490 - d4 * t87*t466;
	A0[1][57] = -t88 * (t515 + t209 * (t501 + t502 - t352 * (-t290 + t320 + t453 + DF * (t616*t616)))) - a4 * t525 + t87 * (t513 + t353 * (-t290 + t320 + t453 + DF * (t615*t615)) - DF * t353*t496) + a3 * t15*t522 - a3 * t16*t525 - d4 * t88*t504 - d4 * t87*t507;
	A0[1][58] = t680 + t681 + t684 - a4 * t554 - a3 * t16*t554 - a3 * t15*t559 - d4 * t87*t533;
	A0[1][59] = t685 + t687 + t688 - a4 * (t620 + t209 * (-t290 + t320 + t453 + DF * (t619*t619))) - a3 * t15*(t580 + t87 * (t564 - t210 * (-t290 + t320 + t453 + DF * (t621*t621)))) - a3 * t16*(t620 + t209 * (-t290 + t320 + t453 + DF * (t622*t622))) + d4 * t87*(t564 - t210 * (-t290 + t320 + t453 + DF * (t623*t623)));
	A0[2][20] = -t586;
	A0[2][21] = t624;
	A0[2][22] = t625;
	A0[2][23] = t586;
	A0[2][24] = t82;
	A0[2][25] = t97;
	A0[2][26] = t80;
	A0[2][27] = -t76 + t86;
	A0[2][30] = t627;
	A0[2][31] = t629;
	A0[2][32] = t631;
	A0[2][33] = -t633 - t87 * t632;
	A0[2][34] = t634;
	A0[2][35] = t635;
	A0[2][36] = t166 + t636 + t637 - a4 * t157;
	A0[2][37] = -t589 + t638 - a4 * t179 - d4 * t88*t159;
	A0[2][38] = t206 - t591 + t639 - a4 * t197 - d4 * t87*t183;
	A0[2][39] = t608 + t640 - d4 * t87*t186;
	A0[2][40] = t642;
	A0[2][41] = -t88 * t236 - t87 * (t237 - t643 * t643);
	A0[2][42] = t644 + t88 * (t598 + t210 * (t243 - t645 * t645));
	A0[2][43] = t647;
	A0[2][44] = t650;
	A0[2][45] = t652;
	A0[2][46] = t653 + t654 + t655 - a4 * t599 - d4 * t87*t284;
	A0[2][47] = t658 - a4 * (t305 + t209 * (t243 + t656 * t656)) - t87 * t311 + d4 * t87*(t271 - t210 * (t243 + t657 * t657)) - d4 * t88*t232;
	A0[2][48] = t659 - a4 * t342 - d4 * t87*t325 + d4 * t88*(t237 + t660 * t660);
	A0[2][49] = t608 + t661 - d4 * t87*t343;
	A0[2][50] = t664;
	A0[2][51] = t666;
	A0[2][52] = t668;
	A0[2][53] = t671;
	A0[2][54] = t672;
	A0[2][55] = t674;
	A0[2][56] = t677 - a4 * t490 + t88 * (t480 + t209 * (t462 + t353 * (-t290 + t320 + t453 + DF * (t676*t676)) - DF * t353*t455)) + t87 * (t472 + t473 - t352 * (-t290 + t320 + t453 + DF * (t675*t675))) - d4 * t87*t466;
	A0[2][57] = -t88 * (t515 + t209 * (t501 + t502 - t352 * (-t290 + t320 + t453 + DF * (t679*t679)))) - a4 * t525 + t87 * (t513 + t353 * (-t290 + t320 + t453 + DF * (t678*t678)) - DF * t353*t496) - d4 * t88*t504 - d4 * t87*t507;
	A0[2][58] = t680 + t681 + t684 - a4 * t554 - d4 * t87*t533;
	A0[2][59] = t685 + t687 + t688 - a4 * (t620 + t209 * (-t290 + t320 + t453 + DF * (t686*t686))) + d4 * t87*(t564 - t210 * (-t290 + t320 + t453 + DF * (t689*t689)));
	A0[3][30] = -t115;
	A0[3][31] = t114;
	A0[3][32] = -t95 - t98 + t108 - t178;
	A0[3][33] = t115;
	A0[3][34] = t183;
	A0[3][35] = t135;
	A0[3][36] = t184;
	A0[3][37] = -t172 + t181;
	A0[3][40] = t225;
	A0[3][41] = t234 + t210 * (t226 + t227 + t228 + t229);
	A0[3][42] = -t252 + t209 * (t243 - t690 * t690);
	A0[3][43] = t262;
	A0[3][44] = t209 * (ddq5 - t103 + t122 - t156 + t245) + t210 * (t237 - t243);
	A0[3][45] = t275 + t209 * t219*(t214 - t223);
	A0[3][46] = t286;
	A0[3][47] = -t315;
	A0[3][48] = t343;
	A0[3][50] = -t367 - t691;
	A0[3][51] = t389;
	A0[3][52] = -t693 + t210 * (t402 + t403);
	A0[3][53] = t420;
	A0[3][54] = -t438 + t210 * (t426 - t434);
	A0[3][55] = t451;
	A0[3][56] = t483 - t210 * (t462 + t353 * (-t290 + t320 + t453 + DF * (t695*t695)) - DF * t353*t455);
	A0[3][57] = -t517 + t210 * (t501 + t502 - t352 * (-t290 + t320 + t453 + DF * (t696*t696)));
	A0[3][58] = -t210 * t683;
	A0[3][59] = -t577;
	A0[4][40] = t213 * (t214 - t223);
	A0[4][41] = -t237 + t697 * t697;
	A0[4][42] = t247;
	A0[4][43] = -t245;
	A0[4][44] = t268;
	A0[4][45] = t280;
	A0[4][46] = t291;
	A0[4][47] = -t309 - t310;
	A0[4][50] = t373;
	A0[4][51] = t391;
	A0[4][52] = -t456 + t352 * (t386 - t398);
	A0[4][53] = t423;
	A0[4][54] = -t429 - t430;
	A0[4][55] = -t372 + t440;
	A0[4][56] = t472 + t473 - t352 * (-t290 + t320 + t453 + DF * (t698*t698));
	A0[4][57] = t513 + t353 * (-t290 + t320 + t453 + DF * (t699*t699)) - DF * t353*t496;
	A0[4][58] = t547 + t548 - t560 + DF * t353*(t358 + t359 - t365 - t375);
	A0[4][59] = t573;
	A0[5][50] = -t400;
	A0[5][51] = -t385 + t386;
	A0[5][52] = -t358 - t359 + t365 + t375;
	A0[5][53] = t400;
	A0[5][54] = -t377 + t378 - t381 - t382;
	A0[5][55] = t441;
	A0[5][56] = t460;
	A0[5][57] = -t497 - t498;


	double A0vec[6*JointGroupDim];
	for (int i = 0; i < 6; i++)
		for (int j = 0; j < JointGroupDim; j++)
			A0vec[(JointGroupDim)* i + j] = A0[i][j];


	s_mm(6, JointReduceDim, JointGroupDim, A0vec, CoefInv, distalVec);


}

void jointdynamics::RLSaris(const double *positionL, const double *sensorL, double *estParas,double *Coef,double *CoefInv,double *StatisError)
{
	// 创建机器人 //
	aris::dynamic::PumaParam param;
	param.d1 = 0.3295;
	param.a1 = 0.04;
	param.a2 = 0.275;
	param.d3 = 0.0;
	param.a3 = 0.025;
	param.d4 = 0.28;

	auto m = aris::dynamic::createModelPuma(param);

	// 为已有机器人添加 辨识器，也可以在xml里定义
	auto &clb = m->calibratorPool().add<aris::dynamic::Calibrator>();
	//auto &clb = m->calibratorPool()[0];

	// 以下代码为辨识器分配内存
	for (auto &ee : m->generalMotionPool())ee.activate(false);
	clb.allocateMemory();


    double CutFreq=5;
    A[0][0] = 0; A[0][1] = 1; A[0][2] = 0;
    A[1][0] = 0; A[1][1] = 0; A[1][2] = 1;
    A[2][0] = -CutFreq * CutFreq * CutFreq;
    A[2][1] = -2 * CutFreq * CutFreq;
    A[2][2] = -2 * CutFreq;
    B[0] = 0; B[1] = 0;
    B[2] = -A[2][0];



    //positionList[id(2, 2, 6)];
    double stateMot0[RobotAxis][3] = { 0 };
    double stateMot1[RobotAxis][3] = { 0 };
    double stateTor0[RobotAxis][3] = { 0 };
    double stateTor1[RobotAxis][3] = { 0 };



    double q[RobotAxis];
    double dq[RobotAxis];
    double ddq[RobotAxis];
    double ts[RobotAxis];
    //std::array<double, 6> estParas;

    double intDT = 8*DT;
    int length = 6;
    std::vector<double> regressorMatrix_vec(RobotAxis * SampleNum * JointGroupDim);
    double* regressorVector = regressorMatrix_vec.data();

    std::vector<double> regressorMatrixFric_vec(6 * SampleNum * 12);
    double* regressorVectorFric = regressorMatrixFric_vec.data();

    std::vector<double> regressorForces_vec(RobotAxis * SampleNum);
    double* regressorForces = regressorForces_vec.data();

    double posCur[RobotAxis];
    double torCur[RobotAxis];
    for (int j = 0; j < RobotAxis; j++)
    {
        stateMot0[j][0] = positionL[j];
        stateTor0[j][0] = sensorL[j];
    }

    for (int i = 0; i < SampleNum; i++)
    {

        for (int j = 0; j < RobotAxis; j++)
        {

            posCur[j] = positionL[RobotAxis*i+j];
            torCur[j] = sensorL[RobotAxis*i+j];

            stateMot1[j][0] = stateMot0[j][0] + intDT * (A[0][0] * stateMot0[j][0] + A[0][1] * stateMot0[j][1] + A[0][2] * stateMot0[j][2] + B[0] * posCur[j]);
            stateMot1[j][1] = stateMot0[j][1] + intDT * (A[1][0] * stateMot0[j][0] + A[1][1] * stateMot0[j][1] + A[1][2] * stateMot0[j][2] + B[1] * posCur[j]);
            stateMot1[j][2] = stateMot0[j][2] + intDT * (A[2][0] * stateMot0[j][0] + A[2][1] * stateMot0[j][1] + A[2][2] * stateMot0[j][2] + B[2] * posCur[j]);

            stateTor1[j][0] = stateTor0[j][0] + intDT * (A[0][0] * stateTor0[j][0] + A[0][1] * stateTor0[j][1] + A[0][2] * stateTor0[j][2] + B[0] * torCur[j]);
            stateTor1[j][1] = stateTor0[j][1] + intDT * (A[1][0] * stateTor0[j][0] + A[1][1] * stateTor0[j][1] + A[1][2] * stateTor0[j][2] + B[1] * torCur[j]);
            stateTor1[j][2] = stateTor0[j][2] + intDT * (A[2][0] * stateTor0[j][0] + A[2][1] * stateTor0[j][1] + A[2][2] * stateTor0[j][2] + B[2] * torCur[j]);
        }

        for (int j = 0; j < RobotAxis; j++)
        {
            q[j] = stateMot1[j][0];
            dq[j] = stateMot1[j][1];
            ddq[j] = stateMot1[j][2];
            ts[j] = stateTor1[j][0];
        }

        for (int k = 0; k < RobotAxis; k++)
        {
            q[k] = q[k] * DirectionFlag[k] + JointOffset[k] + ZeroOffset[k];
            dq[k] = dq[k] * DirectionFlag[k];
            ddq[k] = ddq[k] * DirectionFlag[k];

        }

		// 设置当前电机的位置、速度、加速度
		for (int i = 0; i < m->motionPool().size(); ++i)
		{
			m->motionPool()[i].setMp(q[i]);
			m->motionPool()[i].setMv(dq[i]);
			m->motionPool()[i].setMa(ddq[i]);

		}

        m->solverPool().at(1).kinPos();
        m->solverPool().at(1).kinVel();
        m->solverPool().at(1).dynAccAndFce();

		// 设置当前电机的力
		for (int i = 0; i < m->motionPool().size(); ++i)
		{
			m->motionPool()[i].setMf(ts[i]);
		}

		// 开始辨识 //
		clb.clb();
		
        double distalVec[RobotAxis * JointGroupDim];
        double Y[RobotAxis][JointGroupDim];
        for (int m = 0; m < RobotAxis; m++)
            for (int n = 0; n < JointGroupDim; n++)
                Y[m][n]= clb.A()[JointGroupDim * m + n];
        //dsp(clb.m(), clb.n(), clb.A());
		double Y1[RobotAxis][2*RobotAxis];
		for (int m = 0; m < RobotAxis; m++)
		{
			for (int n = 0; n < 2 * RobotAxis; n++)
			{
				Y1[m][n] = 0;
				if (n == 2 * m)
                    Y1[m][n] = 1*sign(dq[m]);
				if (n == 2 * m + 1)
					Y1[m][n] = dq[m];
			}
		}



        for (int m = 0; m < RobotAxis; m++)
        {
            for (int n = 0; n < JointGroupDim; n++)
            {
                regressorVector[(i * RobotAxis +m)*JointGroupDim +n] = Y[m][n];

            }

			for (int n = 0; n < 12; n++)
			{
				regressorVectorFric[(i * RobotAxis + m) * 12 + n] = Y1[m][n];

			}


            regressorForces[i * RobotAxis + m] = ts[m];

        }

        for (int j = 0; j < RobotAxis; j++)
        {

            stateMot0[j][0] = stateMot1[j][0];
            stateMot0[j][1] = stateMot1[j][1];
            stateMot0[j][2] = stateMot1[j][2];

            stateTor0[j][0] = stateTor1[j][0];
            stateTor0[j][1] = stateTor1[j][1];
            stateTor0[j][2] = stateTor1[j][2];
        }
        std::cout<<dq[1]<<std::endl;
    }
	
	// 所需的中间变量，请对U的对角线元素做处理
    std::vector<double> U_vec(RobotAxis * SampleNum * JointGroupDim);
    auto U = U_vec.data();

	std::vector<double> tau_vec(RobotAxis * SampleNum);
	auto tau = tau_vec.data();
    
	std::vector<aris::Size> p_vec(RobotAxis * SampleNum);
	auto p = p_vec.data();
    
	aris::Size rank;

	// 根据 A 求出中间变量，相当于做 QR 分解 //
   // 请对 U 的对角线元素做处理
    s_householder_utp(RobotAxis * SampleNum, JointGroupDim, regressorVector, U, tau, p, rank, 1e-10);

	std::vector<double> TestQ_vec(RobotAxis * SampleNum * JointGroupDim);
	auto TestQ = TestQ_vec.data();

    std::vector<double> TestR_vec(RobotAxis * SampleNum * JointGroupDim);
    auto TestR = TestR_vec.data();

    s_householder_ut2qmn(RobotAxis * SampleNum, JointGroupDim, U, tau, TestQ);
    s_householder_ut2r(RobotAxis * SampleNum, JointGroupDim, U, tau, TestR);
    s_permutate_inv(JointGroupDim, RobotAxis * SampleNum, p, TestR, T(JointGroupDim));

	//Test QR
	//s_permutate(TotalParas, 3 * SampleNum, p, TestR, T(TotalParas));
	//s_mm(3 * SampleNum, TotalParas, 3 * SampleNum, TestQ, TestR, UU);
	//s_householder_ut2r(k, n, U, tau, R);
	//s_householder_ut2qmn(m, k, U, tau, q);
	//for (int i = 0;i < 3 * SampleNum*TotalParas;i++)
		//dU[i]= regressorVector[i]-UU[i];


    std::vector<double> Q_vec(RobotAxis * SampleNum * JointReduceDim);
    auto Q = Q_vec.data();
    std::vector<double> R_vec(JointReduceDim * JointGroupDim);
    auto R = R_vec.data();
    for (int i = 0;i < RobotAxis * SampleNum;i++)
		for (int j = 0;j < JointReduceDim;j++)
            Q[i*JointReduceDim + j] = TestQ[i * JointGroupDim + j];

	for (int i = 0;i < JointReduceDim;i++)
		for (int j = 0;j < JointGroupDim;j++)
		{
			R[i*JointGroupDim + j] = TestR[i * JointGroupDim + j];
			Coef[i*JointGroupDim + j] = TestR[i * JointGroupDim + j];
		}

	//s_mm(3 * SampleNum, TotalParas, ReduceParas, Q, R, UU);
	//for (int i = 0;i < 3 * SampleNum*TotalParas;i++)
		//dU[i]= regressorVector[i]-UU[i];



    std::vector<double> QwithFric_vec(RobotAxis * SampleNum * (JointReduceDim + 2*RobotAxis));
    auto QwithFric = QwithFric_vec.data();
    for (int i = 0;i < RobotAxis * SampleNum;i++)
	{
		for (int j = 0;j < JointReduceDim;j++)
            QwithFric[i*(JointReduceDim + 2*RobotAxis) + j] = Q[i*JointReduceDim + j];
        for (int j = JointReduceDim;j < JointReduceDim + 2*RobotAxis;j++)
            QwithFric[i*(JointReduceDim + 2*RobotAxis) + j] = regressorVectorFric[i * 2*RobotAxis + j - JointReduceDim];
	}

	// 求解 A的广义逆pinv 和 x
    std::vector<double> pinv_vec(RobotAxis * SampleNum * (JointReduceDim+2*RobotAxis));
	auto pinv = pinv_vec.data();

	// 所需的中间变量，请对U的对角线元素做处理
    std::vector<double> UQ_vec(RobotAxis * SampleNum * (JointReduceDim + 2*RobotAxis));
    auto UQ = UQ_vec.data();

	std::vector<double> tauQ_vec(RobotAxis * SampleNum);
	auto tauQ = tauQ_vec.data();

	std::vector<aris::Size> pQ_vec(RobotAxis * SampleNum);
	auto pQ = pQ_vec.data();

	aris::Size rankQ;

    s_householder_utp(RobotAxis * SampleNum, JointReduceDim + 2*RobotAxis, QwithFric, UQ, tauQ, pQ, rankQ, 1e-10);

	// 根据QR分解的结果求广义逆，相当于Matlab中的 pinv(A) //
	std::vector<double> tauQ2_vec(RobotAxis * SampleNum);
	auto tauQ2 = tauQ2_vec.data();

    s_householder_utp2pinv(RobotAxis * SampleNum, JointReduceDim + 2*RobotAxis, rankQ, UQ, tauQ, pQ, pinv, tauQ2, 1e-10);
	// 根据QR分解的结果求广义逆，相当于Matlab中的 pinv(A)*b //
    s_mm(JointReduceDim + 2*RobotAxis, 1, RobotAxis * SampleNum, pinv, regressorForces, estParas);


	/*
	std::ofstream outfile("C:/Users/gk/Desktop/Kaanh_gk/EstParas.txt");
	if (!outfile)
	{
		std::cout << "Unable to open otfile";
		exit(1); // terminate with error
	}

	for (int i = 0;i < 3 * SampleNum*TotalParas;i++)
		outfile << regressorVector[i] << std::endl;

	outfile.close();
	*/

    //Calculate Model Error
    std::vector<double> Error_vec(RobotAxis * SampleNum);
    auto Error = Error_vec.data();
	
    s_mm(RobotAxis * SampleNum, 1, JointReduceDim+12, QwithFric,estParas, Error);
    for(int i=0;i< RobotAxis*SampleNum;i++)
        Error[i]= Error[i]- regressorForces[i];

    double SumError[RobotAxis]={0};
	for (int j = 0;j < 6;j++)
		for (int i = 0;i < SampleNum;i++)
			SumError[j] = SumError[j] + Error[i * 6 + j] * Error[i * 6 + j];
   

    for(int j=0;j< RobotAxis;j++)
        StatisError[j]= sqrt(SumError[j]/SampleNum);


	//计算CoefInv, Coef*CoefInv=EYE(30)

	std::vector<double> EYE_vec(JointGroupDim * JointGroupDim);
	auto EYE = EYE_vec.data();
	for (int i = 0;i < JointGroupDim;i++)
		for (int j = 0;j < JointGroupDim;j++)
		{
			EYE[i*JointGroupDim + j] = 0;
			if (i == j)
				EYE[i*JointGroupDim + j] = 1;
		}

	// 求解 A的广义逆pinv 和 x
	std::vector<double> pinvInv_vec(JointGroupDim * JointReduceDim);
	auto pinvInv = pinvInv_vec.data();

	// 所需的中间变量，请对U的对角线元素做处理
	std::vector<double> UInv_vec(JointGroupDim * JointReduceDim);
	auto UInv = UInv_vec.data();

	double tauInv[JointGroupDim];
	aris::Size pInv[JointGroupDim];
	aris::Size rankInv;

	s_householder_utp(JointReduceDim, JointGroupDim, Coef, UInv, tauInv, pInv, rankInv, 1e-10);

	// 根据QR分解的结果求广义逆，相当于Matlab中的 pinv(A) //
	double tau2Inv[JointGroupDim];

	s_householder_utp2pinv(JointReduceDim, JointGroupDim, rankInv, UInv, tauInv, pInv, pinvInv, tau2Inv, 1e-10);
	// 根据QR分解的结果求广义逆，相当于Matlab中的 pinv(A)*b //
	s_mm(JointGroupDim, JointReduceDim, JointGroupDim, EYE, pinvInv, CoefInv);

    }

void jointdynamics::RLS(const double *positionL, const double *sensorL, double *estParas, double *Coef, double *CoefInv, double *StatisError)
	{

		double CutFreq = 5;
		A[0][0] = 0; A[0][1] = 1; A[0][2] = 0;
		A[1][0] = 0; A[1][1] = 0; A[1][2] = 1;
		A[2][0] = -CutFreq * CutFreq * CutFreq;
		A[2][1] = -2 * CutFreq * CutFreq;
		A[2][2] = -2 * CutFreq;
		B[0] = 0; B[1] = 0;
		B[2] = -A[2][0];



		//positionList[id(2, 2, 6)];
		double stateMot0[RobotAxis][3] = { 0 };
		double stateMot1[RobotAxis][3] = { 0 };
		double stateTor0[RobotAxis][3] = { 0 };
		double stateTor1[RobotAxis][3] = { 0 };



		double q[RobotAxis];
		double dq[RobotAxis];
		double ddq[RobotAxis];
		double ts[RobotAxis];
		//std::array<double, 6> estParas;

		double intDT = 8 * DT;
		int length = 6;
		std::vector<double> regressorMatrix_vec(RobotAxis * SampleNum * JointGroupDim);
		double* regressorVector = regressorMatrix_vec.data();

		std::vector<double> regressorMatrixFric_vec(6 * SampleNum * 12);
		double* regressorVectorFric = regressorMatrixFric_vec.data();

		std::vector<double> regressorForces_vec(RobotAxis * SampleNum);
		double* regressorForces = regressorForces_vec.data();

		double posCur[RobotAxis];
		double torCur[RobotAxis];
		for (int j = 0; j < RobotAxis; j++)
		{
			stateMot0[j][0] = positionL[j];
			stateTor0[j][0] = sensorL[j];
		}

		for (int i = 0; i < SampleNum; i++)
		{

			for (int j = 0; j < RobotAxis; j++)
			{

				posCur[j] = positionL[RobotAxis*i + j];
				torCur[j] = sensorL[RobotAxis*i + j];

				stateMot1[j][0] = stateMot0[j][0] + intDT * (A[0][0] * stateMot0[j][0] + A[0][1] * stateMot0[j][1] + A[0][2] * stateMot0[j][2] + B[0] * posCur[j]);
				stateMot1[j][1] = stateMot0[j][1] + intDT * (A[1][0] * stateMot0[j][0] + A[1][1] * stateMot0[j][1] + A[1][2] * stateMot0[j][2] + B[1] * posCur[j]);
				stateMot1[j][2] = stateMot0[j][2] + intDT * (A[2][0] * stateMot0[j][0] + A[2][1] * stateMot0[j][1] + A[2][2] * stateMot0[j][2] + B[2] * posCur[j]);

				stateTor1[j][0] = stateTor0[j][0] + intDT * (A[0][0] * stateTor0[j][0] + A[0][1] * stateTor0[j][1] + A[0][2] * stateTor0[j][2] + B[0] * torCur[j]);
				stateTor1[j][1] = stateTor0[j][1] + intDT * (A[1][0] * stateTor0[j][0] + A[1][1] * stateTor0[j][1] + A[1][2] * stateTor0[j][2] + B[1] * torCur[j]);
				stateTor1[j][2] = stateTor0[j][2] + intDT * (A[2][0] * stateTor0[j][0] + A[2][1] * stateTor0[j][1] + A[2][2] * stateTor0[j][2] + B[2] * torCur[j]);
			}

			for (int j = 0; j < RobotAxis; j++)
			{
				q[j] = stateMot1[j][0];
				dq[j] = stateMot1[j][1];
				ddq[j] = stateMot1[j][2];
				ts[j] = stateTor1[j][0];
			}

			for (int k = 0; k < RobotAxis; k++)
			{
				q[k] = q[k] * DirectionFlag[k] + JointOffset[k] + ZeroOffset[k];
				dq[k] = dq[k] * DirectionFlag[k];
				ddq[k] = ddq[k] * DirectionFlag[k];

			}
			double distalVec[RobotAxis * JointGroupDim];
			JointMatrix(q, dq, ddq, ts, distalVec);
			double Y[RobotAxis][JointGroupDim];
			for (int m = 0; m < RobotAxis; m++)
				for (int n = 0; n < JointGroupDim; n++)
					Y[m][n] = distalVec[JointGroupDim * m + n];

			double Y1[RobotAxis][2 * RobotAxis];
			for (int m = 0; m < RobotAxis; m++)
			{
				for (int n = 0; n < 2 * RobotAxis; n++)
				{
					Y1[m][n] = 0;
					if (n == 2 * m)
						Y1[m][n] = 1 * sign(dq[m]);
					if (n == 2 * m + 1)
						Y1[m][n] = dq[m];
				}
			}



			for (int m = 0; m < RobotAxis; m++)
			{
				for (int n = 0; n < JointGroupDim; n++)
				{
					regressorVector[(i * RobotAxis + m)*JointGroupDim + n] = Y[m][n];

				}

				for (int n = 0; n < 12; n++)
				{
					regressorVectorFric[(i * RobotAxis + m) * 12 + n] = Y1[m][n];

				}


				regressorForces[i * RobotAxis + m] = ts[m];

			}

			for (int j = 0; j < RobotAxis; j++)
			{

				stateMot0[j][0] = stateMot1[j][0];
				stateMot0[j][1] = stateMot1[j][1];
				stateMot0[j][2] = stateMot1[j][2];

				stateTor0[j][0] = stateTor1[j][0];
				stateTor0[j][1] = stateTor1[j][1];
				stateTor0[j][2] = stateTor1[j][2];
			}
			std::cout << i << std::endl;
		}

		// 所需的中间变量，请对U的对角线元素做处理
		std::vector<double> U_vec(RobotAxis * SampleNum * JointGroupDim);
		auto U = U_vec.data();

		std::vector<double> tau_vec(RobotAxis * SampleNum);
		auto tau = tau_vec.data();

		std::vector<aris::Size> p_vec(RobotAxis * SampleNum);
		auto p = p_vec.data();

		aris::Size rank;

		// 根据 A 求出中间变量，相当于做 QR 分解 //
	   // 请对 U 的对角线元素做处理
		s_householder_utp(RobotAxis * SampleNum, JointGroupDim, regressorVector, U, tau, p, rank, 1e-10);

		std::vector<double> TestQ_vec(RobotAxis * SampleNum * JointGroupDim);
		auto TestQ = TestQ_vec.data();

		std::vector<double> TestR_vec(RobotAxis * SampleNum * JointGroupDim);
		auto TestR = TestR_vec.data();

		s_householder_ut2qmn(RobotAxis * SampleNum, JointGroupDim, U, tau, TestQ);
		s_householder_ut2r(RobotAxis * SampleNum, JointGroupDim, U, tau, TestR);
		s_permutate_inv(JointGroupDim, RobotAxis * SampleNum, p, TestR, T(JointGroupDim));

		//Test QR
		//s_permutate(TotalParas, 3 * SampleNum, p, TestR, T(TotalParas));
		//s_mm(3 * SampleNum, TotalParas, 3 * SampleNum, TestQ, TestR, UU);
		//s_householder_ut2r(k, n, U, tau, R);
		//s_householder_ut2qmn(m, k, U, tau, q);
		//for (int i = 0;i < 3 * SampleNum*TotalParas;i++)
			//dU[i]= regressorVector[i]-UU[i];


		std::vector<double> Q_vec(RobotAxis * SampleNum * JointReduceDim);
		auto Q = Q_vec.data();
		std::vector<double> R_vec(JointReduceDim * JointGroupDim);
		auto R = R_vec.data();
		for (int i = 0;i < RobotAxis * SampleNum;i++)
			for (int j = 0;j < JointReduceDim;j++)
				Q[i*JointReduceDim + j] = TestQ[i * JointGroupDim + j];

		for (int i = 0;i < JointReduceDim;i++)
			for (int j = 0;j < JointGroupDim;j++)
			{
				R[i*JointGroupDim + j] = TestR[i * JointGroupDim + j];
				Coef[i*JointGroupDim + j] = TestR[i * JointGroupDim + j];
			}

		//s_mm(3 * SampleNum, TotalParas, ReduceParas, Q, R, UU);
		//for (int i = 0;i < 3 * SampleNum*TotalParas;i++)
			//dU[i]= regressorVector[i]-UU[i];



		std::vector<double> QwithFric_vec(RobotAxis * SampleNum * (JointReduceDim + 2 * RobotAxis));
		auto QwithFric = QwithFric_vec.data();
		for (int i = 0;i < RobotAxis * SampleNum;i++)
		{
			for (int j = 0;j < JointReduceDim;j++)
				QwithFric[i*(JointReduceDim + 2 * RobotAxis) + j] = Q[i*JointReduceDim + j];
			for (int j = JointReduceDim;j < JointReduceDim + 2 * RobotAxis;j++)
				QwithFric[i*(JointReduceDim + 2 * RobotAxis) + j] = regressorVectorFric[i * 2 * RobotAxis + j - JointReduceDim];
		}

		// 求解 A的广义逆pinv 和 x
		std::vector<double> pinv_vec(RobotAxis * SampleNum * (JointReduceDim + 2 * RobotAxis));
		auto pinv = pinv_vec.data();

		// 所需的中间变量，请对U的对角线元素做处理
		std::vector<double> UQ_vec(RobotAxis * SampleNum * (JointReduceDim + 2 * RobotAxis));
		auto UQ = UQ_vec.data();

		std::vector<double> tauQ_vec(RobotAxis * SampleNum);
		auto tauQ = tauQ_vec.data();

		std::vector<aris::Size> pQ_vec(RobotAxis * SampleNum);
		auto pQ = pQ_vec.data();

		aris::Size rankQ;

		s_householder_utp(RobotAxis * SampleNum, JointReduceDim + 2 * RobotAxis, QwithFric, UQ, tauQ, pQ, rankQ, 1e-10);

		// 根据QR分解的结果求广义逆，相当于Matlab中的 pinv(A) //
		std::vector<double> tauQ2_vec(RobotAxis * SampleNum);
		auto tauQ2 = tauQ2_vec.data();

		s_householder_utp2pinv(RobotAxis * SampleNum, JointReduceDim + 2 * RobotAxis, rankQ, UQ, tauQ, pQ, pinv, tauQ2, 1e-10);
		// 根据QR分解的结果求广义逆，相当于Matlab中的 pinv(A)*b //
		s_mm(JointReduceDim + 2 * RobotAxis, 1, RobotAxis * SampleNum, pinv, regressorForces, estParas);


		/*
		std::ofstream outfile("C:/Users/gk/Desktop/Kaanh_gk/EstParas.txt");
		if (!outfile)
		{
			std::cout << "Unable to open otfile";
			exit(1); // terminate with error
		}

		for (int i = 0;i < 3 * SampleNum*TotalParas;i++)
			outfile << regressorVector[i] << std::endl;

		outfile.close();
		*/

		//Calculate Model Error
		std::vector<double> Error_vec(RobotAxis * SampleNum);
		auto Error = Error_vec.data();

		s_mm(RobotAxis * SampleNum, 1, JointReduceDim + 12, QwithFric, estParas, Error);
		for (int i = 0;i < RobotAxis*SampleNum;i++)
			Error[i] = Error[i] - regressorForces[i];

		double SumError[RobotAxis] = { 0 };
		for (int j = 0;j < 6;j++)
			for (int i = 0;i < SampleNum;i++)
				SumError[j] = SumError[j] + Error[i * 6 + j] * Error[i * 6 + j];


		for (int j = 0;j < RobotAxis;j++)
			StatisError[j] = sqrt(SumError[j] / SampleNum);


		//计算CoefInv, Coef*CoefInv=EYE(30)

		std::vector<double> EYE_vec(JointGroupDim * JointGroupDim);
		auto EYE = EYE_vec.data();
		for (int i = 0;i < JointGroupDim;i++)
			for (int j = 0;j < JointGroupDim;j++)
			{
				EYE[i*JointGroupDim + j] = 0;
				if (i == j)
					EYE[i*JointGroupDim + j] = 1;
			}

		// 求解 A的广义逆pinv 和 x
		std::vector<double> pinvInv_vec(JointGroupDim * JointReduceDim);
		auto pinvInv = pinvInv_vec.data();

		// 所需的中间变量，请对U的对角线元素做处理
		std::vector<double> UInv_vec(JointGroupDim * JointReduceDim);
		auto UInv = UInv_vec.data();

		double tauInv[JointGroupDim];
		aris::Size pInv[JointGroupDim];
		aris::Size rankInv;

		s_householder_utp(JointReduceDim, JointGroupDim, Coef, UInv, tauInv, pInv, rankInv, 1e-10);

		// 根据QR分解的结果求广义逆，相当于Matlab中的 pinv(A) //
		double tau2Inv[JointGroupDim];

		s_householder_utp2pinv(JointReduceDim, JointGroupDim, rankInv, UInv, tauInv, pInv, pinvInv, tau2Inv, 1e-10);
		// 根据QR分解的结果求广义逆，相当于Matlab中的 pinv(A)*b //
		s_mm(JointGroupDim, JointReduceDim, JointGroupDim, EYE, pinvInv, CoefInv);

	}

void jointdynamics::RLSYang(const double *positionL, const double *sensorL, double *estParas, double *StatisError)
	{

		double CutFreq = 5;
		A[0][0] = 0; A[0][1] = 1; A[0][2] = 0;
		A[1][0] = 0; A[1][1] = 0; A[1][2] = 1;
		A[2][0] = -CutFreq * CutFreq * CutFreq;
		A[2][1] = -2 * CutFreq * CutFreq;
		A[2][2] = -2 * CutFreq;
		B[0] = 0; B[1] = 0;
		B[2] = -A[2][0];



		//positionList[id(2, 2, 6)];
		double stateMot0[RobotAxis][3] = { 0 };
		double stateMot1[RobotAxis][3] = { 0 };
		double stateTor0[RobotAxis][3] = { 0 };
		double stateTor1[RobotAxis][3] = { 0 };



		double q[RobotAxis];
		double dq[RobotAxis];
		double ddq[RobotAxis];
		double ts[RobotAxis];
		//std::array<double, 6> estParas;

		double intDT = 8 * DT;
		int length = 6;
		std::vector<double> regressorMatrix_vec(RobotAxis * SampleNum * JointGroupDim);
		double* regressorVector = regressorMatrix_vec.data();

		std::vector<double> regressorMatrixFric_vec(6 * SampleNum * 12);
		double* regressorVectorFric = regressorMatrixFric_vec.data();

		std::vector<double> regressorForces_vec(RobotAxis * SampleNum);
		double* regressorForces = regressorForces_vec.data();

		double posCur[RobotAxis];
		double torCur[RobotAxis];
		for (int j = 0; j < RobotAxis; j++)
		{
			stateMot0[j][0] = positionL[j];
			stateTor0[j][0] = sensorL[j];
		}

		for (int i = 0; i < SampleNum; i++)
		{

			for (int j = 0; j < RobotAxis; j++)
			{

				posCur[j] = positionL[RobotAxis*i + j];
				torCur[j] = sensorL[RobotAxis*i + j];

				stateMot1[j][0] = stateMot0[j][0] + intDT * (A[0][0] * stateMot0[j][0] + A[0][1] * stateMot0[j][1] + A[0][2] * stateMot0[j][2] + B[0] * posCur[j]);
				stateMot1[j][1] = stateMot0[j][1] + intDT * (A[1][0] * stateMot0[j][0] + A[1][1] * stateMot0[j][1] + A[1][2] * stateMot0[j][2] + B[1] * posCur[j]);
				stateMot1[j][2] = stateMot0[j][2] + intDT * (A[2][0] * stateMot0[j][0] + A[2][1] * stateMot0[j][1] + A[2][2] * stateMot0[j][2] + B[2] * posCur[j]);

				stateTor1[j][0] = stateTor0[j][0] + intDT * (A[0][0] * stateTor0[j][0] + A[0][1] * stateTor0[j][1] + A[0][2] * stateTor0[j][2] + B[0] * torCur[j]);
				stateTor1[j][1] = stateTor0[j][1] + intDT * (A[1][0] * stateTor0[j][0] + A[1][1] * stateTor0[j][1] + A[1][2] * stateTor0[j][2] + B[1] * torCur[j]);
				stateTor1[j][2] = stateTor0[j][2] + intDT * (A[2][0] * stateTor0[j][0] + A[2][1] * stateTor0[j][1] + A[2][2] * stateTor0[j][2] + B[2] * torCur[j]);
			}

			for (int j = 0; j < RobotAxis; j++)
			{
				q[j] = stateMot1[j][0];
				dq[j] = stateMot1[j][1];
				ddq[j] = stateMot1[j][2];
				ts[j] = stateTor1[j][0];
			}

			for (int k = 0; k < RobotAxis; k++)
			{
				q[k] = q[k] * DirectionFlag[k] + JointOffset[k] + ZeroOffset[k];
				dq[k] = dq[k] * DirectionFlag[k];
				ddq[k] = ddq[k] * DirectionFlag[k];

			}
			double distalVec[RobotAxis * JointGroupDim];
			JointMatrix(q, dq, ddq, ts, distalVec);
			double Y[RobotAxis][JointGroupDim];
			for (int m = 0; m < RobotAxis; m++)
				for (int n = 0; n < JointGroupDim; n++)
					Y[m][n] = distalVec[JointGroupDim * m + n];

			double Y1[RobotAxis][2 * RobotAxis];
			for (int m = 0; m < RobotAxis; m++)
			{
				for (int n = 0; n < 2 * RobotAxis; n++)
				{
					Y1[m][n] = 0;
					if (n == 2 * m)
						Y1[m][n] = 1 * sign(dq[m]);
					if (n == 2 * m + 1)
						Y1[m][n] = dq[m];
				}
			}



			for (int m = 0; m < RobotAxis; m++)
			{
				for (int n = 0; n < JointGroupDim; n++)
				{
					regressorVector[(i * RobotAxis + m)*JointGroupDim + n] = Y[m][n];

				}

				for (int n = 0; n < 12; n++)
				{
					regressorVectorFric[(i * RobotAxis + m) * 12 + n] = Y1[m][n];

				}


				regressorForces[i * RobotAxis + m] = ts[m];

			}

			for (int j = 0; j < RobotAxis; j++)
			{

				stateMot0[j][0] = stateMot1[j][0];
				stateMot0[j][1] = stateMot1[j][1];
				stateMot0[j][2] = stateMot1[j][2];

				stateTor0[j][0] = stateTor1[j][0];
				stateTor0[j][1] = stateTor1[j][1];
				stateTor0[j][2] = stateTor1[j][2];
			}
			//std::cout << i << std::endl;
		}

		std::vector<double> QwithFric_vec(RobotAxis * SampleNum * (JointGroupDim + 2 * RobotAxis));
		auto QwithFric = QwithFric_vec.data();
		for (int i = 0;i < RobotAxis * SampleNum;i++)
		{
			for (int j = 0;j < JointGroupDim;j++)
				QwithFric[i*(JointGroupDim + 2 * RobotAxis) + j] = regressorVector[i*JointGroupDim + j];
			for (int j = JointGroupDim;j < JointGroupDim + 2 * RobotAxis;j++)
				QwithFric[i*(JointGroupDim + 2 * RobotAxis) + j] = regressorVectorFric[i * 2 * RobotAxis + j - JointGroupDim];
		}

		// 求解 A的广义逆pinv 和 x
		std::vector<double> pinv_vec(RobotAxis * SampleNum * (JointGroupDim + 2 * RobotAxis));
		auto pinv = pinv_vec.data();

		// 所需的中间变量，请对U的对角线元素做处理
		std::vector<double> UQ_vec(RobotAxis * SampleNum * (JointGroupDim + 2 * RobotAxis));
		auto UQ = UQ_vec.data();

		std::vector<double> tauQ_vec(RobotAxis * SampleNum);
		auto tauQ = tauQ_vec.data();

		std::vector<aris::Size> pQ_vec(RobotAxis * SampleNum);
		auto pQ = pQ_vec.data();

		aris::Size rankQ;

        s_householder_utp(RobotAxis * SampleNum, JointGroupDim + 2 * RobotAxis, QwithFric, UQ, tauQ, pQ, rankQ, 1e-3);

		// 根据QR分解的结果求广义逆，相当于Matlab中的 pinv(A) //
		std::vector<double> tauQ2_vec(RobotAxis * SampleNum);
		auto tauQ2 = tauQ2_vec.data();

        s_householder_utp2pinv(RobotAxis * SampleNum, JointGroupDim + 2 * RobotAxis, rankQ, UQ, tauQ, pQ, pinv, tauQ2, 1e-3);
		// 根据QR分解的结果求广义逆，相当于Matlab中的 pinv(A)*b //
		s_mm(JointGroupDim + 2 * RobotAxis, 1, RobotAxis * SampleNum, pinv, regressorForces, estParas);


		/*
		std::ofstream outfile("C:/Users/gk/Desktop/Kaanh_gk/EstParas.txt");
		if (!outfile)
		{
			std::cout << "Unable to open otfile";
			exit(1); // terminate with error
		}

		for (int i = 0;i < 3 * SampleNum*TotalParas;i++)
			outfile << regressorVector[i] << std::endl;

		outfile.close();
		*/

		//Calculate Model Error
		std::vector<double> Error_vec(RobotAxis * SampleNum);
		auto Error = Error_vec.data();

		s_mm(RobotAxis * SampleNum, 1, JointGroupDim + 12, QwithFric, estParas, Error);
		for (int i = 0;i < RobotAxis*SampleNum;i++)
			Error[i] = Error[i] - regressorForces[i];

		double SumError[RobotAxis] = { 0 };
		for (int j = 0;j < 6;j++)
			for (int i = 0;i < SampleNum;i++)
				SumError[j] = SumError[j] + Error[i * 6 + j] * Error[i * 6 + j];

		for (int j = 0;j < RobotAxis;j++)
			StatisError[j] = sqrt(SumError[j] / SampleNum);
	}

void jointdynamics::RLStemp(const double *positionL, const double *sensorL, double *estParas, const double *Coef, const double *CoefInv, double *StatisError)
	{

        double CutFreq = 5;
		A[0][0] = 0; A[0][1] = 1; A[0][2] = 0;
		A[1][0] = 0; A[1][1] = 0; A[1][2] = 1;
		A[2][0] = -CutFreq * CutFreq * CutFreq;
		A[2][1] = -2 * CutFreq * CutFreq;
		A[2][2] = -2 * CutFreq;
		B[0] = 0; B[1] = 0;
		B[2] = -A[2][0];



		//positionList[id(2, 2, 6)];
		double stateMot0[RobotAxis][3] = { 0 };
		double stateMot1[RobotAxis][3] = { 0 };
		double stateTor0[RobotAxis][3] = { 0 };
		double stateTor1[RobotAxis][3] = { 0 };



		double q[RobotAxis];
		double dq[RobotAxis];
		double ddq[RobotAxis];
		double ts[RobotAxis];
		//std::array<double, 6> estParas;

		double intDT = 8 * DT;
		int length = 6;
		std::vector<double> regressorMatrix_vec(RobotAxis * SampleNum * JointReduceDim);
		double* regressorVector = regressorMatrix_vec.data();

		std::vector<double> regressorMatrixFric_vec(6 * SampleNum * 12);
		double* regressorVectorFric = regressorMatrixFric_vec.data();

		std::vector<double> regressorForces_vec(RobotAxis * SampleNum);
		double* regressorForces = regressorForces_vec.data();

		double posCur[RobotAxis];
		double torCur[RobotAxis];
		for (int j = 0; j < RobotAxis; j++)
		{
			stateMot0[j][0] = positionL[j];
			stateTor0[j][0] = sensorL[j];
		}

		for (int i = 0; i < SampleNum; i++)
		{

			for (int j = 0; j < RobotAxis; j++)
			{

				posCur[j] = positionL[RobotAxis*i + j];
				torCur[j] = sensorL[RobotAxis*i + j];

				stateMot1[j][0] = stateMot0[j][0] + intDT * (A[0][0] * stateMot0[j][0] + A[0][1] * stateMot0[j][1] + A[0][2] * stateMot0[j][2] + B[0] * posCur[j]);
				stateMot1[j][1] = stateMot0[j][1] + intDT * (A[1][0] * stateMot0[j][0] + A[1][1] * stateMot0[j][1] + A[1][2] * stateMot0[j][2] + B[1] * posCur[j]);
				stateMot1[j][2] = stateMot0[j][2] + intDT * (A[2][0] * stateMot0[j][0] + A[2][1] * stateMot0[j][1] + A[2][2] * stateMot0[j][2] + B[2] * posCur[j]);

				stateTor1[j][0] = stateTor0[j][0] + intDT * (A[0][0] * stateTor0[j][0] + A[0][1] * stateTor0[j][1] + A[0][2] * stateTor0[j][2] + B[0] * torCur[j]);
				stateTor1[j][1] = stateTor0[j][1] + intDT * (A[1][0] * stateTor0[j][0] + A[1][1] * stateTor0[j][1] + A[1][2] * stateTor0[j][2] + B[1] * torCur[j]);
				stateTor1[j][2] = stateTor0[j][2] + intDT * (A[2][0] * stateTor0[j][0] + A[2][1] * stateTor0[j][1] + A[2][2] * stateTor0[j][2] + B[2] * torCur[j]);
			}

			for (int j = 0; j < RobotAxis; j++)
			{
				q[j] = stateMot1[j][0];
				dq[j] = stateMot1[j][1];
				ddq[j] = stateMot1[j][2];
				ts[j] = stateTor1[j][0];
			}

			for (int k = 0; k < RobotAxis; k++)
			{
				q[k] = q[k] * DirectionFlag[k] + JointOffset[k] + ZeroOffset[k];
				dq[k] = dq[k] * DirectionFlag[k];
				ddq[k] = ddq[k] * DirectionFlag[k];

			}
			double distalVec[RobotAxis * JointReduceDim];
			JointReducedMatrix(q, dq, ddq, ts, CoefInv, distalVec);
			double Y[RobotAxis][JointReduceDim];
			for (int m = 0; m < RobotAxis; m++)
				for (int n = 0; n < JointReduceDim; n++)
					Y[m][n] = distalVec[JointReduceDim * m + n];

			double Y1[RobotAxis][2 * RobotAxis];
			for (int m = 0; m < RobotAxis; m++)
			{
				for (int n = 0; n < 2 * RobotAxis; n++)
				{
					Y1[m][n] = 0;
					if (n == 2 * m)
						Y1[m][n] = 1 * sign(dq[m]);
					if (n == 2 * m + 1)
						Y1[m][n] = dq[m];
				}
			}



			for (int m = 0; m < RobotAxis; m++)
			{
				for (int n = 0; n < JointReduceDim; n++)
				{
					regressorVector[(i * RobotAxis + m)*JointReduceDim + n] = Y[m][n];

				}

				for (int n = 0; n < 12; n++)
				{
					regressorVectorFric[(i * RobotAxis + m) * 12 + n] = Y1[m][n];

				}


				regressorForces[i * RobotAxis + m] = ts[m];

			}

			for (int j = 0; j < RobotAxis; j++)
			{

				stateMot0[j][0] = stateMot1[j][0];
				stateMot0[j][1] = stateMot1[j][1];
				stateMot0[j][2] = stateMot1[j][2];

				stateTor0[j][0] = stateTor1[j][0];
				stateTor0[j][1] = stateTor1[j][1];
				stateTor0[j][2] = stateTor1[j][2];
			}
			std::cout << i << std::endl;
		}

		// 所需的中间变量，请对U的对角线元素做处理
        aris::Size rank;

		std::vector<double> QwithFric_vec(RobotAxis * SampleNum * (JointReduceDim + 2 * RobotAxis));
		auto QwithFric = QwithFric_vec.data();
		for (int i = 0;i < RobotAxis * SampleNum;i++)
		{
			for (int j = 0;j < JointReduceDim;j++)
				QwithFric[i*(JointReduceDim + 2 * RobotAxis) + j] = regressorVector[i*JointReduceDim + j];
			for (int j = JointReduceDim;j < JointReduceDim + 2 * RobotAxis;j++)
				QwithFric[i*(JointReduceDim + 2 * RobotAxis) + j] = regressorVectorFric[i * 2 * RobotAxis + j - JointReduceDim];
		}

		// 求解 A的广义逆pinv 和 x
		std::vector<double> pinv_vec(RobotAxis * SampleNum * (JointReduceDim + 2 * RobotAxis));
		auto pinv = pinv_vec.data();

		// 所需的中间变量，请对U的对角线元素做处理
		std::vector<double> UQ_vec(RobotAxis * SampleNum * (JointReduceDim + 2 * RobotAxis));
		auto UQ = UQ_vec.data();

		std::vector<double> tauQ_vec(RobotAxis * SampleNum);
		auto tauQ = tauQ_vec.data();

		std::vector<aris::Size> pQ_vec(RobotAxis * SampleNum);
		auto pQ = pQ_vec.data();

		aris::Size rankQ;

		s_householder_utp(RobotAxis * SampleNum, JointReduceDim + 2 * RobotAxis, QwithFric, UQ, tauQ, pQ, rankQ, 1e-10);

		// 根据QR分解的结果求广义逆，相当于Matlab中的 pinv(A) //
		std::vector<double> tauQ2_vec(RobotAxis * SampleNum);
		auto tauQ2 = tauQ2_vec.data();

		s_householder_utp2pinv(RobotAxis * SampleNum, JointReduceDim + 2 * RobotAxis, rankQ, UQ, tauQ, pQ, pinv, tauQ2, 1e-10);
		// 根据QR分解的结果求广义逆，相当于Matlab中的 pinv(A)*b //
		s_mm(JointReduceDim + 2 * RobotAxis, 1, RobotAxis * SampleNum, pinv, regressorForces, estParas);


		/*
		std::ofstream outfile("C:/Users/gk/Desktop/Kaanh_gk/EstParas.txt");
		if (!outfile)
		{
			std::cout << "Unable to open otfile";
			exit(1); // terminate with error
		}

		for (int i = 0;i < 3 * SampleNum*TotalParas;i++)
			outfile << regressorVector[i] << std::endl;

		outfile.close();
		*/

		//Calculate Model Error
		std::vector<double> Error_vec(RobotAxis * SampleNum);
		auto Error = Error_vec.data();

		s_mm(RobotAxis * SampleNum, 1, JointReduceDim + 12, QwithFric, estParas, Error);
		for (int i = 0;i < RobotAxis*SampleNum;i++)
			Error[i] = Error[i] - regressorForces[i];

		double SumError[RobotAxis] = { 0 };
		for (int j = 0;j < 6;j++)
			for (int i = 0;i < SampleNum;i++)
				SumError[j] = SumError[j] + Error[i * 6 + j] * Error[i * 6 + j];


		for (int j = 0;j < RobotAxis;j++)
			StatisError[j] = sqrt(SumError[j] / SampleNum);


	}


int signDrag(double x,double margin)
{

    if (x > margin) return 1;
    if (abs(x) < margin||abs(x)==margin) return 0;
    if (x < -margin) return -1;
}


void jointdynamics::JointCollision(const double * q, const double *dq, const double *ddq, const double *ts, const double *estParas, const double * CoefInv, const double * Coef, const double * LoadParas, double * CollisionFT, const double* Acv)
{

	double q0[6], dq0[6], ddq0[6];
	for (int k = 0; k < RobotAxis; k++)
	{
		q0[k] = q[k] * DirectionFlag[k] + JointOffset[k] + ZeroOffset[k];
		dq0[k] = dq[k] * DirectionFlag[k];
		ddq0[k] = ddq[k] * DirectionFlag[k];

	}

	double distalVec[RobotAxis * JointGroupDim];
	JointMatrix(q0, dq0, ddq0, ts, distalVec);
	std::vector<double> Ybase_vec(RobotAxis * JointReduceDim);
	auto Ybase = Ybase_vec.data();
	s_mm(RobotAxis, JointReduceDim, JointGroupDim, distalVec, CoefInv, Ybase);


	double YbaseMat[RobotAxis][JointReduceDim];
	for (int m = 0; m < RobotAxis; m++)
		for (int n = 0; n < JointReduceDim; n++)
			YbaseMat[m][n] = Ybase[JointReduceDim * m + n];

	double Y1[RobotAxis][2 * RobotAxis];
	for (int m = 0; m < RobotAxis; m++)
	{
		for (int n = 0; n < 2 * RobotAxis; n++)
		{
			Y1[m][n] = 0;
			if (n == 2 * m)
				Y1[m][n] = 1 * sign(dq0[m]);
			if (n == 2 * m + 1)
				Y1[m][n] = dq0[m];
		}
	}

	double YtolMat[RobotAxis][JointReduceDim + 2 * RobotAxis];

	for (int m = 0; m < RobotAxis; m++)
	{
		for (int n = 0; n < JointReduceDim; n++)
		{
			YtolMat[m][n] = YbaseMat[m][n];
		}

		for (int n = JointReduceDim; n < JointReduceDim + 2 * RobotAxis; n++)
		{
			YtolMat[m][n] = Y1[m][n - JointReduceDim];
		}
	}

    /*
	//根据负载更新全臂动力学参数
	double CoefMat[JointReduceDim][JointGroupDim];
	for (int m = 0; m < JointReduceDim; m++)
		for (int n = 0; n < JointGroupDim; n++)
			CoefMat[m][n] = Coef[m*JointGroupDim + n];
	double dParas[JointReduceDim] = { 0 };
	for (int m = 0; m < JointReduceDim; m++)
		for (int n = 0; n < 10; n++)
			dParas[m] = dParas[m] + CoefMat[m][50 + n] * LoadParas[n];
	double estParasTol[JointReduceDim + 2 * RobotAxis];

	for (int m = 0; m < JointReduceDim + 2 * RobotAxis; m++)
		estParasTol[m] = estParas[m];
	for (int m = 0; m < JointReduceDim; m++)
        estParasTol[m] = estParas[m] + 0*dParas[m];
    */

	double estTor[RobotAxis] = { 0, 0, 0, 0, 0, 0 };
	for (int i = 0; i < RobotAxis; i++)
		for (int j = 0; j < JointReduceDim + 2 * RobotAxis; j++)
            estTor[i] = estTor[i] + YtolMat[i][j] * estParas[j];

	for (int i = 0; i < 6; i++)
		CollisionFT[i] = estTor[i];


}

void jointdynamics::JointCollisionYang(const double * q, const double *dq, const double *ddq, const double *ts, const double *estParas, const double * LoadParas, double * CollisionFT, const double* Acv)
{

	double q0[6], dq0[6], ddq0[6];
	for (int k = 0; k < RobotAxis; k++)
	{
		q0[k] = q[k] * DirectionFlag[k] + JointOffset[k] + ZeroOffset[k];
		dq0[k] = dq[k] * DirectionFlag[k];
		ddq0[k] = ddq[k] * DirectionFlag[k];

	}

    double estParasWithLoad[JointGroupDim + 2 * RobotAxis] = { 0 };

	for (int i = 0;i < JointGroupDim + 2 * RobotAxis;i++)
		estParasWithLoad[i] = estParas[i];
	for (int i = 50;i < JointGroupDim;i++)
		estParasWithLoad[i] = estParas[i]+LoadParas[i-50];

	double distalVec[RobotAxis * JointGroupDim];
	JointMatrix(q0, dq0, ddq0, ts, distalVec);
	

	double YYMat[RobotAxis][JointGroupDim];
	for (int m = 0; m < RobotAxis; m++)
		for (int n = 0; n < JointGroupDim; n++)
			YYMat[m][n] = distalVec[JointGroupDim * m + n];

	double Y1[RobotAxis][2 * RobotAxis];
	for (int m = 0; m < RobotAxis; m++)
	{
		for (int n = 0; n < 2 * RobotAxis; n++)
		{
			Y1[m][n] = 0;
			if (n == 2 * m)
				Y1[m][n] = 1 * sign(dq0[m]);
			if (n == 2 * m + 1)
				Y1[m][n] = dq0[m];
		}
	}

	double YtolMat[RobotAxis][JointGroupDim + 2 * RobotAxis];

	for (int m = 0; m < RobotAxis; m++)
	{
		for (int n = 0; n < JointGroupDim; n++)
		{
			YtolMat[m][n] = YYMat[m][n];
		}

		for (int n = JointGroupDim; n < JointGroupDim + 2 * RobotAxis; n++)
		{
			YtolMat[m][n] = Y1[m][n - JointGroupDim];
		}
	}

	double estTor[RobotAxis] = { 0, 0, 0, 0, 0, 0 };
	for (int i = 0; i < RobotAxis; i++)
		for (int j = 0; j < JointGroupDim + 2 * RobotAxis; j++)
			estTor[i] = estTor[i] + YtolMat[i][j] * estParasWithLoad[j];

	for (int i = 0; i < 6; i++)
		CollisionFT[i] = estTor[i];


}


void jointdynamics::JointCollisionAris(const double * q, const double *dq, const double *ddq, const double *ts, const double *estParas, const double * CoefInv, const double * Coef, const double * LoadParas, double * CollisionFT, const double* Acv)
{
    // 创建机器人 //
    aris::dynamic::PumaParam param;
    param.d1 = 0.3295;
    param.a1 = 0.04;
    param.a2 = 0.275;
    param.d3 = 0.0;
    param.a3 = 0.025;
    param.d4 = 0.28;

    auto m = aris::dynamic::createModelPuma(param);

    // 为已有机器人添加 辨识器，也可以在xml里定义
    auto &clb = m->calibratorPool().add<aris::dynamic::Calibrator>();
    //auto &clb = m->calibratorPool()[0];

    // 以下代码为辨识器分配内存
    for (auto &ee : m->generalMotionPool())ee.activate(false);
    clb.allocateMemory();


    double q0[6], dq0[6], ddq0[6];
    for (int k = 0; k < RobotAxis; k++)
    {
        q0[k] = q[k] * DirectionFlag[k] + JointOffset[k] + ZeroOffset[k];
        dq0[k] = dq[k] * DirectionFlag[k];
        ddq0[k] = ddq[k] * DirectionFlag[k];

    }

    // 设置当前电机的位置、速度、加速度
    for (int i = 0; i < m->motionPool().size(); ++i)
    {
        m->motionPool()[i].setMp(q0[i]);
        m->motionPool()[i].setMv(dq0[i]);
        m->motionPool()[i].setMa(ddq0[i]);

    }

    m->solverPool().at(1).kinPos();
    m->solverPool().at(1).kinVel();
    m->solverPool().at(1).dynAccAndFce();

    // 设置当前电机的力
    for (int i = 0; i < m->motionPool().size(); ++i)
    {
        m->motionPool()[i].setMf(ts[i]);
    }

    // 开始辨识 //
    clb.clb();

    double distalVec[RobotAxis * JointGroupDim];
    double Y[RobotAxis][JointGroupDim];
    for (int m = 0; m < RobotAxis; m++)
        for (int n = 0; n < JointGroupDim; n++)
            Y[m][n]= clb.A()[JointGroupDim * m + n];
    //dsp(clb.m(), clb.n(), clb.A());


    JointMatrix(q0, dq0, ddq0, ts, distalVec);
    std::vector<double> Ybase_vec(RobotAxis * JointReduceDim);
    auto Ybase = Ybase_vec.data();
    s_mm(RobotAxis, JointReduceDim, JointGroupDim, distalVec, CoefInv, Ybase);


    double YbaseMat[RobotAxis][JointReduceDim];
    for (int m = 0; m < RobotAxis; m++)
        for (int n = 0; n < JointReduceDim; n++)
            YbaseMat[m][n] = Ybase[JointReduceDim * m + n];

    double Y1[RobotAxis][2 * RobotAxis];
    for (int m = 0; m < RobotAxis; m++)
    {
        for (int n = 0; n < 2 * RobotAxis; n++)
        {
            Y1[m][n] = 0;
            if (n == 2 * m)
                Y1[m][n] = 1 * sign(dq0[m]);
            if (n == 2 * m + 1)
                Y1[m][n] = dq0[m];
        }
    }

    double YtolMat[RobotAxis][JointReduceDim + 2 * RobotAxis];

    for (int m = 0; m < RobotAxis; m++)
    {
        for (int n = 0; n < JointReduceDim; n++)
        {
            YtolMat[m][n] = YbaseMat[m][n];
        }

        for (int n = JointReduceDim; n < JointReduceDim + 2 * RobotAxis; n++)
        {
            YtolMat[m][n] = Y1[m][n - JointReduceDim];
        }
    }

    //根据负载更新全臂动力学参数
    double CoefMat[JointReduceDim][JointGroupDim];
    for (int m = 0; m < JointReduceDim; m++)
        for (int n = 0; n < JointGroupDim; n++)
            CoefMat[m][n] = Coef[m*JointGroupDim + n];
    double dParas[JointReduceDim] = { 0 };
    for (int m = 0; m < JointReduceDim; m++)
        for (int n = 0; n < 10; n++)
            dParas[m] = dParas[m] + CoefMat[m][50 + n] * LoadParas[n];
    double estParasTol[JointReduceDim + 2 * RobotAxis];

    for (int m = 0; m < JointReduceDim + 2 * RobotAxis; m++)
        estParasTol[m] = estParas[m];
    for (int m = 0; m < JointReduceDim; m++)
        estParasTol[m] = estParas[m] + dParas[m];


    double estTor[RobotAxis] = { 0, 0, 0, 0, 0, 0 };
    for (int i = 0; i < RobotAxis; i++)
        for (int j = 0; j < JointReduceDim + 2 * RobotAxis; j++)
            estTor[i] = estTor[i] + YtolMat[i][j] * estParasTol[j];

    for (int i = 0; i < 6; i++)
        CollisionFT[i] = estTor[i];


}


void jointdynamics::JointDrag(const double * q, const double *dq,const double *ddq,const double *ts, const double *estParas, const double * CoefInv, const double * Coef, const double * LoadParas, double * CollisionFT,const double* Acv)
        {
   
			double q0[6], dq0[6], ddq0[6];
			for (int k = 0; k < RobotAxis; k++)
			{
				q0[k] = q[k] * DirectionFlag[k] + JointOffset[k] + ZeroOffset[k];
                dq0[k] = 0*dq[k] * DirectionFlag[k];
				ddq0[k] = ddq[k] * DirectionFlag[k];

			}

			double distalVec[RobotAxis * JointGroupDim];
			JointMatrix(q0, dq0, ddq0, ts, distalVec);
			std::vector<double> Ybase_vec(RobotAxis * JointReduceDim);
			auto Ybase = Ybase_vec.data();
			s_mm(RobotAxis, JointReduceDim, JointGroupDim, distalVec, CoefInv, Ybase);


			double YbaseMat[RobotAxis][JointReduceDim];
			for (int m = 0; m < RobotAxis; m++)
				for (int n = 0; n < JointReduceDim; n++)
					YbaseMat[m][n] = Ybase[JointReduceDim * m + n];

			double Y1[RobotAxis][2 * RobotAxis];
			for (int m = 0; m < RobotAxis; m++)
			{
				for (int n = 0; n < 2 * RobotAxis; n++)
				{
					Y1[m][n] = 0;
					if (n == 2 * m)
                        Y1[m][n] = 1 * sign(dq[m]);
					if (n == 2 * m + 1)
                        Y1[m][n] = dq[m];
				}
			}

			double YtolMat[RobotAxis][JointReduceDim+2* RobotAxis];

			for (int m = 0; m < RobotAxis; m++)
			{
				for (int n = 0; n < JointReduceDim; n++)
				{
					YtolMat[m][n] = YbaseMat[m][n];
				}

				for (int n = JointReduceDim; n < JointReduceDim + 2 * RobotAxis; n++)
				{
                    YtolMat[m][n] = Y1[m][n-JointReduceDim];
				}
			}
			
            /*
			//根据负载更新全臂动力学参数
			double CoefMat[JointReduceDim][JointGroupDim];
			for (int m = 0; m < JointReduceDim; m++)
				for (int n = 0; n < JointGroupDim; n++)
					CoefMat[m][n] = Coef[m*JointGroupDim + n];
			double dParas[JointReduceDim] = { 0 };
			for (int m = 0; m < JointReduceDim; m++)
				for (int n = 0; n < 10; n++)
					dParas[m] = dParas[m] + CoefMat[m][50+n]* LoadParas[n];
			double estParasTol[JointReduceDim + 2 * RobotAxis];
*/
            double estParasTol[JointReduceDim + 2 * RobotAxis];
			for (int m = 0; m < JointReduceDim + 2 * RobotAxis; m++)
				estParasTol[m] = estParas[m];
			for (int m = 0; m < JointReduceDim; m++)
                estParasTol[m] = estParas[m];
			for (int m = JointReduceDim; m < JointReduceDim + 2 * RobotAxis; m++)
                estParasTol[m] = estParas[m]*Acv[m-JointReduceDim];

			double estTor[RobotAxis] = { 0, 0, 0, 0, 0, 0 };
            for (int i = 0; i < RobotAxis; i++)
                for (int j = 0; j < JointReduceDim + 2 * RobotAxis; j++)
                    estTor[i] = estTor[i] + YtolMat[i][j] * estParasTol[j];

            for (int i = 0; i < 6; i++)
                CollisionFT[i] = estTor[i];


        }

void jointdynamics::JointDragYang(const double * q, const double *dq, const double *ddq, const double *ts, const double *estParas, const double * LoadParas, double * CollisionFT, const double* Acv)
{

	double q0[6], dq0[6], ddq0[6];
	for (int k = 0; k < RobotAxis; k++)
	{
		q0[k] = q[k] * DirectionFlag[k] + JointOffset[k] + ZeroOffset[k];
		dq0[k] = dq[k] * DirectionFlag[k];
		ddq0[k] = ddq[k] * DirectionFlag[k];

	}

	double distalVec[RobotAxis * JointGroupDim];
	JointMatrix(q0, dq0, ddq0, ts, distalVec);


	double YYMat[RobotAxis][JointGroupDim];
	for (int m = 0; m < RobotAxis; m++)
		for (int n = 0; n < JointGroupDim; n++)
			YYMat[m][n] = distalVec[JointGroupDim * m + n];

	double Y1[RobotAxis][2 * RobotAxis];
    double margin[6]={0.01,0.01,0.01,0.01,02,0.01};
	for (int m = 0; m < RobotAxis; m++)
	{
		for (int n = 0; n < 2 * RobotAxis; n++)
		{
			Y1[m][n] = 0;
			if (n == 2 * m)
                Y1[m][n] = 1 * signDrag(dq[m],margin[m]);
			if (n == 2 * m + 1)
				Y1[m][n] = dq[m];
		}
	}

	double YtolMat[RobotAxis][JointGroupDim + 2 * RobotAxis];

	for (int m = 0; m < RobotAxis; m++)
	{
		for (int n = 0; n < JointGroupDim; n++)
		{
			YtolMat[m][n] = YYMat[m][n];
		}

		for (int n = JointGroupDim; n < JointGroupDim + 2 * RobotAxis; n++)
		{
			YtolMat[m][n] = Y1[m][n - JointGroupDim];
		}
	}

	
	double estParasWithLoad[JointGroupDim + 2 * RobotAxis];
	for (int i = 0;i < JointGroupDim + 2 * RobotAxis;i++)
		estParasWithLoad[i] = estParas[i];
	for (int i = 50;i < JointGroupDim;i++)
		estParasWithLoad[i] = estParas[i] + LoadParas[i - 50];
	for (int i = JointGroupDim;i < JointGroupDim + 2 * RobotAxis;i++)
		estParasWithLoad[i] = estParas[i]* Acv[i-JointGroupDim];
	

	double estTor[RobotAxis] = { 0, 0, 0, 0, 0, 0 };
	for (int i = 0; i < RobotAxis; i++)
		for (int j = 0; j < JointGroupDim + 2 * RobotAxis; j++)
			estTor[i] = estTor[i] + YtolMat[i][j] * estParasWithLoad[j];

	for (int i = 0; i < 6; i++)
		CollisionFT[i] = estTor[i];


}



void LoadMatrix(const double* q, const double* dq, const double* ddq, const double* ts, double* distalVec)
{
	double q1, q2, q3, q4, q5, q6;
	double dq1, dq2, dq3, dq4, dq5, dq6;
	double ddq1, ddq2, ddq3, ddq4, ddq5, ddq6;
	double ts1, ts2, ts3, ts4, ts5, ts6;
	double g = 9.81;
	

	q1 = q[0];
	q2 = q[1];
	q3 = q[2];
	q4 = q[3];
	q5 = q[4];
	q6 = q[5];

    dq1 = dq[0]; dq2 = dq[1]; dq3 = dq[2]; dq4 = dq[3]; dq5 = dq[4]; dq6 = dq[5];
    ddq1 = ddq[0]; ddq2 = ddq[1]; ddq3 = ddq[2]; ddq4 = ddq[3]; ddq5 = ddq[4]; ddq6 = ddq[5];

	ts1 = ts[0]; ts2 = ts[1]; ts3 = ts[2];

    double A0[3][LoadReduceParas];
	for (int i = 0; i < RobotAxis / 2; i++)
        for (int j = 0; j < LoadReduceParas; j++)
			A0[i][j] = 0;

	
	double DF=0;
	
    t2 = sin(q6);
    t3 = cos(q5);
    t4 = sin(q4);
    t5 = cos(q2);
    t6 = sin(q3);
    t7 = cos(q3);
    t8 = sin(q2);
    t9 = cos(q4);
    t10 = dq2+dq3;
    t11 = dq1*t5*t6;
    t12 = dq1*t7*t8;
    t13 = t11+t12;
    t14 = sin(q5);
    t15 = t4*t10;
    t16 = t9*t13;
    t17 = t15+t16;
    t18 = dq1*t6*t8;
    t22 = dq1*t5*t7;
    t19 = dq4+t18-t22;
    t20 = cos(q6);
    t21 = t9*t10;
    t23 = ddq1*t5;
    t37 = dq1*dq2*t8;
    t24 = t23-t37;
    t25 = ddq1*t8;
    t26 = dq1*dq2*t5;
    t27 = t25+t26;
    t28 = t14*t17;
    t29 = t3*t19;
    t30 = t3*t17;
    t42 = t14*t19;
    t31 = t30-t42;
    t32 = t2*t31;
    t41 = t4*t13;
    t33 = dq5+t21-t41;
    t62 = t20*t33;
    t34 = t32-t62;
    t35 = t18-t22;
    t36 = t7*t27;
    t38 = t6*t24;
    t49 = dq3*t35;
    t39 = t36+t38-t49;
    t40 = ddq2+ddq3;
    t43 = dq6+t28+t29;
    t44 = t2*t33;
    t45 = t20*(t30-t42);
    t46 = t44+t45;
    t47 = t21-t41;
    t48 = dq4*t47;
    t50 = t9*t39;
    t51 = t4*t40;
    t52 = t48+t50+t51;
    t53 = dq3*t13;
    t54 = t6*t27;
    t68 = t7*t24;
    t55 = ddq4+t53+t54-t68;
    t56 = t14*t55;
    t57 = t28+t29;
    t58 = dq5*t57;
    t59 = t56+t58-t3*t52;
    t60 = t9*t40;
    t64 = dq4*t17;
    t65 = t4*t39;
    t61 = ddq5+t60-t64-t65;
    t63 = t32-t62;
    t66 = dq1*dq1;
    t67 = t33*t33;
    t69 = a3*dq2;
    t70 = d3*dq1*t8;
    t71 = t69+t70;
    t72 = t5*t5;
    t73 = a3*ddq2;
    t74 = d3*t27;
    t75 = a2*t8*t66;
    t76 = a3*t5*t8*t66;
    t89 = g*t5;
    t90 = d3*dq1*dq2*t5;
    t77 = t73+t74+t75+t76-t89-t90;
    t78 = t10*t10;
    t79 = -t18+t22;
    t80 = d4*t13;
    t81 = dq2*t71;
    t82 = g*t8;
    t83 = d3*t24;
    t84 = a2*t5*t66;
    t85 = a3*t66*t72;
    t86 = t81+t82+t83+t84+t85;
    t87 = t30-t42;
    t88 = t32-t62;
    t91 = t7*t77;
    t103 = a4*t79;
    t92 = t80-t103;
    t93 = t6*t86;
    t94 = a4*t40;
    t95 = t53+t54-t68;
    t96 = a4*t95;
    t97 = dq3*t79;
    t98 = t36+t38+t97;
    t99 = dq1*t8*t71;
    t100 = a4*t10*t13;
    t101 = d3*t66*t72;
    t102 = a4*t78;
    t104 = t7*t86;
    t105 = d4*t40;
    t112 = t6*t77;
    t113 = t79*t92;
    t106 = t102+t104+t105-t112-t113;
    t130 = d4*t78;
    t131 = t13*t92;
    t107 = t91+t93+t94-t130-t131;
    t108 = d4*t98;
    t109 = d4*t10*t79;
    t134 = a2*ddq1;
    t135 = a3*t24;
    t110 = t96+t99+t100+t101+t108+t109-t134-t135;
    t111 = t4*t110;
    t136 = t9*t106;
    t114 = t111-t136;
    t115 = t9*t98;
    t116 = t48+t51+t115;
    t117 = t14*t116;
    t118 = t3*t55;
    t119 = t43*t43;
    t120 = t46*t46;
    t121 = t32-t62;
    t122 = dq5*(t30-t42);
    t123 = t32-t62;
    t124 = t34*t43;
    t125 = dq6*t34;
    t126 = t43*t46;
    t127 = dq6*t46;
    t139 = t3*t116;
    t128 = t56+t58-t139;
    t138 = t4*t98;
    t129 = ddq5+t60-t64-t138;
    t132 = t3*t107;
    t133 = DF*t67;
    t137 = t30-t42;
    t140 = t2*t128;
    t141 = t20*t129;
    t142 = t2*t129;
    t143 = t14*t46*(t32-t62);
    t144 = t14*t107;
    t145 = t3*t114;
    t146 = DF*t128;
    t147 = DF*t33*t57;
    t154 = t9*t110;
    t155 = t4*t106;
    t148 = t146+t147-t154-t155;
    t152 = DF*t129;
    t153 = DF*t31*t57;
    t149 = t144+t145-t152-t153;
    t150 = t14*t114;
    t151 = t144+t145;
    t156 = t2*t148;
    t176 = t20*t149;
    t157 = t156-t176;
    t158 = t20*t148;
    t159 = t2*t149;
    t160 = t126-t127+t140+t141;
    t161 = t20*t128;
    t162 = t158+t159;
    t163 = t31*t57;
    t164 = t30-t42;
    t165 = t125-t142+t161;
    t166 = -t127+t140+t141;
    t167 = t17*t19;
    t168 = -t60+t64+t138+t167;
    t169 = t124-t125+t142-t161;
    t170 = t119-t120;
    t171 = t34*t46;
    t172 = t46*(t32-t62);
    t173 = ddq6+t117+t118+t122+t172;
    t174 = t32-t62;
    t175 = t30-t42;
    t177 = t20*t157;
    t178 = t47*t47;
    t179 = t30-t42;
    t180 = t119+t120;
    t181 = ddq6+t117+t118+t122-t171;
    t182 = t32-t62;
    t183 = t126+t127-t140-t141;
    t184 = t30-t42;
    t185 = t32-t62;
    t186 = t2*t43*t46;
    t187 = t19*t47;
    t188 = t32-t62;
    t189 = t2*t173;
    t190 = t154+t155;
    t191 = t132-t150;
    t192 = t30-t42;
    t193 = ddq5+t60-t64-t138+t163;
    t194 = t20*t162;
    t195 = t2*t157;
    t196 = t30-t42;
    t197 = dq5*t31;
    t198 = t124+t125-t142+t161;
    t199 = t2*t180;
    t215 = t20*t173;
    t200 = t199-t215;
    t201 = t2*t181;
    t202 = t32-t62;
    t203 = t19*t19;
    t204 = t57*t57;
    t205 = t67+t204;
    t206 = t32-t62;
    t207 = t20*t160;
    t208 = t32-t62;
    t209 = t14*t205;
    t210 = -ddq5-t60+t64+t138+t163;
    t211 = t30-t42;
    t212 = t32-t62;
    t213 = t20*t170;
    t214 = t32-t62;
    t216 = t32-t62;
    t217 = t2*t169;
    t218 = t30-t42;
    t219 = DF*t20*t173;
    t220 = -t60+t64+t138;
    t221 = t2*t166;
    t273 = t20*t34*t43;
    t222 = t221-t273;
    t223 = t3*t222;
    t224 = t143+t223;
    t225 = t20*t165;
    t226 = t186+t225;
    t317 = t3*t226;
    t227 = t143-t317;
    t228 = t3*t191;
    t229 = t14*t151;
    t230 = t228+t229;
    t231 = DF*t20*t160;
    t232 = DF*t2*t169;
    t233 = t177+t231+t232-t2*t162;
    t234 = t14*t31*t33;
    t235 = t14*t193;
    t236 = t30-t42;
    t237 = t2*t165;
    t238 = t20*t43*t46;
    t239 = t20*t166;
    t240 = t2*t43*(t32-t62);
    t241 = t17*t17;
    t242 = t178+t241;
    t243 = t2*t183;
    t244 = t20*t198;
    t245 = t243+t244;
    t246 = t17*t47;
    t247 = t238+t240;
    t248 = ddq4+t53+t54-t68+t246;
    t249 = t13*t13;
    t250 = t79*t79;
    t251 = t48+t51+t115+t187;
    t252 = t14*t169;
    t253 = t2*t170;
    t254 = t20*t181;
    t255 = t14*t160;
    t256 = t32-t62;
    t257 = t30-t42;
    t288 = t2*(t158+t159);
    t289 = t177-t288;
    t258 = t14*t289;
    t259 = t178-t203;
    t260 = t30-t42;
    t261 = DF*t2*t173;
    t262 = DF*t20*t180;
    t263 = t14*t157;
    t264 = t32-t62;
    t265 = t3*t183;
    t266 = t14*t200;
    t267 = t30-t42;
    t268 = DF*t20*t181;
    t269 = t32-t62;
    t270 = t14*t162;
    t271 = ddq6+t117+t118+t122;
    t272 = t14*t271;
    t274 = t2*t160;
    t339 = t20*t169;
    t275 = t274-t339;
    t276 = t60-t64-t138+t167;
    t277 = t48+t51+t115-t187;
    t278 = t32-t62;
    t279 = t20*t180;
    t280 = t189+t279;
    t281 = t3*t151;
    t341 = t14*t191;
    t282 = t281-t341;
    t283 = DF*t20*t162;
    t284 = DF*t2*t157;
    t285 = t30-t42;
    t286 = t3*t193;
    t287 = DF*t2*t160;
    t290 = t30-t42;
    t291 = t33*t57;
    t292 = t56+t58-t139+t291;
    t293 = t31*t33;
    t294 = t3*t200;
    t345 = t14*t198;
    t295 = t294-t345;
    t296 = t32-t62;
    t297 = t178+t203;
    t298 = t3*t205;
    t347 = t14*t210;
    t299 = t298-t347;
    t300 = t32-t62;
    t301 = t207+t217;
    t302 = t3*t301;
    t303 = t2*t198;
    t349 = t20*t183;
    t304 = t303-t349;
    t305 = t3*t304;
    t306 = t32-t62;
    t307 = t3*t210;
    t308 = t209+t307;
    t309 = t30-t42;
    t310 = DF*t2*t181;
    t311 = t32-t62;
    t312 = t201+t213;
    t313 = t32-t62;
    t314 = t32-t62;
    t315 = t14*t301;
    t316 = t30-t42;
    t318 = DF*t2*(t158+t159);
    t356 = DF*t20*t157;
    t319 = t318-t356;
    t357 = t3*t33*t57;
    t320 = t234-t357;
    t321 = t30-t42;
    t322 = t237-t238;
    t323 = t239+t240;
    t324 = ddq4+t53+t54-t68-t246;
    t325 = t203-t241;
    t326 = t253-t254;
    t361 = t3*t326;
    t327 = t252-t361;
    t328 = t32-t62;
    t329 = t30-t42;
    t330 = t30-t42;
    t331 = t32-t62;
    t332 = t3*(t124+t125-t142+t161);
    t333 = t266+t332;
    t334 = t30-t42;
    t335 = t32-t62;
    t336 = t186-t273;
    t337 = t3*t336;
    t338 = t272+t337;
    t340 = t32-t62;
    t342 = t30-t42;
    t343 = t3*t289;
    t344 = t30-t42;
    t346 = t32-t62;
    t348 = t32-t62;
    t350 = t32-t62;
    t351 = t30-t42;
    t352 = t32-t62;
    t353 = t32-t62;
    t354 = t32-t62;
    t355 = t30-t42;
    t358 = t30-t42;
    t359 = t20*(t124+t125-t142+t161);
    t360 = t243+t359;
    t362 = t32-t62;
    t363 = t30-t42;
    t364 = t14*(t177-t288);
    t365 = t30-t42;
    t366 = t32-t62;
    t367 = t30-t42;
    t368 = t32-t62;
    t369 = t32-t62;
    t370 = t283+t284;
    t371 = t194+t195;
    t372 = t30-t42;
    t393 = DF*t20*t169;
    t373 = t194+t195+t287-t393;
    t374 = t30-t42;
    t375 = t32-t62;
    t376 = t32-t62;
    t377 = t32-t62;
    t378 = t30-t42;
    t379 = t32-t62;
    t380 = t32-t62;
    t381 = t32-t62;
    t382 = t30-t42;
    t383 = t30-t42;
    t384 = t32-t62;
    t385 = t30-t42;
    t386 = t10*t79*2.220446049250313E-16;
    t387 = t30-t42;
    t388 = t32-t62;
    t389 = t30-t42;
    t390 = t32-t62;
    t391 = t32-t62;
    t392 = t30-t42;
    t394 = t30-t42;
    t395 = t117+t118+t197+t293;
    t396 = t32-t62;
    t397 = t32-t62;
    t398 = t32-t62;
    t399 = t3*(-ddq5-t60+t64+t138+t163);
    t400 = t209+t399;
    t401 = t30-t42;
    t402 = t32-t62;
    t403 = t32-t62;
    t404 = t32-t62;
    t405 = t30-t42;
    t406 = t177+t231+t232-t288;
    t407 = t30-t42;
    t408 = t32-t62;
    t409 = t30-t42;
    t410 = t30-t42;
    t411 = t32-t62;
    t412 = t30-t42;
    t413 = t32-t62;
    t414 = t32-t62;
    t415 = t30-t42;
    t416 = t30-t42;
    t417 = t32-t62;
    t418 = t32-t62;
    t419 = t32-t62;
    t420 = t30-t42;
    t421 = t32-t62;
    t422 = t32-t62;
    t423 = t32-t62;
    t424 = t14*(t207+t217);
    t425 = t30-t42;
    t426 = t30-t42;
    t427 = t250*2.220446049250313E-16;
    t428 = t32-t62;
    t429 = t30-t42;
    t430 = t30-t42;
    t431 = t32-t62;
    t432 = t30-t42;
    t433 = t32-t62;
    t434 = t32-t62;
    t435 = t30-t42;
    t436 = t30-t42;
    t437 = t32-t62;
    t438 = t32-t62;
    t439 = t32-t62;
    t440 = t30-t42;
    t441 = t32-t62;
    t442 = t32-t62;
    t443 = t32-t62;
    t444 = t30-t42;
    t445 = t30-t42;
    t446 = t32-t62;
    t447 = t30-t42;
    t448 = t30-t42;
    t449 = t32-t62;
    t450 = t30-t42;
    t451 = t32-t62;
    t452 = t32-t62;
    t453 = t30-t42;
    t454 = t30-t42;
    t455 = t32-t62;
    t456 = t32-t62;
    t457 = t32-t62;
    t458 = t30-t42;
    t459 = t32-t62;
    t460 = dq3*t13*1.110223024625157E-16;
    t461 = t32-t62;
    t462 = t32-t62;
    t463 = t30-t42;
    t464 = t6*t27*1.110223024625157E-16;
    t465 = t30-t42;
    t466 = t32-t62;
    t467 = t30-t42;
    t468 = t30-t42;
    t469 = t32-t62;
    t470 = t30-t42;
    t471 = t32-t62;
    t472 = t32-t62;
    t473 = t30-t42;
    t474 = t30-t42;
    t475 = t32-t62;
    t476 = t32-t62;
    t477 = t32-t62;
    t478 = t30-t42;
    t479 = t32-t62;
    t480 = t32-t62;
    t481 = t32-t62;
    t482 = t30-t42;
    t483 = t30-t42;
    t484 = t32-t62;
    t485 = t30-t42;
    t486 = t30-t42;
    t487 = t32-t62;
    t488 = t30-t42;
    t489 = t32-t62;
    t490 = t32-t62;
    t491 = t30-t42;
    t492 = t30-t42;
    t493 = t32-t62;
    t494 = t32-t62;
    t495 = t32-t62;
    t496 = t30-t42;
    t497 = t32-t62;
    t498 = t32-t62;
    t499 = t32-t62;
    t500 = t30-t42;
    t501 = t30-t42;
    t502 = t32-t62;
    t503 = t30-t42;
    t504 = t30-t42;
    t505 = t32-t62;
    t506 = t30-t42;
    t507 = t32-t62;
    t508 = t32-t62;
    t509 = t30-t42;
    t510 = t30-t42;
    t511 = t32-t62;
    t512 = t32-t62;
    t513 = t32-t62;
    t514 = t30-t42;
    t515 = t32-t62;
    t516 = t32-t62;
    t517 = t32-t62;
    t518 = t30-t42;
    t519 = t30-t42;
    t520 = t32-t62;
    t521 = t30-t42;
    t522 = t30-t42;
    t523 = t32-t62;
    t524 = t30-t42;
    t525 = t32-t62;
    t526 = t32-t62;
    t527 = t30-t42;
    t528 = t30-t42;
    t529 = t32-t62;
    t530 = t32-t62;
    t531 = t32-t62;
    t532 = t30-t42;
    t533 = t32-t62;
    t534 = t32-t62;
    t535 = t32-t62;
    t536 = t30-t42;
    t537 = t30-t42;
    t538 = t32-t62;
    t539 = t30-t42;
    t540 = t30-t42;
    t541 = t32-t62;
    t542 = t30-t42;
    t543 = t32-t62;
    t544 = t32-t62;
    t545 = t30-t42;
    t546 = t30-t42;
    t547 = t32-t62;
    t548 = t32-t62;
    t549 = t32-t62;
    t550 = t30-t42;
    t551 = t30-t42;
    t552 = t32-t62;
    t553 = t32-t62;
    t554 = t30-t42;
    t555 = t30-t42;
    t556 = t32-t62;
    t557 = t32-t62;
    t558 = t30-t42;
    t559 = t30-t42;
    t560 = t32-t62;
    t561 = t32-t62;
    t562 = t30-t42;
    t563 = t30-t42;
    t564 = t32-t62;
    t565 = t32-t62;
    t566 = t30-t42;
    t567 = t30-t42;
    t568 = t32-t62;
    t569 = t32-t62;
    t570 = t30-t42;
    t571 = t30-t42;
    t572 = t32-t62;
    t573 = t32-t62;
    t574 = t30-t42;
    t575 = t30-t42;
    t576 = t32-t62;
    t577 = t32-t62;
    t578 = t30-t42;
    t579 = t30-t42;
    t580 = t32-t62;
    t581 = t32-t62;
    t582 = t30-t42;
    t583 = t30-t42;
    t584 = t32-t62;
    t585 = t32-t62;
    t586 = t30-t42;
    t587 = t30-t42;
    t588 = t32-t62;
    t589 = t32-t62;
    t590 = t30-t42;
    t591 = t30-t42;
    t592 = t32-t62;
    t593 = t32-t62;
    t594 = t30-t42;
    t595 = t30-t42;
    t596 = t32-t62;
    t597 = t32-t62;
    t598 = t30-t42;
    t599 = t30-t42;
    t600 = t32-t62;
    t601 = t32-t62;
    t602 = t32-t62;
    t603 = t32-t62;
    t604 = t32-t62;
    t605 = t32-t62;
    t606 = t32-t62;
    t607 = t32-t62;
    t608 = t32-t62;
    t609 = t32-t62;
    t610 = t32-t62;
    t611 = t32-t62;
    t612 = t32-t62;
    t613 = t32-t62;
    A0[0][0] = ddq2*(-1.602843926565192E-2)-ddq3*1.602843926565192E-2+t249*7.395570986446988E-32-t250*7.395570986446988E-32-t4*(t272+t3*(t186-t20*t34*t43))*3.236148722176489E-3+a4*(t235+t3*(t67+t164*t164))*4.409593974683785E-1+t4*(t263-t3*(t261+t262-t20*(-t132+t133+t150+DF*(t179*t179))))*1.683674172863262E-1-t4*(t255-t3*(t189+t20*(t119-t174*t174)))*2.770866655375196E-2-a4*t107*1.080188212542064E-1+a4*t168*9.555270576660232E-2-a4*t230*1.080188212542064E-1+a4*t242*3.817737536536051E-1-dq3*t13*6.938893903907226E-17+dq3*t79*2.081668171172173E-17+t10*t13*6.938893903907226E-17+t6*t24*2.081668171172173E-17+t7*t24*6.938893903907226E-17-t6*t27*6.938893903907226E-17+t7*t27*2.081668171172173E-17+t6*t77*3.727978276648402E-1-t7*t77*9.475128380331974E-2-t10*t79*2.081668171172173E-17-t6*t86*9.475128380331974E-2-t7*t86*3.727978276648402E-1-t9*t107*9.555270576660232E-2-t4*t116*2.942509991507437E-17+t9*t114*3.817737536536051E-1-t9*t129*4.970248408425164E-2+t9*t151*4.409593974683785E-1+t4*t168*1.623475066854482E-17-t4*t190*3.817737536536051E-1+t4*t224*4.215928513213809E-2+t9*t220*1.602843926565188E-2-t4*t227*7.543198952113516E-3-t9*t233*4.409593974683785E-1-t9*t245*2.940732674575382E-2+t9*t247*3.236148722176489E-3-t9*t251*1.623475066854482E-17+t4*t259*1.015230403162122E-31-t4*t320*4.970248408425164E-2+t9*(DF*t2*t162-DF*t20*t157)*1.080188212542064E-1-t9*(t239+t2*t34*t43)*4.215928513213809E-2+t9*(t237-t20*t43*t46)*7.543198952113516E-3+t4*(t270-t3*(t268+t2*(-t132+t133+t150+DF*(t184*t184))-DF*t2*(t119+t185*t185)))*3.288365945939265E-1-t9*(t20*(ddq6+t117+t118+t122+t171)-t2*(t119-t121*t121))*2.770866655375196E-2+a4*(t3*(t120+t123*t123)+t14*(t207+t2*(t124-t125+t142-t20*t128)))*4.409593974683785E-1+t13*(t18-t22)*2.602085213965211E-17+t4*(t3*(t2*(t124+t125-t2*t61+t20*t59)-t20*(t126+t127-t2*t59-t20*t61))+t14*(t120-t63*t63))*2.940732674575382E-2+t4*(t252-t3*(t253-t20*t181))*6.735224297140334E-3+t9*(t219+t2*(-t132+t133+t150+DF*(t137*t137))-DF*t2*t180)*1.683674172863262E-1+t9*(ddq4+t53+t54-t68-t17*t47)*1.015230403162122E-31+a4*(t265+t14*(t201+t20*(t119+t182*t182)))*3.288365945939265E-1+a4*(t209+t3*(-ddq5-t60+t64+t65+t163))*3.609431031781951E-1+a4*(t266+t3*t198)*1.683674172863262E-1+t9*(t213+t2*(ddq6+t117+t118+t122-t34*t46))*6.735224297140334E-3-t9*(-t20*(t133+DF*(t87*t87)-t3*(t91+t93+t94-d4*t78-t13*(t80+a4*t35))+t14*(t4*(t96+t99+t100+t101-a2*ddq1-a3*t24+d4*t39-d4*t10*t35)-t9*t106))+DF*t2*(ddq6+t117+t118+t197-t34*t46)+DF*t20*(t119+t88*t88))*3.288365945939265E-1-t9*(t132-t14*t114)*3.609431031781951E-1+a4*(t258+t3*(-t132+t133+t150+DF*(t175*t175)))*1.080188212542064E-1-d4*t4*(t254-t2*(t119+t188*t188))*3.288365945939265E-1-d4*t9*(t286-t14*(t67+t192*t192))*4.409593974683785E-1-d4*t9*(t302-t14*(t120+t206*t206))*4.409593974683785E-1+t3*t4*(t194+t195+t287-DF*t20*(t124+t142-t161-dq6*(t32-t62)))*4.409593974683785E-1+d4*t9*t114*1.080188212542064E-1-d4*t4*t190*2.160376425084128E-1-d4*t4*t248*9.555270576660232E-2+d4*t4*t275*4.409593974683785E-1-d4*t4*t277*3.817737536536051E-1-d4*t4*t280*1.683674172863262E-1-d4*t9*t276*3.817737536536051E-1+d4*t9*t282*1.080188212542064E-1+d4*t4*t292*4.409593974683785E-1-d4*t9*t295*1.683674172863262E-1-d4*t9*t297*9.555270576660232E-2-d4*t9*t299*3.609431031781951E-1+d4*t4*t371*1.080188212542064E-1-d4*t4*t395*3.609431031781951E-1-t9*t17*t19*2.942509991507437E-17+t4*t19*t47*1.602843926565188E-2-t3*t4*t190*4.409593974683785E-1-t4*t14*t190*3.609431031781951E-1+t3*t4*t370*1.080188212542064E-1+d4*t9*(t14*(-t132+t133+t150+DF*(t196*t196))-t3*(t177-t2*t162))*1.080188212542064E-1-d4*t9*(t3*(t201+t20*(t119+t202*t202))-t14*t183)*3.288365945939265E-1;
    A0[0][1] = ddq2*7.506685738171857E-2+ddq3*7.506685738171857E-2+t249*5.551115123125783E-17-t250*5.551115123125783E-17+a4*(t235+t3*(t67+t236*t236))*2.285027328820862E-1+a4*(t315+t3*(t120+t216*t216))*2.285027328820861E-1+t4*(t263-t3*(t261+t262-t20*(-t132+t133+t150+DF*(t260*t260))))*6.495770060634155E-2+t4*(t255-t3*(t189+t20*(t119-t256*t256)))*1.425511796446178E-1-a4*t107*6.600263213023062E-2-a4*t168*1.950411887548864E-1-a4*t230*6.600263213023061E-2+a4*t242*2.31951798016116E-1-a4*t308*5.525398578095001E-1+a4*t333*6.495770060634155E-2-dq3*t13*2.822082015012166E-32+dq3*t79*1.144917494144694E-16+t10*t13*2.822082015012166E-32+t6*t24*1.144917494144694E-16+t7*t24*2.822082015012166E-32-t6*t27*2.822082015012166E-32+t7*t27*1.144917494144694E-16+t6*t77*2.739892381498785E-1+t7*t77*1.912878458858005E-1-t10*t79*1.144917494144694E-16+t6*t86*1.912878458858005E-1+t13*t79*1.266348137463068E-16-t7*t86*2.739892381498785E-1+t9*t107*1.950411887548864E-1-t4*t116*6.057570159541984E-32+t9*t114*2.31951798016116E-1+t9*t129*2.255115270442565E-1+t9*t151*2.285027328820862E-1-t4*t168*3.4129550974691E-32-t4*t190*2.31951798016116E-1+t9*t191*5.525398578095001E-1-t4*t224*2.009174052858258E-1-t9*t220*7.506685738171857E-2+t4*t227*2.45941217584307E-2-t9*t233*2.285027328820861E-1-t4*t248*2.686493594409009E-32-t9*t245*2.299375793262398E-2-t9*t247*1.176691522489075E-2+t9*t251*3.4129550974691E-32-t4*t259*7.52154675849306E-32+t9*t312*1.239290004698339E-2+t4*t320*2.255115270442565E-1+t9*t319*6.600263213023062E-2+t4*t327*1.239290004698339E-2-t9*t322*2.45941217584307E-2+t9*t323*2.009174052858258E-1-t9*t324*7.52154675849306E-32-t9*t325*2.686493594409009E-32+t4*t338*1.176691522489075E-2-t4*(t270-t3*(t268+t2*(-t132+t133+t150+DF*(t267*t267))-DF*t2*(t119+t269*t269)))*4.95217661627108E-1+t9*(t215-t2*(t119-t214*t214))*1.425511796446178E-1+t4*(t305+t14*(t120-t208*t208))*2.299375793262398E-2+t9*(t219+t2*(-t132+t133+t150+DF*(t218*t218))-DF*t2*t180)*6.495770060634155E-2-a4*(t265+t14*(t201+t20*(t119+t264*t264)))*4.95217661627108E-1+t9*(t310-t20*(-t132+t133+t150+DF*(t211*t211))+DF*t20*(t119+t212*t212))*4.95217661627108E-1+a4*(t258+t3*(-t132+t133+t150+DF*(t257*t257)))*6.600263213023062E-2-d4*t9*(t343-t14*(-t132+t133+t150+DF*(t290*t290)))*6.600263213023062E-2+d4*t4*(t254-t2*(t119+t278*t278))*4.95217661627108E-1-d4*t9*(t286-t14*(t67+t285*t285))*2.285027328820862E-1-d4*t9*(t302-t14*(t120+t300*t300))*2.285027328820861E-1+t3*t4*(t194+t195+t287-DF*t20*(t124+t142-t161-dq6*(t32-t62)))*2.285027328820861E-1+d4*t9*t114*6.600263213023062E-2-d4*t4*t190*1.320052642604612E-1+d4*t4*t248*1.950411887548864E-1+d4*t4*t275*2.285027328820861E-1-d4*t4*t277*2.31951798016116E-1-d4*t4*t280*6.495770060634155E-2-d4*t9*t276*2.31951798016116E-1+d4*t9*t282*6.600263213023061E-2+d4*t4*t292*2.285027328820862E-1-d4*t9*t295*6.495770060634155E-2+d4*t9*t297*1.950411887548864E-1+d4*t9*t299*5.525398578095001E-1+d4*t4*t371*6.600263213023062E-2+d4*t4*t395*5.525398578095001E-1-t9*t17*t19*6.057570159541984E-32-t4*t19*t47*7.506685738171857E-2-t3*t4*t190*2.285027328820862E-1+t4*t14*t190*5.525398578095001E-1+t3*t4*t370*6.600263213023062E-2+d4*t9*(t3*(t201+t20*(t119+t296*t296))-t14*t183)*4.95217661627108E-1;
    A0[0][2] = ddq2*(-3.881437313068791E-2)-ddq3*3.881437313068791E-2-t249*1.387778780781377E-17+t250*1.387778780781377E-17+t386-a4*(t235+t3*(t67+t321*t321))*4.449764835237123E-1-a4*(t315+t3*(t120+t314*t314))*4.449764835237126E-1-t4*(t263-t3*(t261+t262-t20*(-t132+t133+t150+DF*(t330*t330))))*9.557319382595281E-2-t4*(t255-t3*(t189+t20*(t119-t328*t328)))*5.832332699788399E-2-a4*t107*1.37031364809188E-1+a4*t168*1.433283306921033E-1-a4*t230*1.37031364809188E-1+a4*t242*4.875552227804932E-1-a4*t308*3.673614299596095E-2-a4*t333*9.557319382595281E-2+dq3*t13*2.220446049250313E-16-dq3*t79*2.220446049250313E-16-t10*t13*2.220446049250313E-16-t6*t24*2.220446049250313E-16-t7*t24*2.220446049250313E-16+t6*t27*2.220446049250313E-16-t7*t27*2.220446049250313E-16+t6*t77*4.658191738273077E-1-t7*t77*1.41387612035569E-1-t6*t86*1.41387612035569E-1-t13*t79*6.938893903907321E-18-t7*t86*4.658191738273077E-1-t9*t107*1.433283306921033E-1+t4*t116*5.37823942503825E-32+t9*t114*4.875552227804932E-1-t9*t129*5.441928004501005E-2-t9*t151*4.449764835237123E-1-t4*t168*2.274878442407277E-32-t4*t190*4.875552227804932E-1+t9*t191*3.673614299596095E-2+t4*t224*5.967870808060961E-2+t9*t220*3.881437313068792E-2+t4*t227*5.259428035599508E-3+t4*t248*9.821984371644739E-33-t9*t247*2.052223628212705E-3+t9*t251*2.274878442407277E-32-t4*t259*2.654130406601027E-31-t9*t312*4.322412204089501E-2-t4*t320*5.441928004501005E-2+t9*t319*1.37031364809188E-1-t4*t327*4.322412204089501E-2-t9*t322*5.259428035599508E-3-t9*t323*5.967870808060961E-2-t9*t324*2.654130406601027E-31+t9*t325*9.821984371644739E-33+t4*t338*2.052223628212705E-3+t9*t360*1.601628800082735E-1+t9*t406*4.449764835237126E-1-t4*(t270-t3*(t268+t2*(-t132+t133+t150+DF*(t334*t334))-DF*t2*(t119+t335*t335)))*3.813338088139938E-2-t9*(t215-t2*(t119-t313*t313))*5.832332699788399E-2-t4*(t305+t14*(t120-t306*t306))*1.601628800082735E-1-t9*(t219+t2*(-t132+t133+t150+DF*(t316*t316))-DF*t2*t180)*9.557319382595281E-2-a4*(t265+t14*(t201+t20*(t119+t331*t331)))*3.813338088139938E-2+t9*(t310-t20*(-t132+t133+t150+DF*(t309*t309))+DF*t20*(t119+t311*t311))*3.813338088139938E-2+a4*(t364+t3*(-t132+t133+t150+DF*(t329*t329)))*1.37031364809188E-1-d4*t9*(t343-t14*(-t132+t133+t150+DF*(t344*t344)))*1.37031364809188E-1+d4*t9*(t286-t14*(t67+t342*t342))*4.449764835237123E-1+d4*t4*(t254-t2*(t119+t340*t340))*3.813338088139938E-2+d4*t9*(t302-t14*(t120+t348*t348))*4.449764835237126E-1+d4*t9*t114*1.37031364809188E-1-d4*t4*t190*2.74062729618376E-1-d4*t4*t248*1.433283306921033E-1-d4*t4*t275*4.449764835237126E-1-d4*t4*t277*4.875552227804932E-1+d4*t4*t280*9.557319382595281E-2-d4*t9*t276*4.875552227804932E-1+d4*t9*t282*1.37031364809188E-1-d4*t4*t292*4.449764835237123E-1+d4*t9*t295*9.557319382595281E-2-d4*t9*t297*1.433283306921033E-1+d4*t9*t299*3.673614299596095E-2+d4*t4*t371*1.37031364809188E-1+d4*t4*t395*3.673614299596095E-2+t9*t17*t19*5.37823942503825E-32+t4*t19*t47*3.881437313068792E-2+t3*t4*t190*4.449764835237123E-1+t4*t14*t190*3.673614299596095E-2+t3*t4*t370*1.37031364809188E-1-t3*t4*t373*4.449764835237126E-1+d4*t9*(t3*(t201+t20*(t119+t346*t346))-t14*t183)*3.813338088139938E-2;
    A0[0][3] = ddq2*(-1.620494880894662E-2)-ddq3*1.620494880894662E-2-t249*1.700029006457273E-16+t250*1.700029006457273E-16+t460+t464-a4*(t235+t3*(t67+t358*t358))*1.267241057617371E-1-a4*(t315+t3*(t120+t354*t354))*1.267241057617371E-1+t4*(t263-t3*(t261+t262-t20*(-t132+t133+t150+DF*(t365*t365))))*9.733454286329098E-1-t4*(t255-t3*(t189+t20*(t119-t362*t362)))*7.106514150923243E-2+a4*t107*1.06790656330653E-2-a4*t168*9.418695474940579E-3+a4*t230*1.067906563306531E-2-a4*t242*3.272500773773137E-2-a4*t308*9.273913560348254E-3+a4*t333*9.733454286329098E-1+dq3*t79*6.938893903907226E-17-t10*t13*1.110223024625157E-16+t6*t24*6.938893903907226E-17-t7*t24*1.110223024625157E-16+t7*t27*6.938893903907226E-17-t6*t77*4.179977907074144E-2+t7*t77*1.022894291538787E-2-t10*t79*6.938893903907226E-17+t6*t86*1.022894291538787E-2+t13*t79*2.220446049250313E-16+t7*t86*4.179977907074144E-2+t9*t107*9.418695474940579E-3-t4*t116*4.423803843438494E-32-t9*t114*3.272500773773137E-2-t9*t129*6.064232443726676E-3-t9*t151*1.267241057617371E-1-t4*t168*1.738509520502183E-32+t4*t190*3.272500773773137E-2+t9*t191*9.273913560348254E-3-t4*t224*2.19091623651983E-3+t9*t220*1.620494880894663E-2-t4*t227*8.255148680246483E-3-t4*t248*8.271806267810225E-25+t9*t247*2.68708144925776E-2+t9*t251*1.738509520502183E-32-t4*t259*1.970355167288954E-31-t9*t312*2.164664100475015E-2-t4*t320*6.064232443726676E-3-t9*t319*1.06790656330653E-2-t4*t327*2.164664100475015E-2+t9*t323*2.19091623651983E-3-t9*t324*1.970355167288954E-31-t9*t325*8.271806267810225E-25-t4*t338*2.68708144925776E-2+t9*t360*8.921738245622465E-2+t9*t406*1.267241057617371E-1-t4*(t270-t3*(t268+t2*(-t132+t133+t150+DF*(t367*t367))-DF*t2*(t119+t368*t368)))*4.696294696562867E-2+t9*(t237-t238)*8.255148680246483E-3-t9*(t215-t2*(t119-t353*t353))*7.106514150923243E-2-t4*(t305+t14*(t120-t350*t350))*8.921738245622465E-2+t9*(t219+t2*(-t132+t133+t150+DF*(t355*t355))-DF*t2*t180)*9.733454286329098E-1-a4*(t265+t14*(t201+t20*(t119+t366*t366)))*4.696294696562867E-2+t9*(t310-t20*(-t132+t133+t150+DF*(t351*t351))+DF*t20*(t119+t352*t352))*4.696294696562867E-2-a4*(t364+t3*(-t132+t133+t150+DF*(t363*t363)))*1.06790656330653E-2+d4*t9*(t60-t64-t138+t167)*3.272500773773137E-2+d4*t9*(t343-t14*(-t132+t133+t150+DF*(t374*t374)))*1.06790656330653E-2+d4*t4*(t254-t2*(t119+t369*t369))*4.696294696562867E-2+d4*t9*(t286-t14*(t67+t372*t372))*1.267241057617371E-1+d4*t9*(t302-t14*(t120+t376*t376))*1.267241057617371E-1-d4*t9*t114*1.06790656330653E-2+d4*t4*t190*2.135813126613061E-2+d4*t4*t248*9.418695474940579E-3-d4*t4*t275*1.267241057617371E-1+d4*t4*t277*3.272500773773137E-2-d4*t4*t280*9.733454286329098E-1-d4*t9*t282*1.067906563306531E-2-d4*t4*t292*1.267241057617371E-1-d4*t9*t295*9.733454286329098E-1+d4*t9*t297*9.418695474940579E-3+d4*t9*t299*9.273913560348254E-3-d4*t4*t371*1.06790656330653E-2+d4*t4*t395*9.273913560348254E-3-t9*t17*t19*4.423803843438494E-32+t4*t19*t47*1.620494880894663E-2+t3*t4*t190*1.267241057617371E-1+t4*t14*t190*9.273913560348254E-3-t3*t4*t370*1.06790656330653E-2-t3*t4*t373*1.267241057617371E-1+d4*t9*(t3*(t201+t20*(t119+t375*t375))-t14*t183)*4.696294696562867E-2;
    A0[0][4] = ddq2*3.037472882887265E-2+ddq3*3.037472882887265E-2+t249*5.134781488891345E-16-t250*5.134781488891345E-16+t386-a4*(t235+t3*(t67+t383*t383))*1.121603851859727E-1-a4*(t315+t3*(t120+t381*t381))*1.121603851859728E-1+t4*(t263-t3*(t261+t262-t20*(-t132+t133+t150+DF*(t387*t387))))*7.871676279561546E-2+t4*(t255-t3*(t189+t20*(t119-t384*t384)))*1.433130262212205E-1-a4*t107*1.544032733401369E-2+a4*t168*1.279712033956911E-1-a4*t230*1.544032733401361E-2+a4*t242*3.514530108364159E-2+a4*t333*7.871676279561546E-2+a4*t400*1.037383491621931E-2+dq3*t13*1.665334536937731E-16-dq3*t79*2.220446049250313E-16-t10*t13*1.665334536937731E-16-t6*t24*2.220446049250313E-16-t7*t24*1.665334536937731E-16+t6*t27*1.665334536937731E-16-t7*t27*2.220446049250313E-16+t6*t77*5.215514922781014E-2-t7*t77*1.294899398371348E-1-t6*t86*1.294899398371348E-1+t13*t79*2.775557561562888E-16-t7*t86*5.215514922781014E-2-t9*t107*1.279712033956911E-1-t4*t116*6.537042537313443E-32+t9*t114*3.514530108364159E-2+t9*t129*7.057871046390797E-2-t9*t151*1.121603851859727E-1-t4*t168*4.956893427119441E-32-t4*t190*3.514530108364159E-2-t9*t191*1.037383491621931E-2-t4*t224*7.421790915681513E-2-t9*t220*3.037472882887247E-2-t4*t227*3.639198692907088E-3-t4*t248*1.900026539791987E-32-t9*t247*1.408795289413305E-3+t9*t251*4.956893427119441E-32-t4*t259*2.357338251929895E-31+t9*t312*2.867544810062978E-1+t9*t319*1.54403273340137E-2+t9*t323*7.421790915681513E-2-t9*t324*2.357338251929895E-31-t9*t325*1.900026539791987E-32+t4*t338*1.408795289413305E-3-t9*t360*9.030728612207537E-1+t9*t406*1.121603851859728E-1+t4*(t270-t3*(t268+t2*(-t132+t133+t150+DF*(t389*t389))-DF*t2*(t119+t390*t390)))*7.989790536113454E-3+t9*(t237-t238)*3.639198692907088E-3+t4*(t234-t357)*7.057871046390797E-2+t4*(t252-t361)*2.867544810062978E-1+t9*(t215-t2*(t119-t380*t380))*1.433130262212205E-1+t4*(t305+t14*(t120-t377*t377))*9.030728612207537E-1+t9*(t219+t2*(-t132+t133+t150+DF*(t382*t382))-DF*t2*t180)*7.871676279561546E-2+a4*(t265+t14*(t201+t20*(t119+t388*t388)))*7.989790536113454E-3-t9*(t310-t20*(-t132+t133+t150+DF*(t378*t378))+DF*t20*(t119+t379*t379))*7.989790536113454E-3+a4*(t364+t3*(-t132+t133+t150+DF*(t385*t385)))*1.54403273340137E-2-d4*t9*(t343-t14*(-t132+t133+t150+DF*(t394*t394)))*1.54403273340137E-2+d4*t4*(t194+t195)*1.54403273340137E-2+d4*t9*(t286-t14*(t67+t392*t392))*1.121603851859727E-1-d4*t4*(t254-t2*(t119+t391*t391))*7.989790536113454E-3+d4*t9*(t302-t14*(t120+t397*t397))*1.121603851859728E-1+t3*t4*(t283+t284)*1.54403273340137E-2+d4*t9*t114*1.544032733401369E-2-d4*t4*t190*3.08806546680273E-2-d4*t4*t248*1.279712033956911E-1-d4*t4*t275*1.121603851859728E-1-d4*t4*t277*3.514530108364159E-2-d4*t4*t280*7.871676279561546E-2-d4*t9*t276*3.514530108364159E-2+d4*t9*t282*1.544032733401361E-2-d4*t4*t292*1.121603851859727E-1-d4*t9*t295*7.871676279561546E-2-d4*t9*t297*1.279712033956911E-1-d4*t9*t299*1.037383491621931E-2-d4*t4*t395*1.037383491621931E-2-t9*t17*t19*6.537042537313443E-32-t4*t19*t47*3.037472882887247E-2+t3*t4*t190*1.121603851859727E-1-t4*t14*t190*1.037383491621931E-2-t3*t4*t373*1.121603851859728E-1-d4*t9*(t3*(t201+t20*(t119+t396*t396))-t14*t183)*7.989790536113454E-3;
    A0[0][5] = ddq2*(-2.393119974211362E-1)-ddq3*2.393119974211362E-1-t249*2.220446049250313E-16+t427+a4*(t235+t3*(t67+t407*t407))*1.46545076163143E-1+a4*(t424+t3*(t120+t404*t404))*1.46545076163143E-1+t4*(t263-t3*(t261+t262-t20*(-t132+t133+t150+DF*(t410*t410))))*8.654896355910062E-3-t4*(t255-t3*(t189+t20*(t119-t408*t408)))*1.998002130722273E-2+a4*t107*1.143457348509764E-2+a4*t168*5.777589934705047E-1+a4*t230*1.143457348509765E-2-a4*t242*2.488184902019634E-2+a4*t333*8.654896355910062E-3-a4*t400*1.953440218514919E-1+dq3*t13*9.714451465470084E-17-dq3*t79*3.053113317719177E-16-t10*t13*9.714451465470084E-17-t6*t24*3.053113317719177E-16-t7*t24*9.714451465470084E-17+t6*t27*9.714451465470084E-17-t7*t27*3.053113317719177E-16-t6*t77*1.588965675760325E-1-t7*t77*5.657933935994481E-1+t10*t79*3.053113317719177E-16-t6*t86*5.657933935994481E-1+t13*t79*3.122502256758249E-16+t7*t86*1.588965675760325E-1-t9*t107*5.777589934705047E-1+t4*t116*3.806328664252458E-32-t9*t114*2.488184902019634E-2-t9*t129*5.607933688014254E-2+t9*t151*1.46545076163143E-1+t4*t168*3.137316054265322E-32+t4*t190*2.488184902019634E-2+t9*t191*1.953440218514919E-1+t4*t224*6.133554142264157E-2+t9*t220*2.393119974211363E-1+t4*t227*5.256204542499225E-3-t4*t248*2.093359096747847E-32-t9*t247*5.861442359448814E-2-t9*t251*3.137316054265322E-32-t4*t259*2.973635834133745E-31-t9*t312*3.099430489965534E-2-t4*t320*5.607933688014254E-2-t9*t319*1.143457348509764E-2-t4*t327*3.099430489965534E-2-t9*t322*5.256204542499225E-3-t9*t323*6.133554142264157E-2-t9*t324*2.973635834133745E-31-t9*t325*2.093359096747847E-32+t4*t338*5.861442359448814E-2+t9*t360*7.301907278282217E-2-t9*t406*1.46545076163143E-1-t4*(t270-t3*(t268+t2*(-t132+t133+t150+DF*(t412*t412))-DF*t2*(t119+t413*t413)))*3.271474866328614E-1-t9*(t215-t2*(t119-t403*t403))*1.998002130722273E-2-t4*(t305+t14*(t120-t398*t398))*7.301907278282217E-2+t9*(t219+t2*(-t132+t133+t150+DF*(t405*t405))-DF*t2*t180)*8.654896355910062E-3-a4*(t265+t14*(t201+t20*(t119+t411*t411)))*3.271474866328614E-1+t9*(t310-t20*(-t132+t133+t150+DF*(t401*t401))+DF*t20*(t119+t402*t402))*3.271474866328614E-1-a4*(t364+t3*(-t132+t133+t150+DF*(t409*t409)))*1.143457348509764E-2+d4*t9*(t60-t64-t138+t167)*2.488184902019634E-2+d4*t4*(t117+t118+t197+t293)*1.953440218514919E-1+d4*t9*(t343-t14*(-t132+t133+t150+DF*(t416*t416)))*1.143457348509764E-2-d4*t9*(t286-t14*(t67+t415*t415))*1.46545076163143E-1+d4*t4*(t254-t2*(t119+t414*t414))*3.271474866328614E-1-d4*t9*(t302-t14*(t120+t418*t418))*1.46545076163143E-1+t3*t4*(t194+t195+t287-DF*t20*(t124+t142-t161-dq6*(t32-t62)))*1.46545076163143E-1-d4*t9*t114*1.143457348509764E-2+d4*t4*t190*2.286914697019528E-2-d4*t4*t248*5.777589934705047E-1+d4*t4*t275*1.46545076163143E-1+d4*t4*t277*2.488184902019634E-2-d4*t4*t280*8.654896355910062E-3-d4*t9*t282*1.143457348509765E-2+d4*t4*t292*1.46545076163143E-1-d4*t9*t295*8.654896355910062E-3-d4*t9*t297*5.777589934705047E-1+d4*t9*t299*1.953440218514919E-1-d4*t4*t371*1.143457348509764E-2+t9*t17*t19*3.806328664252458E-32+t4*t19*t47*2.393119974211363E-1-t3*t4*t190*1.46545076163143E-1+t4*t14*t190*1.953440218514919E-1-t3*t4*t370*1.143457348509764E-2+d4*t9*(t3*(t201+t20*(t119+t417*t417))-t14*t183)*3.271474866328614E-1;
    A0[0][6] = ddq2*1.034458330237142E-1+ddq3*1.034458330237142E-1+t249*2.220446049250313E-16-t427-a4*(t235+t3*(t67+t426*t426))*6.436179155324423E-2-a4*(t424+t3*(t120+t423*t423))*6.436179155324406E-2+t4*(t263-t3*(t261+t262-t20*(-t132+t133+t150+DF*(t430*t430))))*1.075167472739597E-2+t4*(t255-t3*(t189+t20*(t119-t428*t428)))*3.808973154785784E-1+a4*t107*5.831699655064278E-3+a4*t168*1.857951965804722E-1+a4*t230*5.831699655064183E-3-a4*t242*6.661209472955391E-2+a4*t333*1.075167472739597E-2+a4*t400*1.499779649972985E-1-dq3*t13*7.49400541621981E-16+dq3*t79*2.636779683484748E-16+t10*t13*7.49400541621981E-16+t6*t24*2.636779683484748E-16+t7*t24*7.49400541621981E-16-t6*t27*7.49400541621981E-16+t7*t27*2.636779683484748E-16-t6*t77*8.682428236273815E-3-t7*t77*1.909674882316577E-1-t10*t79*2.636779683484748E-16-t6*t86*1.909674882316577E-1+t13*t79*8.673617379884025E-18+t7*t86*8.682428236273815E-3-t9*t107*1.857951965804722E-1+t4*t116*1.382692967421314E-17-t9*t114*6.661209472955391E-2+t9*t129*5.909596514852796E-1-t9*t151*6.436179155324423E-2+t4*t168*1.088247420075139E-33+t4*t190*6.661209472955391E-2-t9*t191*1.499779649972985E-1-t4*t224*5.302867249145723E-1-t9*t220*1.034458330237144E-1+t4*t227*6.067292657070721E-2+t4*t248*4.289894750184742E-32-t9*t247*4.842501135671594E-2-t9*t251*1.088247420075139E-33-t4*t259*2.002967142162908E-31-t9*t312*5.032970460015648E-2-t9*t319*5.831699655064371E-3-t4*t327*5.032970460015648E-2-t9*t322*6.067292657070721E-2+t9*t323*5.302867249145723E-1-t9*t324*2.002967142162908E-31+t9*t325*4.289894750184742E-32+t4*t338*4.842501135671594E-2+t9*t360*2.118248239979039E-1+t9*(t177+t231+t232-t288)*6.436179155324406E-2+t4*(t270-t3*(t268+t2*(-t132+t133+t150+DF*(t432*t432))-DF*t2*(t119+t433*t433)))*2.077304157020058E-1+t4*(t234-t357)*5.909596514852796E-1+t9*(t215-t2*(t119-t422*t422))*3.808973154785784E-1-t4*(t305+t14*(t120-t419*t419))*2.118248239979039E-1+t9*(t219+t2*(-t132+t133+t150+DF*(t425*t425))-DF*t2*t180)*1.075167472739597E-2+a4*(t265+t14*(t201+t20*(t119+t431*t431)))*2.077304157020058E-1-t9*(t310-t20*(-t132+t133+t150+DF*(t420*t420))+DF*t20*(t119+t421*t421))*2.077304157020058E-1-a4*(t364+t3*(-t132+t133+t150+DF*(t429*t429)))*5.831699655064371E-3+d4*t9*(t60-t64-t138+t167)*6.661209472955391E-2+d4*t9*(t343-t14*(-t132+t133+t150+DF*(t436*t436)))*5.831699655064371E-3+d4*t9*(t286-t14*(t67+t435*t435))*6.436179155324423E-2-d4*t4*(t254-t2*(t119+t434*t434))*2.077304157020058E-1+d4*t9*(t302-t14*(t120+t438*t438))*6.436179155324406E-2-d4*t9*t114*5.831699655064278E-3+d4*t4*t190*1.166339931012846E-2-d4*t4*t248*1.857951965804722E-1-d4*t4*t275*6.436179155324406E-2+d4*t4*t277*6.661209472955391E-2-d4*t4*t280*1.075167472739597E-2-d4*t9*t282*5.831699655064183E-3-d4*t4*t292*6.436179155324423E-2-d4*t9*t295*1.075167472739597E-2-d4*t9*t297*1.857951965804722E-1-d4*t9*t299*1.499779649972985E-1-d4*t4*t371*5.831699655064371E-3-d4*t4*t395*1.499779649972985E-1+t9*t17*t19*1.382692967421314E-17-t4*t19*t47*1.034458330237144E-1+t3*t4*t190*6.436179155324423E-2-t4*t14*t190*1.499779649972985E-1-t3*t4*t370*5.831699655064371E-3-t3*t4*t373*6.436179155324406E-2-d4*t9*(t3*(t201+t20*(t119+t437*t437))-t14*t183)*2.077304157020058E-1;
    A0[0][7] = ddq2*2.827719083641403E-2+ddq3*2.827719083641403E-2+t249*1.242458486845126E-16-t250*1.242458486845126E-16-a4*(t235+t3*(t67+t445*t445))*1.669314493978117E-2-a4*(t424+t3*(t120+t443*t443))*1.66931449397811E-2+t4*(t263-t3*(t261+t262-t20*(-t132+t133+t150+DF*(t448*t448))))*3.823780053561078E-2+t4*(t255-t3*(t189+t20*(t119-t446*t446)))*6.355775113703721E-1-a4*t107*5.935072798402338E-4-a4*t168*5.915372630088692E-2-a4*t230*5.93507279840268E-4-a4*t242*5.794806017329147E-4+a4*t333*3.823780053561078E-2+a4*t400*3.372330007287602E-1-dq3*t13*1.673849502970571E-16-dq3*t79*1.054725993752384E-16+t10*t13*1.673849502970571E-16-t6*t24*1.054725993752384E-16+t7*t24*1.673849502970571E-16-t6*t27*1.673849502970571E-16-t7*t27*1.054725993752384E-16+t6*t77*1.525574626665915E-2+t7*t77*5.773986675906652E-2+t10*t79*1.054725993752384E-16+t6*t86*5.773986675906652E-2-t13*t79*1.148026627157391E-16-t7*t86*1.525574626665915E-2+t9*t107*5.915372630088692E-2-t4*t116*2.79772106674967E-32-t9*t114*5.794806017329147E-4-t9*t129*1.834476900948051E-1-t9*t151*1.669314493978117E-2+t4*t168*6.938893903907228E-18+t4*t190*5.794806017329147E-4-t9*t191*3.372330007287602E-1+t4*t224*2.757567081711201E-1-t9*t220*2.827719083641435E-2+t4*t227*9.230901807631495E-2-t4*t248*1.454077123243918E-32-t9*t247*4.916310327584911E-1-t9*t251*6.938893903907228E-18+t9*t312*4.724539616897632E-2-t4*t320*1.834476900948051E-1+t9*t319*5.935072798402684E-4-t9*t322*9.230901807631495E-2-t9*t323*2.757567081711201E-1+t9*t324*9.121204216618052E-31-t9*t325*1.454077123243918E-32+t4*t338*4.916310327584911E-1+t9*t360*7.388933463878639E-2+t9*(t177+t231+t232-t288)*1.66931449397811E-2-t4*(t270-t3*(t268+t2*(-t132+t133+t150+DF*(t450*t450))-DF*t2*(t119+t451*t451)))*3.225223840807314E-1+t4*(t178-t203)*9.121204216618052E-31+t4*(t252-t361)*4.724539616897632E-2+t9*(t215-t2*(t119-t442*t442))*6.355775113703721E-1-t4*(t305+t14*(t120-t439*t439))*7.388933463878639E-2+t9*(t219+t2*(-t132+t133+t150+DF*(t444*t444))-DF*t2*t180)*3.823780053561078E-2-a4*(t265+t14*(t201+t20*(t119+t449*t449)))*3.225223840807314E-1+t9*(t310-t20*(-t132+t133+t150+DF*(t440*t440))+DF*t20*(t119+t441*t441))*3.225223840807314E-1+a4*(t364+t3*(-t132+t133+t150+DF*(t447*t447)))*5.935072798402684E-4+d4*t9*(t60-t64-t138+t167)*5.794806017329147E-4-d4*t9*(t343-t14*(-t132+t133+t150+DF*(t454*t454)))*5.935072798402684E-4+d4*t4*(t194+t195)*5.935072798402684E-4+d4*t9*(t286-t14*(t67+t453*t453))*1.669314493978117E-2+d4*t4*(t254-t2*(t119+t452*t452))*3.225223840807314E-1+d4*t9*(t302-t14*(t120+t456*t456))*1.66931449397811E-2+t3*t4*(t283+t284)*5.935072798402684E-4+d4*t9*t114*5.935072798402338E-4-d4*t4*t190*1.187014559680502E-3+d4*t4*t248*5.915372630088692E-2-d4*t4*t275*1.66931449397811E-2+d4*t4*t277*5.794806017329147E-4-d4*t4*t280*3.823780053561078E-2+d4*t9*t282*5.93507279840268E-4-d4*t4*t292*1.669314493978117E-2-d4*t9*t295*3.823780053561078E-2+d4*t9*t297*5.915372630088692E-2-d4*t9*t299*3.372330007287602E-1-d4*t4*t395*3.372330007287602E-1-t9*t17*t19*2.79772106674967E-32-t4*t19*t47*2.827719083641435E-2+t3*t4*t190*1.669314493978117E-2-t4*t14*t190*3.372330007287602E-1-t3*t4*t373*1.66931449397811E-2+d4*t9*(t3*(t201+t20*(t119+t455*t455))-t14*t183)*3.225223840807314E-1;
    A0[0][8] = ddq2*(-5.885895220204636E-2)-ddq3*5.885895220204636E-2-t249*1.74907408339946E-16+t250*1.74907408339946E-16-t460-t464-a4*(t235+t3*(t67+t465*t465))*7.276747241242461E-3-a4*(t424+t3*(t120+t462*t462))*7.276747241242628E-3+t4*(t263-t3*(t261+t262-t20*(-t132+t133+t150+DF*(t468*t468))))*1.655777632633164E-2+t4*(t255-t3*(t189+t20*(t119-t466*t466)))*3.451560721707804E-1-a4*t107*1.573424800256082E-3-a4*t168*4.432555293153127E-3-a4*t230*1.573424800256122E-3+a4*t242*2.262702635839893E-2+a4*t333*1.655777632633164E-2-a4*t400*1.511554078331053E-1-dq3*t79*1.665334536937734E-16+t10*t13*1.110223024625157E-16-t6*t24*1.665334536937734E-16+t7*t24*1.110223024625157E-16-t7*t27*1.665334536937734E-16-t6*t77*1.033398687474726E-2+t7*t77*7.375502903255828E-3+t10*t79*1.665334536937734E-16+t6*t86*7.375502903255828E-3+t13*t79*8.425167840503228E-18+t7*t86*1.033398687474726E-2+t9*t107*4.432555293153127E-3-t4*t116*1.35308431126191E-16+t9*t114*2.262702635839893E-2-t9*t129*3.708955095784515E-1-t9*t151*7.276747241242461E-3+t4*t168*3.330669073875468E-16-t4*t190*2.262702635839893E-2+t9*t191*1.511554078331053E-1-t4*t224*2.5079861497516E-1+t9*t220*5.885895220204633E-2-t4*t227*6.216941245536115E-1-t4*t248*2.220446049250313E-16+t9*t247*6.026228762152103E-2-t9*t251*3.330669073875468E-16-t9*t312*4.755947509212227E-1-t4*t320*3.708955095784515E-1+t9*t319*1.573424800256081E-3-t4*t327*4.755947509212227E-1+t9*t323*2.5079861497516E-1+t9*t324*1.009741958682895E-28-t9*t325*2.220446049250313E-16-t4*t338*6.026228762152103E-2-t9*t360*1.046520439511568E-1+t9*(t177+t231+t232-t288)*7.276747241242628E-3+t4*(t270-t3*(t268+t2*(-t132+t133+t150+DF*(t470*t470))-DF*t2*(t119+t471*t471)))*1.492290127538502E-1+t4*(t178-t203)*1.009741958682895E-28+t9*(t237-t238)*6.216941245536115E-1+t9*(t215-t2*(t119-t461*t461))*3.451560721707804E-1+t4*(t305+t14*(t120-t457*t457))*1.046520439511568E-1+t9*(t219+t2*(-t132+t133+t150+DF*(t463*t463))-DF*t2*t180)*1.655777632633164E-2+a4*(t265+t14*(t201+t20*(t119+t469*t469)))*1.492290127538502E-1-t9*(t310-t20*(-t132+t133+t150+DF*(t458*t458))+DF*t20*(t119+t459*t459))*1.492290127538502E-1+a4*(t364+t3*(-t132+t133+t150+DF*(t467*t467)))*1.573424800256081E-3+d4*t4*(t117+t118+t197+t293)*1.511554078331053E-1-d4*t9*(t343-t14*(-t132+t133+t150+DF*(t474*t474)))*1.573424800256081E-3+d4*t4*(t194+t195)*1.573424800256081E-3+d4*t9*(t286-t14*(t67+t473*t473))*7.276747241242461E-3-d4*t4*(t254-t2*(t119+t472*t472))*1.492290127538502E-1+d4*t9*(t302-t14*(t120+t476*t476))*7.276747241242628E-3+t3*t4*(t283+t284)*1.573424800256081E-3+d4*t9*t114*1.573424800256082E-3-d4*t4*t190*3.146849600512205E-3+d4*t4*t248*4.432555293153127E-3-d4*t4*t275*7.276747241242628E-3-d4*t4*t277*2.262702635839893E-2-d4*t4*t280*1.655777632633164E-2-d4*t9*t276*2.262702635839893E-2+d4*t9*t282*1.573424800256122E-3-d4*t4*t292*7.276747241242461E-3-d4*t9*t295*1.655777632633164E-2+d4*t9*t297*4.432555293153127E-3+d4*t9*t299*1.511554078331053E-1-t9*t17*t19*1.35308431126191E-16+t4*t19*t47*5.885895220204633E-2+t3*t4*t190*7.276747241242461E-3+t4*t14*t190*1.511554078331053E-1-t3*t4*t373*7.276747241242628E-3-d4*t9*(t3*(t201+t20*(t119+t475*t475))-t14*t183)*1.492290127538502E-1;
    A0[0][9] = ddq2*2.163275420307986E-1+ddq3*2.163275420307986E-1+t249*1.110223024625157E-15-t250*1.110223024625157E-15+a4*(t235+t3*(t67+t483*t483))*1.411294816067475E-4+a4*(t424+t3*(t120+t481*t481))*1.411294816071083E-4-t4*(t263-t3*(t261+t262-t20*(-t132+t133+t150+DF*(t486*t486))))*2.803650741840071E-2-t4*(t255-t3*(t189+t20*(t119-t484*t484)))*2.6959535670767E-1-a4*t107*8.065600800339418E-4+a4*t168*3.758242997004764E-2-a4*t230*8.065600800338169E-4-a4*t242*6.15295881364335E-2-a4*t333*2.803650741840071E-2+a4*t400*4.364316505761144E-1+dq3*t13*3.1872688653537E-16+dq3*t79*1.110223024625157E-16-t10*t13*3.1872688653537E-16+t6*t24*1.110223024625157E-16-t7*t24*3.1872688653537E-16+t6*t27*3.1872688653537E-16+t7*t27*1.110223024625157E-16+t6*t77*5.961383540081491E-2-t7*t77*4.839880707158804E-2-t10*t79*1.110223024625157E-16-t6*t86*4.839880707158804E-2-t13*t79*5.000367253692271E-16-t7*t86*5.961383540081491E-2-t9*t107*3.758242997004764E-2-t4*t116*1.110223024625157E-16-t9*t114*6.15295881364335E-2+t9*t129*9.611743684315729E-2+t9*t151*1.411294816067475E-4+t4*t168*7.632783294297965E-17+t4*t190*6.15295881364335E-2-t9*t191*4.364316505761144E-1-t4*t224*5.488703815113571E-2-t9*t220*2.163275420307986E-1+t4*t227*4.123039869202177E-2-t4*t248*5.551115123125783E-17+t9*t247*1.315166738899022E-1-t9*t251*7.632783294297965E-17-t9*t312*5.837967720392215E-1+t9*t319*8.065600800340112E-4-t4*t327*5.837967720392215E-1-t9*t322*4.123039869202177E-2+t9*t323*5.488703815113571E-2+t9*t324*3.459393188391232E-44-t9*t325*5.551115123125783E-17-t4*t338*1.315166738899022E-1-t9*t360*1.902430641136356E-1-t9*t406*1.411294816071083E-4-t4*(t270-t3*(t268+t2*(-t132+t133+t150+DF*(t488*t488))-DF*t2*(t119+t489*t489)))*4.723442625690057E-1+t4*(t178-t203)*3.459393188391232E-44+t4*(t234-t357)*9.611743684315729E-2-t9*(t215-t2*(t119-t480*t480))*2.6959535670767E-1+t4*(t305+t14*(t120-t477*t477))*1.902430641136356E-1-t9*(t219+t2*(-t132+t133+t150+DF*(t482*t482))-DF*t2*t180)*2.803650741840071E-2-a4*(t265+t14*(t201+t20*(t119+t487*t487)))*4.723442625690057E-1+t9*(t310-t20*(-t132+t133+t150+DF*(t478*t478))+DF*t20*(t119+t479*t479))*4.723442625690057E-1+a4*(t364+t3*(-t132+t133+t150+DF*(t485*t485)))*8.065600800340112E-4+d4*t9*(t60-t64-t138+t167)*6.15295881364335E-2-d4*t9*(t343-t14*(-t132+t133+t150+DF*(t492*t492)))*8.065600800340112E-4+d4*t4*(t194+t195)*8.065600800340112E-4-d4*t9*(t286-t14*(t67+t491*t491))*1.411294816067475E-4+d4*t4*(t254-t2*(t119+t490*t490))*4.723442625690057E-1-d4*t9*(t302-t14*(t120+t494*t494))*1.411294816071083E-4+t3*t4*(t283+t284)*8.065600800340112E-4+t3*t4*(t194+t195+t287-DF*t20*(t124+t142-t161-dq6*(t32-t62)))*1.411294816071083E-4+d4*t9*t114*8.065600800339418E-4-d4*t4*t190*1.613120160067759E-3-d4*t4*t248*3.758242997004764E-2+d4*t4*t275*1.411294816071083E-4+d4*t4*t277*6.15295881364335E-2+d4*t4*t280*2.803650741840071E-2+d4*t9*t282*8.065600800338169E-4+d4*t4*t292*1.411294816067475E-4+d4*t9*t295*2.803650741840071E-2-d4*t9*t297*3.758242997004764E-2-d4*t9*t299*4.364316505761144E-1-d4*t4*t395*4.364316505761144E-1-t9*t17*t19*1.110223024625157E-16-t4*t19*t47*2.163275420307986E-1-t3*t4*t190*1.411294816067475E-4-t4*t14*t190*4.364316505761144E-1+d4*t9*(t3*(t201+t20*(t119+t493*t493))-t14*t183)*4.723442625690057E-1;
    A0[0][10] = ddq2*(-1.869396534812073E-1)-ddq3*1.869396534812073E-1-t249*9.714451465470122E-16+t250*9.714451465470122E-16-a4*(t235+t3*(t67+t501*t501))*6.393169687679263E-3-a4*(t424+t3*(t120+t499*t499))*6.393169687679256E-3+t4*(t263-t3*(t261+t262-t20*(-t132+t133+t150+DF*(t504*t504))))*2.611776744625944E-2+t4*(t255-t3*(t189+t20*(t119-t502*t502)))*2.487136440463937E-1+a4*t107*2.952329903708022E-4-a4*t168*4.519196433004661E-2+a4*t230*2.952329903707605E-4+a4*t242*5.574097226511765E-2+a4*t333*2.611776744625944E-2-a4*t400*2.258113642628351E-1-dq3*t13*2.498001805406602E-16-dq3*t79*1.387778780781446E-17+t10*t13*2.498001805406602E-16-t6*t24*1.387778780781446E-17+t7*t24*2.498001805406602E-16-t6*t27*2.498001805406602E-16-t7*t27*1.387778780781446E-17-t6*t77*4.894523368435903E-2+t7*t77*5.453894700410725E-2+t10*t79*1.387778780781446E-17+t6*t86*5.453894700410725E-2+t13*t79*9.540979117872439E-17+t7*t86*4.894523368435903E-2+t9*t107*4.519196433004661E-2-t4*t116*1.942890293094024E-16+t9*t114*5.574097226511765E-2+t9*t129*1.768024530539154E-1-t9*t151*6.393169687679263E-3-t4*t168*3.330669073875469E-16-t4*t190*5.574097226511765E-2+t9*t191*2.258113642628351E-1+t4*t224*3.327176353278897E-1+t9*t220*1.869396534812073E-1+t4*t227*5.095200883818051E-1-t4*t248*5.551115123125783E-17+t9*t247*1.23159537380222E-1+t9*t251*3.330669073875469E-16-t9*t312*5.384797602777249E-1-t9*t319*2.952329903709132E-4-t4*t327*5.384797602777249E-1-t9*t322*5.095200883818051E-1-t9*t323*3.327176353278897E-1+t9*t324*3.36509482272268E-44-t9*t325*5.551115123125783E-17-t4*t338*1.23159537380222E-1-t9*t360*1.711475321295061E-1+t9*(t177+t231+t232-t288)*6.393169687679256E-3+t4*(t270-t3*(t268+t2*(-t132+t133+t150+DF*(t506*t506))-DF*t2*(t119+t507*t507)))*2.645433458194964E-1+t4*(t178-t203)*3.36509482272268E-44+t4*(t234-t357)*1.768024530539154E-1+t9*(t215-t2*(t119-t498*t498))*2.487136440463937E-1+t4*(t305+t14*(t120-t495*t495))*1.711475321295061E-1+t9*(t219+t2*(-t132+t133+t150+DF*(t500*t500))-DF*t2*t180)*2.611776744625944E-2+a4*(t265+t14*(t201+t20*(t119+t505*t505)))*2.645433458194964E-1-t9*(t310-t20*(-t132+t133+t150+DF*(t496*t496))+DF*t20*(t119+t497*t497))*2.645433458194964E-1-a4*(t364+t3*(-t132+t133+t150+DF*(t503*t503)))*2.952329903709132E-4+d4*t4*(t117+t118+t197+t293)*2.258113642628351E-1+d4*t9*(t343-t14*(-t132+t133+t150+DF*(t510*t510)))*2.952329903709132E-4+d4*t9*(t286-t14*(t67+t509*t509))*6.393169687679263E-3-d4*t4*(t254-t2*(t119+t508*t508))*2.645433458194964E-1+d4*t9*(t302-t14*(t120+t512*t512))*6.393169687679256E-3-d4*t9*t114*2.952329903708022E-4+d4*t4*t190*5.904659807415627E-4+d4*t4*t248*4.519196433004661E-2-d4*t4*t275*6.393169687679256E-3-d4*t4*t277*5.574097226511765E-2-d4*t4*t280*2.611776744625944E-2-d4*t9*t276*5.574097226511765E-2-d4*t9*t282*2.952329903707605E-4-d4*t4*t292*6.393169687679263E-3-d4*t9*t295*2.611776744625944E-2+d4*t9*t297*4.519196433004661E-2+d4*t9*t299*2.258113642628351E-1-d4*t4*t371*2.952329903709132E-4-t9*t17*t19*1.942890293094024E-16+t4*t19*t47*1.869396534812073E-1+t3*t4*t190*6.393169687679263E-3+t4*t14*t190*2.258113642628351E-1-t3*t4*t370*2.952329903709132E-4-t3*t4*t373*6.393169687679256E-3-d4*t9*(t3*(t201+t20*(t119+t511*t511))-t14*t183)*2.645433458194964E-1;
    A0[0][11] = ddq2*5.357212697226931E-1+ddq3*5.357212697226931E-1+t249*2.609024107869119E-15-t250*2.609024107869119E-15+a4*(t235+t3*(t67+t519*t519))*2.637005182893626E-2+a4*(t424+t3*(t120+t517*t517))*2.637005182893605E-2+t4*(t263-t3*(t261+t262-t20*(-t132+t133+t150+DF*(t522*t522))))*3.258803010186304E-2+t4*(t255-t3*(t189+t20*(t119-t520*t520)))*1.587705278841551E-1+a4*t107*1.432775270859602E-3+a4*t168*1.987192711468539E-1+a4*t230*1.432775270859683E-3-a4*t242*1.740576085334541E-1+a4*t333*3.258803010186304E-2-a4*t400*2.717257902041934E-1+dq3*t13*4.996003610813207E-16-dq3*t79*2.151057110211239E-16-t10*t13*4.996003610813207E-16-t6*t24*2.151057110211239E-16-t7*t24*4.996003610813207E-16+t6*t27*4.996003610813207E-16-t7*t27*2.151057110211239E-16+t6*t77*1.259463025112555E-1-t7*t77*2.255053346329887E-1+t10*t79*2.151057110211239E-16-t6*t86*2.255053346329887E-1-t13*t79*1.812786032395765E-16-t7*t86*1.259463025112555E-1-t9*t107*1.987192711468539E-1-t4*t116*1.966392851064023E-33-t9*t114*1.740576085334541E-1-t9*t129*1.982711918626746E-1+t9*t151*2.637005182893626E-2-t4*t168*1.110223024625157E-16+t4*t190*1.740576085334541E-1+t9*t191*2.717257902041934E-1+t4*t224*2.746120956143727E-1-t9*t220*5.357212697226927E-1+t4*t227*7.634090375169782E-2-t4*t248*4.163336342344338E-17+t9*t247*1.890328274729113E-1+t9*t251*1.110223024625157E-16-t4*t259*1.372271182156355E-45+t9*t312*1.75384708133155E-2-t4*t320*1.982711918626746E-1-t9*t319*1.432775270859373E-3-t9*t322*7.634090375169782E-2-t9*t323*2.746120956143727E-1-t9*t324*1.372271182156355E-45-t9*t325*4.163336342344338E-17-t4*t338*1.890328274729113E-1+t9*t360*8.360853706282804E-2-t9*t406*2.637005182893605E-2+t4*(t270-t3*(t268+t2*(-t132+t133+t150+DF*(t524*t524))-DF*t2*(t119+t525*t525)))*1.562703903641717E-1+t4*(t252-t361)*1.75384708133155E-2+t9*(t215-t2*(t119-t516*t516))*1.587705278841551E-1-t4*(t305+t14*(t120-t513*t513))*8.360853706282804E-2+t9*(t219+t2*(-t132+t133+t150+DF*(t518*t518))-DF*t2*t180)*3.258803010186304E-2+a4*(t265+t14*(t201+t20*(t119+t523*t523)))*1.562703903641717E-1-t9*(t310-t20*(-t132+t133+t150+DF*(t514*t514))+DF*t20*(t119+t515*t515))*1.562703903641717E-1-a4*(t364+t3*(-t132+t133+t150+DF*(t521*t521)))*1.432775270859373E-3+d4*t9*(t60-t64-t138+t167)*1.740576085334541E-1+d4*t4*(t117+t118+t197+t293)*2.717257902041934E-1+d4*t9*(t343-t14*(-t132+t133+t150+DF*(t528*t528)))*1.432775270859373E-3-d4*t9*(t286-t14*(t67+t527*t527))*2.637005182893626E-2-d4*t4*(t254-t2*(t119+t526*t526))*1.562703903641717E-1-d4*t9*(t302-t14*(t120+t530*t530))*2.637005182893605E-2+t3*t4*(t194+t195+t287-DF*t20*(t124+t142-t161-dq6*(t32-t62)))*2.637005182893605E-2-d4*t9*t114*1.432775270859602E-3+d4*t4*t190*2.865550541719285E-3-d4*t4*t248*1.987192711468539E-1+d4*t4*t275*2.637005182893605E-2+d4*t4*t277*1.740576085334541E-1-d4*t4*t280*3.258803010186304E-2-d4*t9*t282*1.432775270859683E-3+d4*t4*t292*2.637005182893626E-2-d4*t9*t295*3.258803010186304E-2-d4*t9*t297*1.987192711468539E-1+d4*t9*t299*2.717257902041934E-1-d4*t4*t371*1.432775270859373E-3-t9*t17*t19*1.966392851064023E-33-t4*t19*t47*5.357212697226927E-1-t3*t4*t190*2.637005182893626E-2+t4*t14*t190*2.717257902041934E-1-t3*t4*t370*1.432775270859373E-3-d4*t9*(t3*(t201+t20*(t119+t529*t529))-t14*t183)*1.562703903641717E-1;
    A0[0][12] = ddq2*(-1.175627606950096E-1)-ddq3*1.175627606950096E-1-t249*4.57966997657877E-16+t250*4.57966997657877E-16-a4*(t235+t3*(t67+t537*t537))*3.536256041471455E-3-a4*(t424+t3*(t120+t535*t535))*3.53625604147142E-3-t4*(t263-t3*(t261+t262-t20*(-t132+t133+t150+DF*(t540*t540))))*1.562254931189786E-2+t4*(t255-t3*(t189+t20*(t119-t538*t538)))*3.487108196788574E-1-a4*t107*5.609080651350674E-4-a4*t168*3.004299259902219E-2-a4*t230*5.609080651350574E-4+a4*t242*3.786564301440633E-2-a4*t333*1.562254931189786E-2+a4*t400*2.243916705264433E-1+dq3*t13*8.326672684688694E-17+dq3*t79*3.469446951953614E-16-t10*t13*8.326672684688694E-17+t6*t24*3.469446951953614E-16-t7*t24*8.326672684688694E-17+t6*t27*8.326672684688694E-17+t7*t27*3.469446951953614E-16-t6*t77*2.796950297479934E-2+t7*t77*3.592113063377173E-2-t10*t79*3.469446951953614E-16+t6*t86*3.592113063377173E-2-t13*t79*1.040834085586084E-16+t7*t86*2.796950297479934E-2+t9*t107*3.004299259902219E-2-t4*t116*3.77085515590458E-16+t9*t114*3.786564301440633E-2-t9*t129*4.424277632865862E-2-t9*t151*3.536256041471455E-3-t4*t168*8.673617379884031E-17-t4*t190*3.786564301440633E-2-t9*t191*2.243916705264433E-1+t4*t224*4.912870581770619E-2+t9*t220*1.175627606950096E-1+t4*t227*4.885929489047534E-3+t4*t248*2.081668171172167E-17+t9*t247*8.245066797607565E-1+t9*t251*8.673617379884031E-17-t4*t259*5.559350050962598E-45+t9*t312*2.285455681410841E-1-t4*t320*4.424277632865862E-2+t9*t319*5.609080651350722E-4-t9*t322*4.885929489047534E-3-t9*t323*4.912870581770619E-2-t9*t324*5.559350050962598E-45+t9*t325*2.081668171172167E-17-t4*t338*8.245066797607565E-1+t9*t360*1.01816011982422E-1+t9*(t177+t231+t232-t288)*3.53625604147142E-3-t4*(t270-t3*(t268+t2*(-t132+t133+t150+DF*(t542*t542))-DF*t2*(t119+t543*t543)))*2.211839564438601E-1+t4*(t252-t361)*2.285455681410841E-1+t9*(t215-t2*(t119-t534*t534))*3.487108196788574E-1-t4*(t305+t14*(t120-t531*t531))*1.01816011982422E-1-t9*(t219+t2*(-t132+t133+t150+DF*(t536*t536))-DF*t2*t180)*1.562254931189786E-2-a4*(t265+t14*(t201+t20*(t119+t541*t541)))*2.211839564438601E-1+t9*(t310-t20*(-t132+t133+t150+DF*(t532*t532))+DF*t20*(t119+t533*t533))*2.211839564438601E-1+a4*(t364+t3*(-t132+t133+t150+DF*(t539*t539)))*5.609080651350722E-4-d4*t9*(t343-t14*(-t132+t133+t150+DF*(t546*t546)))*5.609080651350722E-4+d4*t4*(t194+t195)*5.609080651350722E-4+d4*t9*(t286-t14*(t67+t545*t545))*3.536256041471455E-3+d4*t4*(t254-t2*(t119+t544*t544))*2.211839564438601E-1+d4*t9*(t302-t14*(t120+t548*t548))*3.53625604147142E-3+t3*t4*(t283+t284)*5.609080651350722E-4+d4*t9*t114*5.609080651350674E-4-d4*t4*t190*1.121816130270125E-3+d4*t4*t248*3.004299259902219E-2-d4*t4*t275*3.53625604147142E-3-d4*t4*t277*3.786564301440633E-2+d4*t4*t280*1.562254931189786E-2-d4*t9*t276*3.786564301440633E-2+d4*t9*t282*5.609080651350574E-4-d4*t4*t292*3.536256041471455E-3+d4*t9*t295*1.562254931189786E-2+d4*t9*t297*3.004299259902219E-2-d4*t9*t299*2.243916705264433E-1-d4*t4*t395*2.243916705264433E-1-t9*t17*t19*3.77085515590458E-16+t4*t19*t47*1.175627606950096E-1+t3*t4*t190*3.536256041471455E-3-t4*t14*t190*2.243916705264433E-1-t3*t4*t373*3.53625604147142E-3+d4*t9*(t3*(t201+t20*(t119+t547*t547))-t14*t183)*2.211839564438601E-1;
    A0[1][0] = ddq5*(-4.970248408425164E-2)+t2*(t158+t159)*4.409593974683785E-1+dq4*t17*4.970248408425164E-2-t9*t40*4.970248408425164E-2+t4*t98*4.970248408425164E-2-t3*t107*3.609431031781951E-1+t3*t114*4.409593974683785E-1+t14*t107*4.409593974683785E-1+t14*t114*3.609431031781951E-1-t20*t157*4.409593974683785E-1+t2*t181*6.735224297140334E-3-t2*t183*2.940732674575382E-2-t20*t166*4.215928513213809E-2+t20*t170*6.735224297140334E-3-t20*t173*2.770866655375196E-2-t20*t198*2.940732674575382E-2+t2*(-t132+t133+t150+DF*(t551*t551))*1.683674172863262E-1+t20*(-t132+t133+t150+DF*(t550*t550))*3.288365945939265E-1+t2*(t119-t549*t549)*2.770866655375196E-2+t2*(t125-t142+t161)*7.543198952113516E-3+DF*t2*(t158+t159)*1.080188212542064E-1-DF*t2*t169*4.409593974683785E-1-DF*t20*t157*1.080188212542064E-1-DF*t20*t160*4.409593974683785E-1-DF*t2*t180*1.683674172863262E-1-DF*t2*t181*3.288365945939265E-1+DF*t20*t173*1.683674172863262E-1-t2*t34*t43*3.89231364099616E-2-t20*t43*t46*4.307050229937027E-3-DF*t20*(t119+t552*t552)*3.288365945939265E-1;
    A0[1][1] = ddq5*2.255115270442565E-1+t2*(t158+t159)*2.285027328820861E-1-dq4*t17*2.255115270442565E-1+t9*t40*2.255115270442565E-1-t4*t98*2.255115270442565E-1+t3*t107*5.525398578095001E-1+t3*t114*2.285027328820862E-1+t14*t107*2.285027328820862E-1-t14*t114*5.525398578095001E-1-t2*t165*2.45941217584307E-2-t20*t157*2.285027328820861E-1+t2*t181*1.239290004698339E-2-t2*t183*2.299375793262398E-2+t20*t166*2.009174052858258E-1+t20*t170*1.239290004698339E-2+t20*t173*1.425511796446178E-1-t20*t198*2.299375793262398E-2+t2*(-t132+t133+t150+DF*(t555*t555))*6.495770060634155E-2-t20*(-t132+t133+t150+DF*(t554*t554))*4.95217661627108E-1-t2*(t119-t553*t553)*1.425511796446178E-1+DF*t2*(t158+t159)*6.600263213023062E-2-DF*t2*t169*2.285027328820861E-1-DF*t20*t157*6.600263213023062E-2-DF*t20*t160*2.285027328820861E-1-DF*t2*t180*6.495770060634155E-2+DF*t2*t181*4.95217661627108E-1+DF*t20*t173*6.495770060634155E-2+t20*t43*t46*1.282720653353995E-2+DF*t20*(t119+t556*t556)*4.95217661627108E-1+t2*t43*(t32-t62)*1.891504900609351E-1;
    A0[1][2] = ddq5*(-5.441928004501005E-2)+dq4*t17*5.441928004501005E-2-t9*t40*5.441928004501005E-2+t4*t98*5.441928004501005E-2+t3*t107*3.673614299596095E-2-t3*t114*4.449764835237123E-1-t14*t107*4.449764835237123E-1-t14*t114*3.673614299596095E-2-t2*t162*4.449764835237126E-1-t2*t165*5.259428035599508E-3-t2*t181*4.322412204089501E-2+t2*t183*1.601628800082735E-1-t20*t166*5.967870808060961E-2-t20*t170*4.322412204089501E-2-t20*t173*5.832332699788399E-2+t20*(t124+t125-t142+t161)*1.601628800082735E-1-t2*(-t132+t133+t150+DF*(t559*t559))*9.557319382595281E-2-t20*(-t132+t133+t150+DF*(t558*t558))*3.813338088139938E-2+t20*(t156-t176)*4.449764835237126E-1+t2*(t119-t557*t557)*5.832332699788399E-2+DF*t2*(t158+t159)*1.37031364809188E-1-DF*t20*t157*1.37031364809188E-1+DF*t20*t160*4.449764835237126E-1+DF*t2*t180*9.557319382595281E-2+DF*t2*t181*3.813338088139938E-2-DF*t20*t173*9.557319382595281E-2+DF*t2*(t124+t142-t161-dq6*(t32-t62))*4.449764835237126E-1-t2*t34*t43*6.173093170882231E-2+t20*t43*t46*3.207204407386803E-3+DF*t20*(t119+t560*t560)*3.813338088139938E-2;
    A0[1][3] = ddq5*(-6.064232443726676E-3)+dq4*t17*6.064232443726676E-3-t9*t40*6.064232443726676E-3+t4*t98*6.064232443726676E-3+t3*t107*9.273913560348254E-3-t3*t114*1.267241057617371E-1-t14*t107*1.267241057617371E-1-t14*t114*9.273913560348254E-3-t2*t162*1.267241057617371E-1-t2*t181*2.164664100475015E-2+t2*t183*8.921738245622465E-2+t20*t166*2.19091623651983E-3-t20*t170*2.164664100475015E-2-t20*t173*7.106514150923243E-2+t20*(t124+t125-t142+t161)*8.921738245622465E-2+t2*(-t132+t133+t150+DF*(t563*t563))*9.733454286329098E-1-t20*(-t132+t133+t150+DF*(t562*t562))*4.696294696562867E-2+t20*(t156-t176)*1.267241057617371E-1+t2*(t119-t561*t561)*7.106514150923243E-2+t2*(t125-t142+t161)*8.255148680246483E-3-DF*t2*t162*1.06790656330653E-2+DF*t20*t160*1.267241057617371E-1-DF*t2*t180*9.733454286329098E-1+DF*t2*t181*4.696294696562867E-2+DF*t20*t173*9.733454286329098E-1+DF*t2*(t124+t142-t161-dq6*(t32-t62))*1.267241057617371E-1+t20*t43*t46*1.861566581233112E-2+DF*t20*(t156-t176)*1.06790656330653E-2+DF*t20*(t119+t564*t564)*4.696294696562867E-2+t2*t43*(t32-t62)*2.906173072909743E-2;
    A0[1][4] = ddq5*7.057871046390797E-2-dq4*t17*7.057871046390797E-2+t9*t40*7.057871046390797E-2-t4*t98*7.057871046390797E-2-t3*t107*1.037383491621931E-2-t3*t114*1.121603851859727E-1-t14*t107*1.121603851859727E-1+t14*t114*1.037383491621931E-2-t2*t162*1.121603851859728E-1+t2*t181*2.867544810062978E-1-t2*t183*9.030728612207537E-1+t20*t166*7.421790915681513E-2+t20*t170*2.867544810062978E-1+t20*t173*1.433130262212205E-1-t20*t198*9.030728612207537E-1+t2*(-t132+t133+t150+DF*(t567*t567))*7.871676279561546E-2+t20*(-t132+t133+t150+DF*(t566*t566))*7.989790536113454E-3+t20*(t156-t176)*1.121603851859728E-1-t2*(t119-t565*t565)*1.433130262212205E-1+t2*(t125-t142+t161)*3.639198692907088E-3+DF*t2*(t158+t159)*1.54403273340137E-2-DF*t20*t157*1.54403273340137E-2+DF*t20*t160*1.121603851859728E-1-DF*t2*t180*7.871676279561546E-2-DF*t2*t181*7.989790536113454E-3+DF*t20*t173*7.871676279561546E-2+DF*t2*(t124+t142-t161-dq6*(t32-t62))*1.121603851859728E-1-t20*t43*t46*5.047993982320393E-3-DF*t20*(t119+t568*t568)*7.989790536113454E-3+t2*t43*(t32-t62)*7.280911386740182E-2;
    A0[1][5] = ddq5*(-5.607933688014254E-2)+t2*(t158+t159)*1.46545076163143E-1+dq4*t17*5.607933688014254E-2-t9*t40*5.607933688014254E-2+t4*t98*5.607933688014254E-2+t3*t107*1.953440218514919E-1+t3*t114*1.46545076163143E-1+t14*t107*1.46545076163143E-1-t14*t114*1.953440218514919E-1-t2*t165*5.256204542499225E-3-t20*t157*1.46545076163143E-1-t2*t181*3.099430489965534E-2+t2*t183*7.301907278282217E-2-t20*t166*6.133554142264157E-2-t20*t170*3.099430489965534E-2-t20*t173*1.998002130722273E-2+t20*(t124+t125-t142+t161)*7.301907278282217E-2+t2*(-t132+t133+t150+DF*(t571*t571))*8.654896355910062E-3-t20*(-t132+t133+t150+DF*(t570*t570))*3.271474866328614E-1+t2*(t119-t569*t569)*1.998002130722273E-2-DF*t2*t162*1.143457348509764E-2-DF*t2*t169*1.46545076163143E-1-DF*t20*t160*1.46545076163143E-1-DF*t2*t180*8.654896355910062E-3+DF*t2*t181*3.271474866328614E-1+DF*t20*t173*8.654896355910062E-3-t2*t34*t43*1.199499650171297E-1-t20*t43*t46*5.335821905198891E-2+DF*t20*(t156-t176)*1.143457348509764E-2+DF*t20*(t119+t572*t572)*3.271474866328614E-1;
    A0[1][6] = ddq5*5.909596514852796E-1-dq4*t17*5.909596514852796E-1+t9*t40*5.909596514852796E-1-t4*t98*5.909596514852796E-1-t3*t107*1.499779649972985E-1-t3*t114*6.436179155324423E-2-t14*t107*6.436179155324423E-2+t14*t114*1.499779649972985E-1-t2*t162*6.436179155324406E-2-t2*t165*6.067292657070721E-2-t2*t181*5.032970460015648E-2+t2*t183*2.118248239979039E-1+t20*t166*5.302867249145723E-1-t20*t170*5.032970460015648E-2+t20*t173*3.808973154785784E-1+t20*(t124+t125-t142+t161)*2.118248239979039E-1+t2*(-t132+t133+t150+DF*(t575*t575))*1.075167472739597E-2+t20*(-t132+t133+t150+DF*(t574*t574))*2.077304157020058E-1+t20*(t156-t176)*6.436179155324406E-2-t2*(t119-t573*t573)*3.808973154785784E-1-DF*t2*t162*5.831699655064371E-3+DF*t20*t160*6.436179155324406E-2-DF*t2*t180*1.075167472739597E-2-DF*t2*t181*2.077304157020058E-1+DF*t20*t173*1.075167472739597E-2+DF*t2*(t124+t142-t161-dq6*(t32-t62))*6.436179155324406E-2+t20*t43*t46*1.224791521399127E-2+DF*t20*(t156-t176)*5.831699655064371E-3-DF*t20*(t119+t576*t576)*2.077304157020058E-1+t2*t43*(t32-t62)*4.818617135578564E-1;
    A0[1][7] = ddq5*(-1.834476900948051E-1)+dq4*t17*1.834476900948051E-1-t9*t40*1.834476900948051E-1+t4*t98*1.834476900948051E-1-t3*t107*3.372330007287602E-1-t3*t114*1.669314493978117E-2-t14*t107*1.669314493978117E-2+t14*t114*3.372330007287602E-1-t2*t162*1.66931449397811E-2-t2*t165*9.230901807631495E-2+t2*t181*4.724539616897632E-2+t2*t183*7.388933463878639E-2-t20*t166*2.757567081711201E-1+t20*t170*4.724539616897632E-2+t20*t173*6.355775113703721E-1+t20*(t124+t125-t142+t161)*7.388933463878639E-2+t2*(-t132+t133+t150+DF*(t579*t579))*3.823780053561078E-2-t20*(-t132+t133+t150+DF*(t578*t578))*3.225223840807314E-1+t20*(t156-t176)*1.66931449397811E-2-t2*(t119-t577*t577)*6.355775113703721E-1+DF*t2*(t158+t159)*5.935072798402684E-4-DF*t20*t157*5.935072798402684E-4+DF*t20*t160*1.66931449397811E-2-DF*t2*t180*3.823780053561078E-2+DF*t2*t181*3.225223840807314E-1+DF*t20*t173*3.823780053561078E-2+DF*t2*(t124+t142-t161-dq6*(t32-t62))*1.66931449397811E-2-t2*t34*t43*7.673877409296112E-1-t20*t43*t46*3.993220146821761E-1+DF*t20*(t119+t580*t580)*3.225223840807314E-1;
    A0[1][8] = ddq5*(-3.708955095784515E-1)+dq4*t17*3.708955095784515E-1-t9*t40*3.708955095784515E-1+t4*t98*3.708955095784515E-1+t3*t107*1.511554078331053E-1-t3*t114*7.276747241242461E-3-t14*t107*7.276747241242461E-3-t14*t114*1.511554078331053E-1-t2*t162*7.276747241242628E-3-t2*t181*4.755947509212227E-1-t2*t183*1.046520439511568E-1+t20*t166*2.5079861497516E-1-t20*t170*4.755947509212227E-1+t20*t173*3.451560721707804E-1-t20*t198*1.046520439511568E-1+t2*(-t132+t133+t150+DF*(t583*t583))*1.655777632633164E-2+t20*(-t132+t133+t150+DF*(t582*t582))*1.492290127538502E-1+t20*(t156-t176)*7.276747241242628E-3-t2*(t119-t581*t581)*3.451560721707804E-1+t2*(t125-t142+t161)*6.216941245536115E-1+DF*t2*(t158+t159)*1.573424800256081E-3-DF*t20*t157*1.573424800256081E-3+DF*t20*t160*7.276747241242628E-3-DF*t2*t180*1.655777632633164E-2-DF*t2*t181*1.492290127538502E-1+DF*t20*t173*1.655777632633164E-2+DF*t2*(t124+t142-t161-dq6*(t32-t62))*7.276747241242628E-3-t20*t43*t46*5.614318369320905E-1-DF*t20*(t119+t584*t584)*1.492290127538502E-1+t2*t43*(t32-t62)*3.110609025966811E-1;
    A0[1][9] = ddq5*9.611743684315729E-2+t2*(t158+t159)*1.411294816071083E-4-dq4*t17*9.611743684315729E-2+t9*t40*9.611743684315729E-2-t4*t98*9.611743684315729E-2-t3*t107*4.364316505761144E-1+t3*t114*1.411294816067475E-4+t14*t107*1.411294816067475E-4+t14*t114*4.364316505761144E-1-t2*t165*4.123039869202177E-2-t20*t157*1.411294816071083E-4-t2*t181*5.837967720392215E-1-t2*t183*1.902430641136356E-1+t20*t166*5.488703815113571E-2-t20*t170*5.837967720392215E-1-t20*t173*2.6959535670767E-1-t20*t198*1.902430641136356E-1-t2*(-t132+t133+t150+DF*(t587*t587))*2.803650741840071E-2-t20*(-t132+t133+t150+DF*(t586*t586))*4.723442625690057E-1+t2*(t119-t585*t585)*2.6959535670767E-1+DF*t2*(t158+t159)*8.065600800340112E-4-DF*t2*t169*1.411294816071083E-4-DF*t20*t157*8.065600800340112E-4-DF*t20*t160*1.411294816071083E-4+DF*t2*t180*2.803650741840071E-2+DF*t2*t181*4.723442625690057E-1-DF*t20*t173*2.803650741840071E-2+t20*t43*t46*1.727470725819239E-1+DF*t20*(t119+t588*t588)*4.723442625690057E-1+t2*t43*(t32-t62)*1.864037120410379E-1;
    A0[1][10] = ddq5*1.768024530539154E-1-dq4*t17*1.768024530539154E-1+t9*t40*1.768024530539154E-1-t4*t98*1.768024530539154E-1+t3*t107*2.258113642628351E-1-t3*t114*6.393169687679263E-3-t14*t107*6.393169687679263E-3-t14*t114*2.258113642628351E-1-t2*t162*6.393169687679256E-3-t2*t165*5.095200883818051E-1-t2*t181*5.384797602777249E-1-t2*t183*1.711475321295061E-1-t20*t166*3.327176353278897E-1-t20*t170*5.384797602777249E-1+t20*t173*2.487136440463937E-1-t20*t198*1.711475321295061E-1+t2*(-t132+t133+t150+DF*(t591*t591))*2.611776744625944E-2+t20*(-t132+t133+t150+DF*(t590*t590))*2.645433458194964E-1+t20*(t156-t176)*6.393169687679256E-3-t2*(t119-t589*t589)*2.487136440463937E-1-DF*t2*t162*2.952329903709132E-4+DF*t20*t160*6.393169687679256E-3-DF*t2*t180*2.611776744625944E-2-DF*t2*t181*2.645433458194964E-1+DF*t20*t173*2.611776744625944E-2+DF*t2*(t124+t142-t161-dq6*(t32-t62))*6.393169687679256E-3-t2*t34*t43*2.095580979476677E-1+t20*t43*t46*6.326796257620271E-1+DF*t20*(t156-t176)*2.952329903709132E-4-DF*t20*(t119+t592*t592)*2.645433458194964E-1;
    A0[1][11] = ddq5*(-1.982711918626746E-1)+t2*(t158+t159)*2.637005182893605E-2+dq4*t17*1.982711918626746E-1-t9*t40*1.982711918626746E-1+t4*t98*1.982711918626746E-1+t3*t107*2.717257902041934E-1+t3*t114*2.637005182893626E-2+t14*t107*2.637005182893626E-2-t14*t114*2.717257902041934E-1-t2*t165*7.634090375169782E-2-t20*t157*2.637005182893605E-2+t2*t181*1.75384708133155E-2+t2*t183*8.360853706282804E-2-t20*t166*2.746120956143727E-1+t20*t170*1.75384708133155E-2+t20*t173*1.587705278841551E-1+t20*(t124+t125-t142+t161)*8.360853706282804E-2+t2*(-t132+t133+t150+DF*(t595*t595))*3.258803010186304E-2+t20*(-t132+t133+t150+DF*(t594*t594))*1.562703903641717E-1-t2*(t119-t593*t593)*1.587705278841551E-1-DF*t2*t162*1.432775270859373E-3-DF*t2*t169*2.637005182893605E-2-DF*t20*t160*2.637005182893605E-2-DF*t2*t180*3.258803010186304E-2-DF*t2*t181*1.562703903641717E-1+DF*t20*t173*3.258803010186304E-2-t2*t34*t43*8.557926814146141E-2+t20*t43*t46*2.653737312246091E-1+DF*t20*(t156-t176)*1.432775270859373E-3-DF*t20*(t119+t596*t596)*1.562703903641717E-1;
    A0[1][12] = ddq5*(-4.424277632865862E-2)+dq4*t17*4.424277632865862E-2-t9*t40*4.424277632865862E-2+t4*t98*4.424277632865862E-2-t3*t107*2.243916705264433E-1-t3*t114*3.536256041471455E-3-t14*t107*3.536256041471455E-3+t14*t114*2.243916705264433E-1-t2*t162*3.53625604147142E-3-t2*t165*4.885929489047534E-3+t2*t181*2.285455681410841E-1+t2*t183*1.01816011982422E-1-t20*t166*4.912870581770619E-2+t20*t170*2.285455681410841E-1+t20*t173*3.487108196788574E-1+t20*(t124+t125-t142+t161)*1.01816011982422E-1-t2*(-t132+t133+t150+DF*(t599*t599))*1.562254931189786E-2-t20*(-t132+t133+t150+DF*(t598*t598))*2.211839564438601E-1+t20*(t156-t176)*3.53625604147142E-3-t2*(t119-t597*t597)*3.487108196788574E-1+DF*t2*(t158+t159)*5.609080651350722E-4-DF*t20*t157*5.609080651350722E-4+DF*t20*t160*3.53625604147142E-3+DF*t2*t180*1.562254931189786E-2+DF*t2*t181*2.211839564438601E-1-DF*t20*t173*1.562254931189786E-2+DF*t2*(t124+t142-t161-dq6*(t32-t62))*3.53625604147142E-3+t20*t43*t46*8.293926092498041E-1+DF*t20*(t119+t600*t600)*2.211839564438601E-1+t2*t43*(t32-t62)*7.753779739430503E-1;
    A0[2][0] = ddq6*(-3.236148722176489E-3)+t120*2.940732674575382E-2-dq5*t31*3.236148722176489E-3-dq6*t34*6.735224297140334E-3+dq6*t46*2.770866655375196E-2-t3*t55*3.236148722176489E-3-t43*t46*2.770866655375196E-2-t2*t128*2.770866655375196E-2-t14*t116*3.236148722176489E-3+t2*t129*6.735224297140334E-3-t20*t128*6.735224297140334E-3-t20*t129*2.770866655375196E-2+t2*t149*3.288365945939265E-1-t20*t149*1.683674172863262E-1+t43*(t32-t62)*6.735224297140334E-3+t46*(t32-t62)*3.461608618002457E-2+t2*(t146+t147-t154-t155)*1.683674172863262E-1+t20*(t146+t147-t154-t155)*3.288365945939265E-1-(t601*t601)*2.940732674575382E-2;
    A0[2][1] = ddq6*1.176691522489075E-2+t120*2.299375793262398E-2-dq6*t34*1.239290004698339E-2-dq6*t46*1.425511796446178E-1+t3*t55*1.176691522489075E-2-t34*t46*1.763232835273951E-1+t43*t46*1.425511796446178E-1+t2*t128*1.425511796446178E-1+t14*t116*1.176691522489075E-2+t2*t129*1.239290004698339E-2-t20*t128*1.239290004698339E-2+t20*t129*1.425511796446178E-1-t2*t149*4.95217661627108E-1-t20*t148*4.95217661627108E-1-t20*t149*6.495770060634155E-2+dq5*(t30-t42)*1.176691522489075E-2+t43*(t32-t62)*1.239290004698339E-2+t2*(t146+t147-t154-t155)*6.495770060634155E-2-(t602*t602)*2.299375793262398E-2;
    A0[2][2] = ddq6*2.052223628212705E-3-t120*1.601628800082735E-1+dq6*t46*5.832332699788399E-2+t3*t55*2.052223628212705E-3-t34*t43*4.322412204089501E-2-t43*t46*5.832332699788399E-2-t2*t128*5.832332699788399E-2+t14*t116*2.052223628212705E-3-t2*t129*4.322412204089501E-2+t20*t128*4.322412204089501E-2-t20*t129*5.832332699788399E-2-t2*t148*9.557319382595281E-2-t2*t149*3.813338088139938E-2-t20*t148*3.813338088139938E-2+t20*t149*9.557319382595281E-2+dq5*(t30-t42)*2.052223628212705E-3+dq6*(t32-t62)*4.322412204089501E-2+t46*(t32-t62)*6.493813611620911E-2+(t603*t603)*1.601628800082735E-1;
    A0[2][3] = ddq6*(-2.68708144925776E-2)-t120*8.921738245622465E-2-dq5*t31*2.68708144925776E-2+dq6*t46*7.106514150923243E-2-t3*t55*2.68708144925776E-2-t34*t43*2.164664100475015E-2-t34*t46*1.044606491676631E-2-t43*t46*7.106514150923243E-2-t2*t128*7.106514150923243E-2-t14*t116*2.68708144925776E-2-t2*t129*2.164664100475015E-2+t20*t128*2.164664100475015E-2-t20*t129*7.106514150923243E-2-t2*t149*4.696294696562867E-2-t20*t148*4.696294696562867E-2-t20*t149*9.733454286329098E-1+dq6*(t32-t62)*2.164664100475015E-2+t2*(t146+t147-t154-t155)*9.733454286329098E-1+(t604*t604)*8.921738245622465E-2;
    A0[2][4] = ddq6*1.408795289413305E-3+t120*9.030728612207537E-1-dq6*t34*2.867544810062978E-1-dq6*t46*1.433130262212205E-1+t3*t55*1.408795289413305E-3-t34*t46*7.785710784972222E-2+t43*t46*1.433130262212205E-1+t2*t128*1.433130262212205E-1+t14*t116*1.408795289413305E-3+t2*t129*2.867544810062978E-1-t20*t128*2.867544810062978E-1+t20*t129*1.433130262212205E-1+t2*t149*7.989790536113454E-3-t20*t149*7.871676279561546E-2+dq5*(t30-t42)*1.408795289413305E-3+t43*(t32-t62)*2.867544810062978E-1+t2*(t146+t147-t154-t155)*7.871676279561546E-2+t20*(t146+t147-t154-t155)*7.989790536113454E-3-(t605*t605)*9.030728612207537E-1;
    A0[2][5] = ddq6*5.861442359448814E-2-t120*7.301907278282217E-2+dq6*t46*1.998002130722273E-2+t3*t55*5.861442359448814E-2-t34*t43*3.099430489965534E-2-t43*t46*1.998002130722273E-2-t2*t128*1.998002130722273E-2+t14*t116*5.861442359448814E-2-t2*t129*3.099430489965534E-2+t20*t128*3.099430489965534E-2-t20*t129*1.998002130722273E-2-t2*t149*3.271474866328614E-1-t20*t148*3.271474866328614E-1-t20*t149*8.654896355910062E-3+dq5*(t30-t42)*5.861442359448814E-2+dq6*(t32-t62)*3.099430489965534E-2+t46*(t32-t62)*6.659174596514079E-2+t2*(t146+t147-t154-t155)*8.654896355910062E-3+(t606*t606)*7.301907278282217E-2;
    A0[2][6] = ddq6*4.842501135671594E-2-t120*2.118248239979039E-1-dq6*t46*3.808973154785784E-1+t3*t55*4.842501135671594E-2-t34*t43*5.032970460015648E-2-t34*t46*4.696137983438651E-1+t43*t46*3.808973154785784E-1+t2*t128*3.808973154785784E-1+t14*t116*4.842501135671594E-2-t2*t129*5.032970460015648E-2+t20*t128*5.032970460015648E-2+t20*t129*3.808973154785784E-1+t2*t149*2.077304157020058E-1-t20*t149*1.075167472739597E-2+dq5*(t30-t42)*4.842501135671594E-2+dq6*(t32-t62)*5.032970460015648E-2+t2*(t146+t147-t154-t155)*1.075167472739597E-2+t20*(t146+t147-t154-t155)*2.077304157020058E-1+(t607*t607)*2.118248239979039E-1;
    A0[2][7] = ddq6*4.916310327584911E-1-t120*7.388933463878639E-2-dq6*t34*4.724539616897632E-2-dq6*t46*6.355775113703721E-1+t3*t55*4.916310327584911E-1+t43*t46*6.355775113703721E-1+t2*t128*6.355775113703721E-1+t14*t116*4.916310327584911E-1+t2*t129*4.724539616897632E-2-t20*t128*4.724539616897632E-2+t20*t129*6.355775113703721E-1-t2*t149*3.225223840807314E-1-t20*t148*3.225223840807314E-1-t20*t149*3.823780053561078E-2+dq5*(t30-t42)*4.916310327584911E-1+t43*(t32-t62)*4.724539616897632E-2+t46*(t32-t62)*3.68065726247435E-1+t2*(t146+t147-t154-t155)*3.823780053561078E-2+(t608*t608)*7.388933463878639E-2;
    A0[2][8] = ddq6*(-6.026228762152103E-2)+t120*1.046520439511568E-1-dq5*t31*6.026228762152103E-2-dq6*t46*3.451560721707804E-1-t3*t55*6.026228762152103E-2-t34*t43*4.755947509212227E-1-t34*t46*8.724927395287715E-1+t43*t46*3.451560721707804E-1+t2*t128*3.451560721707804E-1-t14*t116*6.026228762152103E-2-t2*t129*4.755947509212227E-1+t20*t128*4.755947509212227E-1+t20*t129*3.451560721707804E-1+t2*t149*1.492290127538502E-1-t20*t149*1.655777632633164E-2+dq6*(t32-t62)*4.755947509212227E-1+t2*(t146+t147-t154-t155)*1.655777632633164E-2+t20*(t146+t147-t154-t155)*1.492290127538502E-1-(t609*t609)*1.046520439511568E-1;
    A0[2][9] = ddq6*(-1.315166738899022E-1)+t120*1.902430641136356E-1-dq5*t31*1.315166738899022E-1+dq6*t46*2.6959535670767E-1-t3*t55*1.315166738899022E-1-t34*t43*5.837967720392215E-1-t34*t46*1.365663945911394E-2-t43*t46*2.6959535670767E-1-t2*t128*2.6959535670767E-1-t14*t116*1.315166738899022E-1-t2*t129*5.837967720392215E-1+t20*t128*5.837967720392215E-1-t20*t129*2.6959535670767E-1-t2*t148*2.803650741840071E-2-t2*t149*4.723442625690057E-1-t20*t148*4.723442625690057E-1+t20*t149*2.803650741840071E-2+dq6*(t32-t62)*5.837967720392215E-1-(t610*t610)*1.902430641136356E-1;
    A0[2][10] = ddq6*(-1.23159537380222E-1)+t120*1.711475321295061E-1-dq5*t31*1.23159537380222E-1-dq6*t46*2.487136440463937E-1-t3*t55*1.23159537380222E-1-t34*t43*5.384797602777249E-1+t43*t46*2.487136440463937E-1+t2*t128*2.487136440463937E-1-t14*t116*1.23159537380222E-1-t2*t129*5.384797602777249E-1+t20*t128*5.384797602777249E-1+t20*t129*2.487136440463937E-1+t2*t149*2.645433458194964E-1-t20*t149*2.611776744625944E-2+dq6*(t32-t62)*5.384797602777249E-1+t46*(t32-t62)*8.422377237096948E-1+t2*(t146+t147-t154-t155)*2.611776744625944E-2+t20*(t146+t147-t154-t155)*2.645433458194964E-1-(t611*t611)*1.711475321295061E-1;
    A0[2][11] = ddq6*(-1.890328274729113E-1)-t120*8.360853706282804E-2-dq5*t31*1.890328274729113E-1-dq6*t34*1.75384708133155E-2-dq6*t46*1.587705278841551E-1-t3*t55*1.890328274729113E-1+t43*t46*1.587705278841551E-1+t2*t128*1.587705278841551E-1-t14*t116*1.890328274729113E-1+t2*t129*1.75384708133155E-2-t20*t128*1.75384708133155E-2+t20*t129*1.587705278841551E-1+t2*t149*1.562703903641717E-1-t20*t149*3.258803010186304E-2+t43*(t32-t62)*1.75384708133155E-2+t46*(t32-t62)*3.509529993660705E-1+t2*(t146+t147-t154-t155)*3.258803010186304E-2+t20*(t146+t147-t154-t155)*1.562703903641717E-1+(t612*t612)*8.360853706282804E-2;
    A0[2][12] = ddq6*(-8.245066797607565E-1)-t120*1.01816011982422E-1-dq5*t31*8.245066797607565E-1-dq6*t34*2.285455681410841E-1-dq6*t46*3.487108196788574E-1-t3*t55*8.245066797607565E-1+t43*t46*3.487108196788574E-1+t2*t128*3.487108196788574E-1-t14*t116*8.245066797607565E-1+t2*t129*2.285455681410841E-1-t20*t128*2.285455681410841E-1+t20*t129*3.487108196788574E-1-t2*t148*1.562254931189786E-2-t2*t149*2.211839564438601E-1-t20*t148*2.211839564438601E-1+t20*t149*1.562254931189786E-2+t43*(t32-t62)*2.285455681410841E-1+t46*(t32-t62)*5.401463530675372E-2+(t613*t613)*1.01816011982422E-1;

	for (int i = 0; i < 3; i++)
        for (int j = 0; j < LoadReduceParas; j++)
            distalVec[LoadReduceParas * i + j] = A0[i][j];

}

void LoadFullMatrix(const double* q, const double* dq, const double* ddq, const double* ts, double* distalVec)
{
	double q1, q2, q3, q4, q5, q6;
	double dq1, dq2, dq3, dq4, dq5, dq6;
	double ddq1, ddq2, ddq3, ddq4, ddq5, ddq6;
	double ts1, ts2, ts3, ts4, ts5, ts6;
	double g = 9.81;


	q1 = q[0];
	q2 = q[1];
	q3 = q[2];
	q4 = q[3];
	q5 = q[4];
	q6 = q[5];

	dq1 = dq[0]; dq2 = dq[1]; dq3 = dq[2]; dq4 = dq[3]; dq5 = dq[4]; dq6 = dq[5];
	ddq1 = ddq[0]; ddq2 = ddq[1]; ddq3 = ddq[2]; ddq4 = ddq[3]; ddq5 = ddq[4]; ddq6 = ddq[5];

	ts1 = ts[0]; ts2 = ts[1]; ts3 = ts[2];

	double A0[3][40];
	for (int i = 0; i < RobotAxis / 2; i++)
		for (int j = 0; j < 40; j++)
			A0[i][j] = 0;


	double DF = 0;

	t2 = cos(q2);
	t3 = cos(q3);
	t4 = sin(q2);
	t5 = sin(q3);
	t6 = dq1 * t2*t5;
	t7 = dq1 * t3*t4;
	t8 = t6 + t7;
	t9 = dq1 * t2*t3;
	t11 = dq1 * t4*t5;
	t10 = t9 - t11;
	t12 = ddq1 * t2;
	t19 = dq1 * dq2*t4;
	t13 = t12 - t19;
	t14 = ddq1 * t4;
	t15 = dq1 * dq2*t2;
	t16 = t14 + t15;
	t17 = dq2 + dq3;
	t18 = dq1 * dq1;
	t20 = a3 * ddq2;
	t21 = d3 * t16;
	t22 = a2 * t4*t18;
	t23 = a3 * t2*t4*t18;
	t60 = g * t2;
	t61 = d3 * dq1*dq2*t2;
	t24 = t20 + t21 + t22 + t23 - t60 - t61;
	t25 = a3 * dq2;
	t26 = d3 * dq1*t4;
	t27 = t25 + t26;
	t28 = dq2 * t27;
	t29 = g * t4;
	t30 = d3 * t13;
	t31 = a2 * t2*t18;
	t32 = t2 * t2;
	t33 = a3 * t18*t32;
	t34 = t28 + t29 + t30 + t31 + t33;
	t35 = sin(q4);
	t36 = cos(q4);
	t37 = ddq2 + ddq3;
	t38 = t8 * t35;
	t46 = t17 * t36;
	t39 = t38 - t46;
	t40 = dq3 * t10;
	t41 = t3 * t16;
	t42 = t5 * t13;
	t43 = t40 + t41 + t42;
	t44 = t36 * t43;
	t45 = t35 * t37;
	t47 = dq4 - t9 + t11;
	t48 = t17 * t35;
	t49 = t8 * t36;
	t50 = t48 + t49;
	t51 = dq3 * t8;
	t52 = t5 * t16;
	t53 = dq4 * t50;
	t54 = t35 * t43;
	t55 = t47 * t47;
	t56 = t38 - t46;
	t57 = t36 * t47*t50;
	t58 = t47 * t50;
	t89 = t36 * t37;
	t59 = t53 + t54 + t58 - t89;
	t62 = t3 * t24;
	t63 = t5 * t34;
	t64 = t39 * t50;
	t65 = t38 - t46;
	t90 = dq4 * t39;
	t66 = t44 + t45 - t90 - t39 * t47;
	t67 = t17 * t17;
	t68 = a4 * t10;
	t75 = d4 * t8;
	t69 = t68 - t75;
	t70 = t8 * t69;
	t71 = a4 * t37;
	t91 = d4 * t67;
	t72 = t62 + t63 + t70 + t71 - t91;
	t73 = t50 * t50;
	t74 = t38 - t46;
	t76 = t3 * t34;
	t93 = t3 * t13;
	t77 = t51 + t52 - t93;
	t78 = a4 * t77;
	t79 = d4 * t43;
	t80 = dq1 * t4*t27;
	t81 = a4 * t8*t17;
	t82 = d4 * t10*t17;
	t83 = d3 * t18*t32;
	t92 = a2 * ddq1;
	t94 = a3 * t13;
	t84 = t78 + t79 + t80 + t81 + t82 + t83 - t92 - t94;
	t85 = a4 * t67;
	t86 = t10 * t69;
	t87 = d4 * t37;
	t96 = t5 * t24;
	t88 = t76 + t85 + t86 + t87 - t96;
	t95 = t35 * t84;
	t126 = t36 * t88;
	t97 = t95 - t126;
	t98 = t36 * t84;
	t99 = t35 * t88;
	t100 = t98 + t99;
	t101 = cos(q5);
	t102 = sin(q5);
	t103 = t50 * t102;
	t104 = t47 * t101;
	t105 = t103 + t104;
	t106 = t47 * t102;
	t108 = t50 * t101;
	t107 = t106 - t108;
	t109 = dq5 - t38 + t46;
	t110 = t44 + t45 - t90;
	t111 = ddq4 + t51 + t52 - t93;
	t112 = t102 * t111;
	t113 = dq5 * t105;
	t114 = t105 * t109;
	t115 = t107 * t107;
	t116 = dq5 * t107;
	t117 = t107 * t109;
	t118 = t102 * t110;
	t119 = t101 * t111;
	t120 = t105 * t107;
	t121 = t109 * t109;
	t122 = t105 * t105;
	t123 = t101 * t105*t109;
	t124 = ddq5 - t53 - t54 + t89 + t120;
	t125 = t101 * t124;
	t127 = t121 + t122;
	t128 = -ddq5 + t53 + t54 - t89 + t120;
	t129 = t102 * t128;
	t130 = t115 + t121;
	t132 = t101 * t110;
	t131 = t112 + t113 + t114 - t132;
	t133 = -t116 + t117 + t118 + t119;
	t134 = t72 * t101;
	t140 = t97 * t102;
	t135 = t134 - t140;
	t136 = t72 * t102;
	t137 = t97 * t101;
	t138 = t136 + t137;
	t139 = t112 + t113 - t114 - t132;
	t141 = t101 * t135;
	t142 = t102 * t138;
	t143 = t141 + t142;
	t144 = d4 * t35*t100;
	t145 = cos(q6);
	t146 = sin(q6);
	t147 = ddq5 - t53 - t54 + t89;
	t148 = t107 * t146;
	t149 = t109 * t145;
	t150 = t148 + t149;
	t151 = t107 * t145;
	t152 = t112 + t113 - t132;
	t153 = dq6 * t150;
	t154 = t146 * t147;
	t158 = t145 * t152;
	t155 = t153 + t154 - t158;
	t156 = dq6 + t103 + t104;
	t159 = t109 * t146;
	t157 = t151 - t159;
	t160 = t151 - t159;
	t161 = t156 * t157;
	t162 = dq6 * t157;
	t163 = t146 * t152;
	t164 = t145 * t147;
	t165 = t161 + t162 + t163 + t164;
	t166 = t150 * t156;
	t167 = t153 + t154 - t158 + t166;
	t168 = t151 - t159;
	t169 = t156 * t156;
	t170 = t151 - t159;
	t174 = t150 * t157;
	t171 = ddq6 - t116 + t118 + t119 - t174;
	t172 = t102 * t150*t157;
	t173 = t150 * t150;
	t175 = dq6 * (t151 - t159);
	t176 = t169 - t173;
	t177 = ddq6 - t116 + t118 + t119 + t174;
	t178 = t145 * t150*t156;
	t179 = t146 * t156*t157;
	t180 = t146 * t171;
	t181 = t169 + t173;
	t182 = DF * t121;
	t183 = DF * t115;
	t184 = -t134 + t140 + t182 + t183;
	t185 = t145 * t171;
	t186 = t145 * t181;
	t187 = t180 + t186;
	t188 = t146 * t184;
	t189 = t151 - t159;
	t190 = t150 * (t151 - t159);
	t191 = ddq6 - t116 + t118 + t119 + t190;
	t192 = t151 - t159;
	t193 = DF * t105*t107;
	t203 = DF * t147;
	t194 = t136 + t137 + t193 - t203;
	t205 = DF * t152;
	t206 = DF * t105*t109;
	t195 = t98 + t99 - t205 - t206;
	t196 = t151 - t159;
	t197 = t151 - t159;
	t198 = t151 - t159;
	t199 = t145 * t191;
	t200 = t151 - t159;
	t201 = t153 + t154 - t158 - t166;
	t202 = -t161 + t163 + t164 + t175;
	t204 = t145 * t194;
	t207 = t146 * t195;
	t208 = t204 + t207;
	t209 = t145 * t195;
	t211 = t146 * t194;
	t210 = t209 - t211;
	t212 = t151 - t159;
	t213 = t146 * t201;
	t214 = t145 * t202;
	t215 = t213 + t214;
	t216 = t146 * t210;
	t217 = t145 * t210;
	t218 = t146 * t208;
	t233 = t145 * t208;
	t219 = t216 - t233;
	t220 = t115 - t122;
	t221 = t146 * t155;
	t222 = t145 * t156*t157;
	t223 = t145 * t167;
	t224 = t151 - t159;
	t225 = t163 + t164 + t175;
	t226 = t145 * t225;
	t227 = t146 * t150*t156;
	t228 = DF * t146*t171;
	t229 = DF * t145*t181;
	t230 = t228 + t229 - t145 * t184;
	t231 = DF * t145*t191;
	t232 = t151 - t159;
	t234 = DF * t145*t202;
	t235 = DF * t145*t208;
	t236 = t151 - t159;
	t237 = ddq6 - t116 + t118 + t119;
	A0[0][0] = -t8 * t10;
	A0[0][1] = t8 * t8 - t10 * t10;
	A0[0][2] = -dq3 * t10 - t5 * t13 - t3 * t16 + t10 * t17;
	A0[0][3] = t8 * t10;
	A0[0][4] = t51 + t52 - t3 * t13 - t8 * t17;
	A0[0][5] = t37;
	A0[0][6] = t62 + t63;
	A0[0][7] = t76 - t5 * t24;
	A0[0][10] = t57 + t35 * (t44 + t45 - dq4 * t39);
	A0[0][11] = -t35 * t59 + t36 * t66;
	A0[0][12] = -t35 * (ddq4 + t51 + t52 - t3 * t13 - t39 * t50) - t36 * (t55 - t73);
	A0[0][13] = -t36 * (t53 + t54 - t36 * t37) + t35 * t47*(t38 - t46);
	A0[0][14] = -t36 * (ddq4 + t51 + t52 + t64 - t3 * t13) + t35 * (t55 - t56 * t56);
	A0[0][15] = -t57 - t35 * t39*t47;
	A0[0][16] = -a4 * t59 + t36 * t72 + d4 * t36*(t55 + t65 * t65) + d4 * t35*(ddq4 + t51 + t52 - t64 - t3 * t13);
	A0[0][17] = -a4 * t66 - t35 * t72 - d4 * t35*(t55 + t73) + d4 * t36*(ddq4 + t51 + t52 - t3 * t13 + t50 * (t38 - t46));
	A0[0][18] = -t36 * t97 + t35 * t100 - a4 * (t73 + t74 * t74) - d4 * t36*(t53 + t54 - t58 - t89) + d4 * t35*(t44 + t45 - t90 + t47 * (t38 - t46));
	A0[0][19] = t144 + a4 * t72 - d4 * t36*t97;
	A0[0][20] = -t35 * (t101*(t112 + t113 - t101 * t110) - t102 * t107*t109) - t36 * t105*t107;
	A0[0][21] = t35 * (t102*t131 + t101 * (t116 + t117 - t101 * t111 - t102 * t110)) + t36 * t220;
	A0[0][22] = -t35 * (t125 + t102 * (t115 - t121)) + t36 * (t112 + t113 - t114 - t101 * t110);
	A0[0][23] = t35 * (t123 + t102 * (-t116 + t118 + t119)) + t36 * t105*t107;
	A0[0][24] = -t35 * (t129 - t101 * (t121 - t122)) + t36 * t133;
	A0[0][25] = t36 * t147 - t35 * (t123 + t102 * t107*t109);
	A0[0][26] = t36 * t135 + a4 * (t125 - t102 * t127) + d4 * t36*(t102*t124 + t101 * t127) - d4 * t35*(t116 + t117 - t118 - t119) + t35 * t100*t102;
	A0[0][27] = -t36 * t138 + a4 * (t129 - t101 * t130) - d4 * t36*(t101*t128 + t102 * t130) - d4 * t35*t131 + t35 * t100*t101;
	A0[0][28] = t35 * t143 + a4 * (t102*t133 - t101 * t139) - d4 * t36*(t101*t133 + t102 * t139) + d4 * t35*(t115 + t122);
	A0[0][29] = t144 + a4 * t143 + d4 * t36*(t102*t135 - t101 * t138);
	A0[0][30] = t36 * (t221 - t145 * t156*t157) + t35 * (t172 + t101 * (t179 + t145 * t155));
	A0[0][31] = t35 * (t101*(t145*t165 - t146 * t167) - t102 * (t173 - t160 * t160)) + t36 * (t223 + t146 * t165);
	A0[0][32] = -t36 * (t180 + t145 * (t169 - t168 * t168)) - t35 * (t102*t201 + t101 * (t185 - t146 * (t169 - t170 * t170)));
	A0[0][33] = t36 * (t226 - t146 * t150*t156) - t35 * (t172 + t101 * (t178 + t146 * (t162 + t163 + t164)));
	A0[0][34] = -t35 * (t102*t202 - t101 * (t145*t176 + t146 * t177)) - t36 * (t145*t177 - t146 * t176);
	A0[0][35] = t36 * (t222 + t227) + t35 * (t102*t237 + t101 * (t178 - t179));
	A0[0][36] = t35 * (t102*t210 + t101 * (t188 + DF * t145*t171 - DF * t146*t181)) + t36 * t230 + a4 * (t101*t165 - t102 * t187) + d4 * t36*(t102*t165 + t101 * t187) + d4 * t35*(t185 - t146 * t181);
	A0[0][37] = -t35 * (t102*t208 + t101 * (-t145 * t184 + DF * t146*t191 + DF * t145*(t169 + t192 * t192))) - a4 * (t102*(t199 - t146 * (t169 + t196 * t196)) + t101 * t167) + t36 * (t188 + t231 - DF * t146*(t169 + t189 * t189)) - d4 * t35*(t146*t191 + t145 * (t169 + t197 * t197)) + d4 * t36*(t101*(t199 - t146 * (t169 + t198 * t198)) - t102 * t167);
	A0[0][38] = -a4 * (t102*t215 + t101 * (t173 + t200 * t200)) + t36 * (t216 + t234 - t145 * t208 + DF * t146*t201) + t35 * t101*(t217 + t218 + DF * t145*(t153 + t154 - t158 - t166) - DF * t146*t202) + d4 * t35*(t145*t201 - t146 * t202) + d4 * t36*(t101*t215 - t102 * (t173 + t212 * t212));
	A0[0][39] = -t36 * (t235 - DF * t146*t210) - a4 * (t101*t184 + t102 * t219) - d4 * t36*(t102*t184 - t101 * t219) + d4 * t35*(t217 + t218) + t35 * t101*(DF*t146*t208 + DF * t145*t210);
	A0[1][20] = -t120;
	A0[1][21] = t220;
	A0[1][22] = t139;
	A0[1][23] = t120;
	A0[1][24] = t133;
	A0[1][25] = t147;
	A0[1][26] = t135;
	A0[1][27] = -t136 - t137;
	A0[1][30] = t221 - t222;
	A0[1][31] = t223 + t146 * (t161 + t162 + t163 + t164);
	A0[1][32] = -t180 - t145 * (t169 - t224 * t224);
	A0[1][33] = t226 - t227;
	A0[1][34] = -t199 + t146 * t176;
	A0[1][35] = t227 + t145 * t156*(t151 - t159);
	A0[1][36] = t230;
	A0[1][37] = t188 + t231 - DF * t146*(t169 + t232 * t232);
	A0[1][38] = t216 - t233 + t234 + DF * t146*(t153 + t154 - t158 - t166);
	A0[1][39] = -t235 + DF * t146*t210;
	A0[2][30] = t190;
	A0[2][31] = -t173 + t236 * t236;
	A0[2][32] = -t153 - t154 + t158 + t166;
	A0[2][33] = -t174;
	A0[2][34] = -t162 - t163 - t164 + t156 * (t151 - t159);
	A0[2][35] = t237;
	A0[2][36] = t210;
	A0[2][37] = -t204 - t207;

	for (int i = 0; i < 3; i++)
		for (int j = 0; j < 40; j++)
			distalVec[40 * i + j] = A0[i][j];

}

void LoadReducedMatrix(const double* q, const double* dq, const double* ddq, const double* ts, const double *Coef, const double *CoefInv,double* distalVec)
{
	double q1, q2, q3, q4, q5, q6;
	double dq1, dq2, dq3, dq4, dq5, dq6;
	double ddq1, ddq2, ddq3, ddq4, ddq5, ddq6;
	double ts1, ts2, ts3, ts4, ts5, ts6;
	double g = 9.81;


	q1 = q[0];
	q2 = q[1];
	q3 = q[2];
	q4 = q[3];
	q5 = q[4];
	q6 = q[5];

	dq1 = dq[0]; dq2 = dq[1]; dq3 = dq[2]; dq4 = dq[3]; dq5 = dq[4]; dq6 = dq[5];
	ddq1 = ddq[0]; ddq2 = ddq[1]; ddq3 = ddq[2]; ddq4 = ddq[3]; ddq5 = ddq[4]; ddq6 = ddq[5];

	ts1 = ts[0]; ts2 = ts[1]; ts3 = ts[2];

	double A0[3][LoadTotalParas];
	for (int i = 0; i < RobotAxis / 2; i++)
		for (int j = 0; j < LoadTotalParas; j++)
			A0[i][j] = 0;


	double DF = 0;

	t2 = cos(q2);
	t3 = cos(q3);
	t4 = sin(q2);
	t5 = sin(q3);
	t6 = dq1 * t2*t5;
	t7 = dq1 * t3*t4;
	t8 = t6 + t7;
	t9 = dq1 * t2*t3;
	t11 = dq1 * t4*t5;
	t10 = t9 - t11;
	t12 = ddq1 * t2;
	t19 = dq1 * dq2*t4;
	t13 = t12 - t19;
	t14 = ddq1 * t4;
	t15 = dq1 * dq2*t2;
	t16 = t14 + t15;
	t17 = dq2 + dq3;
	t18 = dq1 * dq1;
	t20 = a3 * ddq2;
	t21 = d3 * t16;
	t22 = a2 * t4*t18;
	t23 = a3 * t2*t4*t18;
	t60 = g * t2;
	t61 = d3 * dq1*dq2*t2;
	t24 = t20 + t21 + t22 + t23 - t60 - t61;
	t25 = a3 * dq2;
	t26 = d3 * dq1*t4;
	t27 = t25 + t26;
	t28 = dq2 * t27;
	t29 = g * t4;
	t30 = d3 * t13;
	t31 = a2 * t2*t18;
	t32 = t2 * t2;
	t33 = a3 * t18*t32;
	t34 = t28 + t29 + t30 + t31 + t33;
	t35 = sin(q4);
	t36 = cos(q4);
	t37 = ddq2 + ddq3;
	t38 = t8 * t35;
	t46 = t17 * t36;
	t39 = t38 - t46;
	t40 = dq3 * t10;
	t41 = t3 * t16;
	t42 = t5 * t13;
	t43 = t40 + t41 + t42;
	t44 = t36 * t43;
	t45 = t35 * t37;
	t47 = dq4 - t9 + t11;
	t48 = t17 * t35;
	t49 = t8 * t36;
	t50 = t48 + t49;
	t51 = dq3 * t8;
	t52 = t5 * t16;
	t53 = dq4 * t50;
	t54 = t35 * t43;
	t55 = t47 * t47;
	t56 = t38 - t46;
	t57 = t36 * t47*t50;
	t58 = t47 * t50;
	t89 = t36 * t37;
	t59 = t53 + t54 + t58 - t89;
	t62 = t3 * t24;
	t63 = t5 * t34;
	t64 = t39 * t50;
	t65 = t38 - t46;
	t90 = dq4 * t39;
	t66 = t44 + t45 - t90 - t39 * t47;
	t67 = t17 * t17;
	t68 = a4 * t10;
	t75 = d4 * t8;
	t69 = t68 - t75;
	t70 = t8 * t69;
	t71 = a4 * t37;
	t91 = d4 * t67;
	t72 = t62 + t63 + t70 + t71 - t91;
	t73 = t50 * t50;
	t74 = t38 - t46;
	t76 = t3 * t34;
	t93 = t3 * t13;
	t77 = t51 + t52 - t93;
	t78 = a4 * t77;
	t79 = d4 * t43;
	t80 = dq1 * t4*t27;
	t81 = a4 * t8*t17;
	t82 = d4 * t10*t17;
	t83 = d3 * t18*t32;
	t92 = a2 * ddq1;
	t94 = a3 * t13;
	t84 = t78 + t79 + t80 + t81 + t82 + t83 - t92 - t94;
	t85 = a4 * t67;
	t86 = t10 * t69;
	t87 = d4 * t37;
	t96 = t5 * t24;
	t88 = t76 + t85 + t86 + t87 - t96;
	t95 = t35 * t84;
	t126 = t36 * t88;
	t97 = t95 - t126;
	t98 = t36 * t84;
	t99 = t35 * t88;
	t100 = t98 + t99;
	t101 = cos(q5);
	t102 = sin(q5);
	t103 = t50 * t102;
	t104 = t47 * t101;
	t105 = t103 + t104;
	t106 = t47 * t102;
	t108 = t50 * t101;
	t107 = t106 - t108;
	t109 = dq5 - t38 + t46;
	t110 = t44 + t45 - t90;
	t111 = ddq4 + t51 + t52 - t93;
	t112 = t102 * t111;
	t113 = dq5 * t105;
	t114 = t105 * t109;
	t115 = t107 * t107;
	t116 = dq5 * t107;
	t117 = t107 * t109;
	t118 = t102 * t110;
	t119 = t101 * t111;
	t120 = t105 * t107;
	t121 = t109 * t109;
	t122 = t105 * t105;
	t123 = t101 * t105*t109;
	t124 = ddq5 - t53 - t54 + t89 + t120;
	t125 = t101 * t124;
	t127 = t121 + t122;
	t128 = -ddq5 + t53 + t54 - t89 + t120;
	t129 = t102 * t128;
	t130 = t115 + t121;
	t132 = t101 * t110;
	t131 = t112 + t113 + t114 - t132;
	t133 = -t116 + t117 + t118 + t119;
	t134 = t72 * t101;
	t140 = t97 * t102;
	t135 = t134 - t140;
	t136 = t72 * t102;
	t137 = t97 * t101;
	t138 = t136 + t137;
	t139 = t112 + t113 - t114 - t132;
	t141 = t101 * t135;
	t142 = t102 * t138;
	t143 = t141 + t142;
	t144 = d4 * t35*t100;
	t145 = cos(q6);
	t146 = sin(q6);
    t147 = ddq5 - t53 -A0[3][40]; t54 + t89;
	t148 = t107 * t146;
	t149 = t109 * t145;
	t150 = t148 + t149;
	t151 = t107 * t145;
	t152 = t112 + t113 - t132;
	t153 = dq6 * t150;
	t154 = t146 * t147;
	t158 = t145 * t152;
	t155 = t153 + t154 - t158;
	t156 = dq6 + t103 + t104;
	t159 = t109 * t146;
	t157 = t151 - t159;
	t160 = t151 - t159;
	t161 = t156 * t157;
	t162 = dq6 * t157;
	t163 = t146 * t152;
	t164 = t145 * t147;
	t165 = t161 + t162 + t163 + t164;
	t166 = t150 * t156;
	t167 = t153 + t154 - t158 + t166;
	t168 = t151 - t159;
	t169 = t156 * t156;
	t170 = t151 - t159;
	t174 = t150 * t157;
	t171 = ddq6 - t116 + t118 + t119 - t174;
	t172 = t102 * t150*t157;
	t173 = t150 * t150;
	t175 = dq6 * (t151 - t159);
	t176 = t169 - t173;
	t177 = ddq6 - t116 + t118 + t119 + t174;
	t178 = t145 * t150*t156;
	t179 = t146 * t156*t157;
	t180 = t146 * t171;
	t181 = t169 + t173;
	t182 = DF * t121;
	t183 = DF * t115;
	t184 = -t134 + t140 + t182 + t183;
	t185 = t145 * t171;
	t186 = t145 * t181;
	t187 = t180 + t186;
	t188 = t146 * t184;
	t189 = t151 - t159;
	t190 = t150 * (t151 - t159);
	t191 = ddq6 - t116 + t118 + t119 + t190;
	t192 = t151 - t159;
	t193 = DF * t105*t107;
	t203 = DF * t147;
	t194 = t136 + t137 + t193 - t203;
	t205 = DF * t152;
	t206 = DF * t105*t109;
	t195 = t98 + t99 - t205 - t206;
	t196 = t151 - t159;
	t197 = t151 - t159;
	t198 = t151 - t159;
	t199 = t145 * t191;
	t200 = t151 - t159;
	t201 = t153 + t154 - t158 - t166;
	t202 = -t161 + t163 + t164 + t175;
	t204 = t145 * t194;
	t207 = t146 * t195;
	t208 = t204 + t207;
	t209 = t145 * t195;
	t211 = t146 * t194;
	t210 = t209 - t211;
	t212 = t151 - t159;
	t213 = t146 * t201;
	t214 = t145 * t202;
	t215 = t213 + t214;
	t216 = t146 * t210;
	t217 = t145 * t210;
	t218 = t146 * t208;
	t233 = t145 * t208;
	t219 = t216 - t233;
	t220 = t115 - t122;
	t221 = t146 * t155;
	t222 = t145 * t156*t157;
	t223 = t145 * t167;
	t224 = t151 - t159;
	t225 = t163 + t164 + t175;
	t226 = t145 * t225;
	t227 = t146 * t150*t156;
	t228 = DF * t146*t171;
	t229 = DF * t145*t181;
	t230 = t228 + t229 - t145 * t184;
	t231 = DF * t145*t191;
	t232 = t151 - t159;
	t234 = DF * t145*t202;
	t235 = DF * t145*t208;
	t236 = t151 - t159;
	t237 = ddq6 - t116 + t118 + t119;
	A0[0][0] = -t8 * t10;
	A0[0][1] = t8 * t8 - t10 * t10;
	A0[0][2] = -dq3 * t10 - t5 * t13 - t3 * t16 + t10 * t17;
	A0[0][3] = t8 * t10;
	A0[0][4] = t51 + t52 - t3 * t13 - t8 * t17;
	A0[0][5] = t37;
	A0[0][6] = t62 + t63;
	A0[0][7] = t76 - t5 * t24;
	A0[0][10] = t57 + t35 * (t44 + t45 - dq4 * t39);
	A0[0][11] = -t35 * t59 + t36 * t66;
	A0[0][12] = -t35 * (ddq4 + t51 + t52 - t3 * t13 - t39 * t50) - t36 * (t55 - t73);
	A0[0][13] = -t36 * (t53 + t54 - t36 * t37) + t35 * t47*(t38 - t46);
	A0[0][14] = -t36 * (ddq4 + t51 + t52 + t64 - t3 * t13) + t35 * (t55 - t56 * t56);
	A0[0][15] = -t57 - t35 * t39*t47;
	A0[0][16] = -a4 * t59 + t36 * t72 + d4 * t36*(t55 + t65 * t65) + d4 * t35*(ddq4 + t51 + t52 - t64 - t3 * t13);
	A0[0][17] = -a4 * t66 - t35 * t72 - d4 * t35*(t55 + t73) + d4 * t36*(ddq4 + t51 + t52 - t3 * t13 + t50 * (t38 - t46));
	A0[0][18] = -t36 * t97 + t35 * t100 - a4 * (t73 + t74 * t74) - d4 * t36*(t53 + t54 - t58 - t89) + d4 * t35*(t44 + t45 - t90 + t47 * (t38 - t46));
	A0[0][19] = t144 + a4 * t72 - d4 * t36*t97;
	A0[0][20] = -t35 * (t101*(t112 + t113 - t101 * t110) - t102 * t107*t109) - t36 * t105*t107;
	A0[0][21] = t35 * (t102*t131 + t101 * (t116 + t117 - t101 * t111 - t102 * t110)) + t36 * t220;
	A0[0][22] = -t35 * (t125 + t102 * (t115 - t121)) + t36 * (t112 + t113 - t114 - t101 * t110);
	A0[0][23] = t35 * (t123 + t102 * (-t116 + t118 + t119)) + t36 * t105*t107;
	A0[0][24] = -t35 * (t129 - t101 * (t121 - t122)) + t36 * t133;
	A0[0][25] = t36 * t147 - t35 * (t123 + t102 * t107*t109);
	A0[0][26] = t36 * t135 + a4 * (t125 - t102 * t127) + d4 * t36*(t102*t124 + t101 * t127) - d4 * t35*(t116 + t117 - t118 - t119) + t35 * t100*t102;
	A0[0][27] = -t36 * t138 + a4 * (t129 - t101 * t130) - d4 * t36*(t101*t128 + t102 * t130) - d4 * t35*t131 + t35 * t100*t101;
	A0[0][28] = t35 * t143 + a4 * (t102*t133 - t101 * t139) - d4 * t36*(t101*t133 + t102 * t139) + d4 * t35*(t115 + t122);
	A0[0][29] = t144 + a4 * t143 + d4 * t36*(t102*t135 - t101 * t138);
	A0[0][30] = t36 * (t221 - t145 * t156*t157) + t35 * (t172 + t101 * (t179 + t145 * t155));
	A0[0][31] = t35 * (t101*(t145*t165 - t146 * t167) - t102 * (t173 - t160 * t160)) + t36 * (t223 + t146 * t165);
	A0[0][32] = -t36 * (t180 + t145 * (t169 - t168 * t168)) - t35 * (t102*t201 + t101 * (t185 - t146 * (t169 - t170 * t170)));
	A0[0][33] = t36 * (t226 - t146 * t150*t156) - t35 * (t172 + t101 * (t178 + t146 * (t162 + t163 + t164)));
	A0[0][34] = -t35 * (t102*t202 - t101 * (t145*t176 + t146 * t177)) - t36 * (t145*t177 - t146 * t176);
	A0[0][35] = t36 * (t222 + t227) + t35 * (t102*t237 + t101 * (t178 - t179));
	A0[0][36] = t35 * (t102*t210 + t101 * (t188 + DF * t145*t171 - DF * t146*t181)) + t36 * t230 + a4 * (t101*t165 - t102 * t187) + d4 * t36*(t102*t165 + t101 * t187) + d4 * t35*(t185 - t146 * t181);
	A0[0][37] = -t35 * (t102*t208 + t101 * (-t145 * t184 + DF * t146*t191 + DF * t145*(t169 + t192 * t192))) - a4 * (t102*(t199 - t146 * (t169 + t196 * t196)) + t101 * t167) + t36 * (t188 + t231 - DF * t146*(t169 + t189 * t189)) - d4 * t35*(t146*t191 + t145 * (t169 + t197 * t197)) + d4 * t36*(t101*(t199 - t146 * (t169 + t198 * t198)) - t102 * t167);
	A0[0][38] = -a4 * (t102*t215 + t101 * (t173 + t200 * t200)) + t36 * (t216 + t234 - t145 * t208 + DF * t146*t201) + t35 * t101*(t217 + t218 + DF * t145*(t153 + t154 - t158 - t166) - DF * t146*t202) + d4 * t35*(t145*t201 - t146 * t202) + d4 * t36*(t101*t215 - t102 * (t173 + t212 * t212));
	A0[0][39] = -t36 * (t235 - DF * t146*t210) - a4 * (t101*t184 + t102 * t219) - d4 * t36*(t102*t184 - t101 * t219) + d4 * t35*(t217 + t218) + t35 * t101*(DF*t146*t208 + DF * t145*t210);
	A0[1][20] = -t120;
	A0[1][21] = t220;
	A0[1][22] = t139;
	A0[1][23] = t120;
	A0[1][24] = t133;
	A0[1][25] = t147;
	A0[1][26] = t135;
	A0[1][27] = -t136 - t137;
	A0[1][30] = t221 - t222;
	A0[1][31] = t223 + t146 * (t161 + t162 + t163 + t164);
	A0[1][32] = -t180 - t145 * (t169 - t224 * t224);
	A0[1][33] = t226 - t227;
	A0[1][34] = -t199 + t146 * t176;
	A0[1][35] = t227 + t145 * t156*(t151 - t159);
	A0[1][36] = t230;
	A0[1][37] = t188 + t231 - DF * t146*(t169 + t232 * t232);
	A0[1][38] = t216 - t233 + t234 + DF * t146*(t153 + t154 - t158 - t166);
	A0[1][39] = -t235 + DF * t146*t210;
	A0[2][30] = t190;
	A0[2][31] = -t173 + t236 * t236;
	A0[2][32] = -t153 - t154 + t158 + t166;
	A0[2][33] = -t174;
	A0[2][34] = -t162 - t163 - t164 + t156 * (t151 - t159);
	A0[2][35] = t237;
	A0[2][36] = t210;
	A0[2][37] = -t204 - t207;



	double AVec[3 * LoadTotalParas];
	for (int i = 0; i < 3; i++)
		for (int j = 0; j < LoadTotalParas; j++)
            AVec[LoadTotalParas * i + j] = A0[i][j];
	
	s_mm(3, LoadReduceParas, LoadTotalParas, AVec, CoefInv, distalVec);

}


void jointdynamics::LoadRLS(const double *positionL, const double *sensorL, const double *Coef,const double *CoefInv,double *estParas, double *StatisError)
{

    double CutFreq=5;
    A[0][0] = 0; A[0][1] = 1; A[0][2] = 0;
    A[1][0] = 0; A[1][1] = 0; A[1][2] = 1;
    A[2][0] = -CutFreq * CutFreq * CutFreq;
    A[2][1] = -2 * CutFreq * CutFreq;
    A[2][2] = -2 * CutFreq;
    B[0] = 0; B[1] = 0;
    B[2] = -A[2][0];
	//positionList[id(2, 2, 6)];
	double stateMot0[RobotAxis][3] = { 0 };
	double stateMot1[RobotAxis][3] = { 0 };
	double stateTor0[RobotAxis][3] = { 0 };
	double stateTor1[RobotAxis][3] = { 0 };



	double q[RobotAxis];
	double dq[RobotAxis];
	double ddq[RobotAxis];
	double ts[RobotAxis];

    double intDT = 8*DT;
	int length = 6;
	std::vector<double> regressorMatrix_vec(3 * SampleNum * LoadReduceParas);
	double* regressorVector = regressorMatrix_vec.data();

	std::vector<double> regressorMatrixFric_vec(3 * SampleNum * 6);
	double* regressorVectorFric = regressorMatrixFric_vec.data();

	std::vector<double> regressorForces_vec(3 * SampleNum);
	double* regressorForces = regressorForces_vec.data();

	double posCur[RobotAxis];
	double torCur[RobotAxis];

	for (int j = 0; j < RobotAxis; j++)
	{
		stateMot0[j][0] = positionL[j];
		stateTor0[j][0] = sensorL[j];
	}

	for (int i = 0; i < SampleNum; i++)
	{

		for (int j = 0; j < RobotAxis; j++)
		{

			posCur[j] = positionL[RobotAxis*i + j];
			torCur[j] = sensorL[RobotAxis*i + j];

			stateMot1[j][0] = stateMot0[j][0] + intDT * (A[0][0] * stateMot0[j][0] + A[0][1] * stateMot0[j][1] + A[0][2] * stateMot0[j][2] + B[0] * posCur[j]);
			stateMot1[j][1] = stateMot0[j][1] + intDT * (A[1][0] * stateMot0[j][0] + A[1][1] * stateMot0[j][1] + A[1][2] * stateMot0[j][2] + B[1] * posCur[j]);
			stateMot1[j][2] = stateMot0[j][2] + intDT * (A[2][0] * stateMot0[j][0] + A[2][1] * stateMot0[j][1] + A[2][2] * stateMot0[j][2] + B[2] * posCur[j]);

			stateTor1[j][0] = stateTor0[j][0] + intDT * (A[0][0] * stateTor0[j][0] + A[0][1] * stateTor0[j][1] + A[0][2] * stateTor0[j][2] + B[0] * torCur[j]);
			stateTor1[j][1] = stateTor0[j][1] + intDT * (A[1][0] * stateTor0[j][0] + A[1][1] * stateTor0[j][1] + A[1][2] * stateTor0[j][2] + B[1] * torCur[j]);
			stateTor1[j][2] = stateTor0[j][2] + intDT * (A[2][0] * stateTor0[j][0] + A[2][1] * stateTor0[j][1] + A[2][2] * stateTor0[j][2] + B[2] * torCur[j]);
		}

		for (int j = 0; j < RobotAxis; j++)
		{
			q[j] = stateMot1[j][0];
			dq[j] = stateMot1[j][1];
			ddq[j] = stateMot1[j][2];
			ts[j] = stateTor1[j][0];
		}

		for (int k = 0; k < RobotAxis; k++)
		{
			q[k] = q[k] * DirectionFlag[k] + JointOffset[k] + ZeroOffset[k];
            dq[k] = dq[k] * DirectionFlag[k];
            ddq[k] = ddq[k] * DirectionFlag[k];

		}

        double LoadVec[3 * LoadReduceParas];
		LoadReducedMatrix(q, dq, ddq, ts, Coef, CoefInv,LoadVec);
        double Y[3][LoadReduceParas];
		for (int m = 0; m < 3; m++)
            for (int n = 0; n < LoadReduceParas; n++)
                Y[m][n] = LoadVec[LoadReduceParas * m + n];

		double Y1[3][6] = { 0 };
        Y1[0][0] = 1 * sign(dq[2]); Y1[0][1] = dq[2];
        Y1[1][2] = 1 * sign(dq[4]); Y1[1][3] = dq[4];
        Y1[2][4] = 1 * sign(dq[5]); Y1[2][5] = dq[5];


		for (int m = 0; m < 3; m++)
		{
            for (int n = 0; n < LoadReduceParas; n++)
			{
                regressorVector[(i * 3 + m) * LoadReduceParas + n] = Y[m][n];

			}

			for (int n = 0; n < 6; n++)
			{
				regressorVectorFric[(i * 3 + m) * 6 + n] = Y1[m][n];

			}

		}

		regressorForces[i * 3 + 0] = ts[2];
		regressorForces[i * 3 + 1] = ts[4];
		regressorForces[i * 3 + 2] = ts[5];


		for (int j = 0; j < 6; j++)
		{

			stateMot0[j][0] = stateMot1[j][0];
			stateMot0[j][1] = stateMot1[j][1];
			stateMot0[j][2] = stateMot1[j][2];

			stateTor0[j][0] = stateTor1[j][0];
			stateTor0[j][1] = stateTor1[j][1];
			stateTor0[j][2] = stateTor1[j][2];
		}

	}



	//Test QR
	//s_permutate(TotalParas, 3 * SampleNum, p, TestR, T(TotalParas));
	//s_mm(3 * SampleNum, TotalParas, 3 * SampleNum, TestQ, TestR, UU);
	//s_householder_ut2r(k, n, U, tau, R);
	//s_householder_ut2qmn(m, k, U, tau, q);
	//for (int i = 0;i < 3 * SampleNum*TotalParas;i++)
		//dU[i]= regressorVector[i]-UU[i];


	//s_mm(3 * SampleNum, TotalParas, ReduceParas, Q, R, UU);
	//for (int i = 0;i < 3 * SampleNum*TotalParas;i++)
		//dU[i]= regressorVector[i]-UU[i];

	std::vector<double> QwithFric_vec(3 * SampleNum * (LoadReduceParas+6));
	auto QwithFric = QwithFric_vec.data();
	for (int i = 0;i < 3 * SampleNum;i++)
	{
		for (int j = 0;j < LoadReduceParas;j++)
            QwithFric[i*(LoadReduceParas + 6) + j] = regressorVector[i*LoadReduceParas + j];
		for (int j = LoadReduceParas;j < LoadReduceParas+6;j++)
			QwithFric[i*(LoadReduceParas + 6) + j] = regressorVectorFric[i*6 + j-LoadReduceParas];
	}
		


	// 求解 A的广义逆pinv 和 x
	std::vector<double> pinv_vec(3 * SampleNum * (LoadReduceParas + 6));
	auto pinv = pinv_vec.data();

	// 所需的中间变量，请对U的对角线元素做处理
	std::vector<double> UQ_vec(3 * SampleNum * (LoadReduceParas + 6));
	auto UQ = UQ_vec.data();

	std::vector<double> tauQ_vec(3 * SampleNum);
	auto tauQ = tauQ_vec.data();

	std::vector<aris::Size> pQ_vec(3 * SampleNum);
	auto pQ = pQ_vec.data();

	aris::Size rankQ;

	s_householder_utp(3 * SampleNum, LoadReduceParas+6, QwithFric, UQ, tauQ, pQ, rankQ, 1e-10);

	// 根据QR分解的结果求广义逆，相当于Matlab中的 pinv(A) //
	double tauQ2[3 * SampleNum];
	
	s_householder_utp2pinv(3 * SampleNum, LoadReduceParas + 6, rankQ, UQ, tauQ, pQ, pinv, tauQ2, 1e-10);
	// 根据QR分解的结果求广义逆，相当于Matlab中的 pinv(A)*b //
	s_mm(LoadReduceParas+6, 1, 3 * SampleNum, pinv, regressorForces, estParas);

	
	/*
	std::ofstream outfile("C:/Users/gk/Desktop/Kaanh_gk/EstParas.txt");
	if (!outfile)
	{
		std::cout << "Unable to open otfile";
		exit(1); // terminate with error
	}

	for (int i = 0;i < 3 * SampleNum*TotalParas;i++)
		outfile << regressorVector[i] << std::endl;

	outfile.close();
	*/

	
	//Calculate Model Error
	std::vector<double> Error_vec(3 * SampleNum);
	auto Error = Error_vec.data();

	s_mm(3 * SampleNum, 1, LoadReduceParas+6, QwithFric, estParas, Error);
	for (int i = 0;i < 3*SampleNum;i++)
		Error[i] = Error[i] - regressorForces[i];

	double SumError[3] = { 0 };
	for (int j = 0;j < 3;j++)
		for (int i = 0;i < SampleNum;i++)
			SumError[j] = SumError[j] + Error[i*3 + j] * Error[i*3 + j];

	for (int j = 0;j < 3;j++)
        StatisError[j] = sqrt(SumError[j]/ SampleNum);


}

void jointdynamics::LoadRLStemp(const double *positionL, const double *sensorL, const double *Coef, const double *CoefInv, double *estParas, double *StatisError)
{

	double CutFreq = 5;
	A[0][0] = 0; A[0][1] = 1; A[0][2] = 0;
	A[1][0] = 0; A[1][1] = 0; A[1][2] = 1;
	A[2][0] = -CutFreq * CutFreq * CutFreq;
	A[2][1] = -2 * CutFreq * CutFreq;
	A[2][2] = -2 * CutFreq;
	B[0] = 0; B[1] = 0;
	B[2] = -A[2][0];
	//positionList[id(2, 2, 6)];
	double stateMot0[RobotAxis][3] = { 0 };
	double stateMot1[RobotAxis][3] = { 0 };
	double stateTor0[RobotAxis][3] = { 0 };
	double stateTor1[RobotAxis][3] = { 0 };



	double q[RobotAxis];
	double dq[RobotAxis];
	double ddq[RobotAxis];
	double ts[RobotAxis];

	double intDT = 8 * DT;
	int length = 6;
	std::vector<double> regressorMatrix_vec(3 * SampleNum * LoadReduceParas);
	double* regressorVector = regressorMatrix_vec.data();

	std::vector<double> regressorMatrixFric_vec(3 * SampleNum * 6);
	double* regressorVectorFric = regressorMatrixFric_vec.data();

	std::vector<double> regressorForces_vec(3 * SampleNum);
	double* regressorForces = regressorForces_vec.data();

	double posCur[RobotAxis];
	double torCur[RobotAxis];

	for (int j = 0; j < RobotAxis; j++)
	{
		stateMot0[j][0] = positionL[j];
		stateTor0[j][0] = sensorL[j];
	}

	for (int i = 0; i < SampleNum; i++)
	{

		for (int j = 0; j < RobotAxis; j++)
		{

			posCur[j] = positionL[RobotAxis*i + j];
			torCur[j] = sensorL[RobotAxis*i + j];

			stateMot1[j][0] = stateMot0[j][0] + intDT * (A[0][0] * stateMot0[j][0] + A[0][1] * stateMot0[j][1] + A[0][2] * stateMot0[j][2] + B[0] * posCur[j]);
			stateMot1[j][1] = stateMot0[j][1] + intDT * (A[1][0] * stateMot0[j][0] + A[1][1] * stateMot0[j][1] + A[1][2] * stateMot0[j][2] + B[1] * posCur[j]);
			stateMot1[j][2] = stateMot0[j][2] + intDT * (A[2][0] * stateMot0[j][0] + A[2][1] * stateMot0[j][1] + A[2][2] * stateMot0[j][2] + B[2] * posCur[j]);

			stateTor1[j][0] = stateTor0[j][0] + intDT * (A[0][0] * stateTor0[j][0] + A[0][1] * stateTor0[j][1] + A[0][2] * stateTor0[j][2] + B[0] * torCur[j]);
			stateTor1[j][1] = stateTor0[j][1] + intDT * (A[1][0] * stateTor0[j][0] + A[1][1] * stateTor0[j][1] + A[1][2] * stateTor0[j][2] + B[1] * torCur[j]);
			stateTor1[j][2] = stateTor0[j][2] + intDT * (A[2][0] * stateTor0[j][0] + A[2][1] * stateTor0[j][1] + A[2][2] * stateTor0[j][2] + B[2] * torCur[j]);
		}

		for (int j = 0; j < RobotAxis; j++)
		{
			q[j] = stateMot1[j][0];
			dq[j] = stateMot1[j][1];
			ddq[j] = stateMot1[j][2];
			ts[j] = stateTor1[j][0];
		}

		for (int k = 0; k < RobotAxis; k++)
		{
			q[k] = q[k] * DirectionFlag[k] + JointOffset[k] + ZeroOffset[k];
			dq[k] = dq[k] * DirectionFlag[k];
			ddq[k] = ddq[k] * DirectionFlag[k];

		}

		double LoadVec[3 * LoadReduceParas];
		LoadReducedMatrix(q, dq, ddq, ts, Coef, CoefInv, LoadVec);
		double Y[3][LoadReduceParas];
		for (int m = 0; m < 3; m++)
			for (int n = 0; n < LoadReduceParas; n++)
				Y[m][n] = LoadVec[LoadReduceParas * m + n];

		double Y1[3][6] = { 0 };
		Y1[0][0] = 1 * sign(dq[2]); Y1[0][1] = dq[2];
		Y1[1][2] = 1 * sign(dq[4]); Y1[1][3] = dq[4];
		Y1[2][4] = 1 * sign(dq[5]); Y1[2][5] = dq[5];


		for (int m = 0; m < 3; m++)
		{
			for (int n = 0; n < LoadReduceParas; n++)
			{
				regressorVector[(i * 3 + m) * LoadReduceParas + n] = Y[m][n];

			}

			for (int n = 0; n < 6; n++)
			{
				regressorVectorFric[(i * 3 + m) * 6 + n] = Y1[m][n];

			}

		}

		regressorForces[i * 3 + 0] = ts[2];
		regressorForces[i * 3 + 1] = ts[4];
		regressorForces[i * 3 + 2] = ts[5];


		for (int j = 0; j < 6; j++)
		{

			stateMot0[j][0] = stateMot1[j][0];
			stateMot0[j][1] = stateMot1[j][1];
			stateMot0[j][2] = stateMot1[j][2];

			stateTor0[j][0] = stateTor1[j][0];
			stateTor0[j][1] = stateTor1[j][1];
			stateTor0[j][2] = stateTor1[j][2];
		}

	}

	std::vector<double> QwithFric_vec(3 * SampleNum * (LoadReduceParas + 6));
	auto QwithFric = QwithFric_vec.data();
	for (int i = 0;i < 3 * SampleNum;i++)
	{
		for (int j = 0;j < LoadReduceParas;j++)
			QwithFric[i*(LoadReduceParas + 6) + j] = regressorVector[i*LoadReduceParas + j];
		for (int j = LoadReduceParas;j < LoadReduceParas + 6;j++)
			QwithFric[i*(LoadReduceParas + 6) + j] = regressorVectorFric[i * 6 + j - LoadReduceParas];
	}



	// 求解 A的广义逆pinv 和 x
	std::vector<double> pinv_vec(3 * SampleNum * (LoadReduceParas + 6));
	auto pinv = pinv_vec.data();

	// 所需的中间变量，请对U的对角线元素做处理
	std::vector<double> UQ_vec(3 * SampleNum * (LoadReduceParas + 6));
	auto UQ = UQ_vec.data();

	std::vector<double> tauQ_vec(3 * SampleNum);
	auto tauQ = tauQ_vec.data();

	std::vector<aris::Size> pQ_vec(3 * SampleNum);
	auto pQ = pQ_vec.data();

	aris::Size rankQ;

	s_householder_utp(3 * SampleNum, LoadReduceParas + 6, QwithFric, UQ, tauQ, pQ, rankQ, 1e-10);

	// 根据QR分解的结果求广义逆，相当于Matlab中的 pinv(A) //
	double tauQ2[3 * SampleNum];

	s_householder_utp2pinv(3 * SampleNum, LoadReduceParas + 6, rankQ, UQ, tauQ, pQ, pinv, tauQ2, 1e-10);
	// 根据QR分解的结果求广义逆，相当于Matlab中的 pinv(A)*b //
	s_mm(LoadReduceParas + 6, 1, 3 * SampleNum, pinv, regressorForces, estParas);


	/*
	std::ofstream outfile("C:/Users/gk/Desktop/Kaanh_gk/EstParas.txt");
	if (!outfile)
	{
		std::cout << "Unable to open otfile";
		exit(1); // terminate with error
	}

	for (int i = 0;i < 3 * SampleNum*TotalParas;i++)
		outfile << regressorVector[i] << std::endl;

	outfile.close();
	*/


	//Calculate Model Error
	std::vector<double> Error_vec(3 * SampleNum);
	auto Error = Error_vec.data();

	s_mm(3 * SampleNum, 1, LoadReduceParas + 6, QwithFric, estParas, Error);
	for (int i = 0;i < 3 * SampleNum;i++)
		Error[i] = Error[i] - regressorForces[i];

	double SumError[3] = { 0 };
	for (int j = 0;j < 3;j++)
		for (int i = 0;i < SampleNum;i++)
			SumError[j] = SumError[j] + Error[i * 3 + j] * Error[i * 3 + j];

	for (int j = 0;j < 3;j++)
		StatisError[j] = sqrt(SumError[j] / SampleNum);


}

void jointdynamics::LoadRLSYang(const double *positionL, const double *sensorL, double *estParas, double *StatisError)
{

	double CutFreq = 5;
	A[0][0] = 0; A[0][1] = 1; A[0][2] = 0;
	A[1][0] = 0; A[1][1] = 0; A[1][2] = 1;
	A[2][0] = -CutFreq * CutFreq * CutFreq;
	A[2][1] = -2 * CutFreq * CutFreq;
	A[2][2] = -2 * CutFreq;
	B[0] = 0; B[1] = 0;
	B[2] = -A[2][0];
	//positionList[id(2, 2, 6)];
	double stateMot0[RobotAxis][3] = { 0 };
	double stateMot1[RobotAxis][3] = { 0 };
	double stateTor0[RobotAxis][3] = { 0 };
	double stateTor1[RobotAxis][3] = { 0 };



	double q[RobotAxis];
	double dq[RobotAxis];
	double ddq[RobotAxis];
	double ts[RobotAxis];

	double intDT = 8 * DT;
	int length = 6;
	std::vector<double> regressorMatrix_vec(3 * SampleNum * LoadTotalParas);
	double* regressorVector = regressorMatrix_vec.data();

	std::vector<double> regressorMatrixFric_vec(3 * SampleNum * 6);
	double* regressorVectorFric = regressorMatrixFric_vec.data();

	std::vector<double> regressorForces_vec(3 * SampleNum);
	double* regressorForces = regressorForces_vec.data();

	double posCur[RobotAxis];
	double torCur[RobotAxis];

	for (int j = 0; j < RobotAxis; j++)
	{
		stateMot0[j][0] = positionL[j];
		stateTor0[j][0] = sensorL[j];
	}

	for (int i = 0; i < SampleNum; i++)
	{

		for (int j = 0; j < RobotAxis; j++)
		{

			posCur[j] = positionL[RobotAxis*i + j];
			torCur[j] = sensorL[RobotAxis*i + j];

			stateMot1[j][0] = stateMot0[j][0] + intDT * (A[0][0] * stateMot0[j][0] + A[0][1] * stateMot0[j][1] + A[0][2] * stateMot0[j][2] + B[0] * posCur[j]);
			stateMot1[j][1] = stateMot0[j][1] + intDT * (A[1][0] * stateMot0[j][0] + A[1][1] * stateMot0[j][1] + A[1][2] * stateMot0[j][2] + B[1] * posCur[j]);
			stateMot1[j][2] = stateMot0[j][2] + intDT * (A[2][0] * stateMot0[j][0] + A[2][1] * stateMot0[j][1] + A[2][2] * stateMot0[j][2] + B[2] * posCur[j]);

			stateTor1[j][0] = stateTor0[j][0] + intDT * (A[0][0] * stateTor0[j][0] + A[0][1] * stateTor0[j][1] + A[0][2] * stateTor0[j][2] + B[0] * torCur[j]);
			stateTor1[j][1] = stateTor0[j][1] + intDT * (A[1][0] * stateTor0[j][0] + A[1][1] * stateTor0[j][1] + A[1][2] * stateTor0[j][2] + B[1] * torCur[j]);
			stateTor1[j][2] = stateTor0[j][2] + intDT * (A[2][0] * stateTor0[j][0] + A[2][1] * stateTor0[j][1] + A[2][2] * stateTor0[j][2] + B[2] * torCur[j]);
		}

		for (int j = 0; j < RobotAxis; j++)
		{
			q[j] = stateMot1[j][0];
			dq[j] = stateMot1[j][1];
			ddq[j] = stateMot1[j][2];
			ts[j] = stateTor1[j][0];
		}

		for (int k = 0; k < RobotAxis; k++)
		{
			q[k] = q[k] * DirectionFlag[k] + JointOffset[k] + ZeroOffset[k];
			dq[k] = dq[k] * DirectionFlag[k];
			ddq[k] = ddq[k] * DirectionFlag[k];

		}

		double LoadVec[3 * LoadTotalParas];
		LoadFullMatrix(q, dq, ddq, ts, LoadVec);
		double Y[3][LoadTotalParas];
		for (int m = 0; m < 3; m++)
			for (int n = 0; n < LoadTotalParas; n++)
				Y[m][n] = LoadVec[LoadTotalParas * m + n];

		double Y1[3][6] = { 0 };
		Y1[0][0] = 1 * sign(dq[2]); Y1[0][1] = dq[2];
		Y1[1][2] = 1 * sign(dq[4]); Y1[1][3] = dq[4];
		Y1[2][4] = 1 * sign(dq[5]); Y1[2][5] = dq[5];


		for (int m = 0; m < 3; m++)
		{
			for (int n = 0; n < LoadTotalParas; n++)
			{
				regressorVector[(i * 3 + m) * LoadTotalParas + n] = Y[m][n];

			}

			for (int n = 0; n < 6; n++)
			{
				regressorVectorFric[(i * 3 + m) * 6 + n] = Y1[m][n];

			}

		}

		regressorForces[i * 3 + 0] = ts[2];
		regressorForces[i * 3 + 1] = ts[4];
		regressorForces[i * 3 + 2] = ts[5];


		for (int j = 0; j < 6; j++)
		{

			stateMot0[j][0] = stateMot1[j][0];
			stateMot0[j][1] = stateMot1[j][1];
			stateMot0[j][2] = stateMot1[j][2];

			stateTor0[j][0] = stateTor1[j][0];
			stateTor0[j][1] = stateTor1[j][1];
			stateTor0[j][2] = stateTor1[j][2];
		}

	}

	std::vector<double> QwithFric_vec(3 * SampleNum * (LoadTotalParas + 6));
	auto QwithFric = QwithFric_vec.data();
	for (int i = 0;i < 3 * SampleNum;i++)
	{
		for (int j = 0;j < LoadTotalParas;j++)
			QwithFric[i*(LoadTotalParas + 6) + j] = regressorVector[i*LoadTotalParas + j];
		for (int j = LoadTotalParas;j < LoadTotalParas + 6;j++)
			QwithFric[i*(LoadTotalParas + 6) + j] = regressorVectorFric[i * 6 + j - LoadTotalParas];
	}



	// 求解 A的广义逆pinv 和 x
	std::vector<double> pinv_vec(3 * SampleNum * (LoadTotalParas + 6));
	auto pinv = pinv_vec.data();

	// 所需的中间变量，请对U的对角线元素做处理
	std::vector<double> UQ_vec(3 * SampleNum * (LoadTotalParas + 6));
	auto UQ = UQ_vec.data();

	std::vector<double> tauQ_vec(3 * SampleNum);
	auto tauQ = tauQ_vec.data();

	std::vector<aris::Size> pQ_vec(3 * SampleNum);
	auto pQ = pQ_vec.data();

	aris::Size rankQ;

    s_householder_utp(3 * SampleNum, LoadTotalParas + 6, QwithFric, UQ, tauQ, pQ, rankQ, 1e-3);

	// 根据QR分解的结果求广义逆，相当于Matlab中的 pinv(A) //
	double tauQ2[3 * SampleNum];

    s_householder_utp2pinv(3 * SampleNum, LoadTotalParas + 6, rankQ, UQ, tauQ, pQ, pinv, tauQ2, 1e-3);
	// 根据QR分解的结果求广义逆，相当于Matlab中的 pinv(A)*b //
	s_mm(LoadTotalParas + 6, 1, 3 * SampleNum, pinv, regressorForces, estParas);


	/*
	std::ofstream outfile("C:/Users/gk/Desktop/Kaanh_gk/EstParas.txt");
	if (!outfile)
	{
		std::cout << "Unable to open otfile";
		exit(1); // terminate with error
	}

	for (int i = 0;i < 3 * SampleNum*TotalParas;i++)
		outfile << regressorVector[i] << std::endl;

	outfile.close();
	*/


	//Calculate Model Error
	std::vector<double> Error_vec(3 * SampleNum);
	auto Error = Error_vec.data();

	s_mm(3 * SampleNum, 1, LoadTotalParas + 6, QwithFric, estParas, Error);
	for (int i = 0;i < 3 * SampleNum;i++)
		Error[i] = Error[i] - regressorForces[i];

	double SumError[3] = { 0 };
	for (int j = 0;j < 3;j++)
		for (int i = 0;i < SampleNum;i++)
			SumError[j] = SumError[j] + Error[i * 3 + j] * Error[i * 3 + j];

	for (int j = 0;j < 3;j++)
		StatisError[j] = sqrt(SumError[j] / SampleNum);


}


void jointdynamics::YYbase(const double *AngList, const double *VelList, const double *AccList, double *Load2Joint,double *Coef,double*CoefInv,const int TestNum)
{
	double q[RobotAxis];
	double dq[RobotAxis];
	double ddq[RobotAxis];
	double ts[RobotAxis] = { 0 };

	std::vector<double> regressorMatrix_vec(3 * TestNum * 40);
	double* regressorVector = regressorMatrix_vec.data();

	for (int i = 0; i < TestNum; i++)
	{
		for (int j = 0; j < RobotAxis; j++)
		{
			q[j] = AngList[6*i+j];
			dq[j] = VelList[6 * i + j];
			ddq[j] = AccList[6 *i + j];
		}

		double LoadVec[3 * 40];
		LoadFullMatrix(q, dq, ddq, ts, LoadVec);
		double Y[3][40];
		for (int m = 0; m < 3; m++)
			for (int n = 0; n < 40; n++)
				Y[m][n] = LoadVec[40 * m + n];

		for (int m = 0; m < 3; m++)
			for (int n = 0; n < 40; n++)
				regressorVector[(i * 3 + m) * 40 + n] = Y[m][n];

	}


	// 所需的中间变量，请对U的对角线元素做处理
	std::vector<double> U_vec(3 * TestNum * 40);
	auto U = U_vec.data();

	std::vector<double> tau_vec(3 * TestNum);
	auto tau = tau_vec.data();

	std::vector<aris::Size> p_vec(3 * TestNum);
	auto p = p_vec.data();

	aris::Size rank;

	// 根据 A 求出中间变量，相当于做 QR 分解 //
   // 请对 U 的对角线元素做处理
	s_householder_utp(3 * TestNum, 40, regressorVector, U, tau, p, rank, 1e-10);

	std::vector<double> TestQ_vec(3 * TestNum * 40);
	auto TestQ = TestQ_vec.data();

	std::vector<double> TestR_vec(3 * TestNum * 40);
	auto TestR = TestR_vec.data();

	s_householder_ut2qmn(3 * TestNum, 40, U, tau, TestQ);
	s_householder_ut2r(3 * TestNum, 40, U, tau, TestR);
	s_permutate_inv(40, 3 * TestNum, p, TestR, T(40));

	//Test QR
	//s_permutate(TotalParas, 3 * SampleNum, p, TestR, T(TotalParas));
	//s_mm(3 * SampleNum, TotalParas, 3 * SampleNum, TestQ, TestR, UU);
	//s_householder_ut2r(k, n, U, tau, R);
	//s_householder_ut2qmn(m, k, U, tau, q);
	//for (int i = 0;i < 3 * SampleNum*TotalParas;i++)
		//dU[i]= regressorVector[i]-UU[i];


	std::vector<double> Q_vec(3 * TestNum * 13);
	auto Q = Q_vec.data();
	std::vector<double> R_vec(13 * 40);
	auto R = R_vec.data();
	for (int i = 0;i < 3 * TestNum;i++)
		for (int j = 0;j < 13;j++)
			Q[i*13 + j] = TestQ[i * 40 + j];

	for (int i = 0;i < 13;i++)
		for (int j = 0;j < 40;j++)
		{
			R[i * 40 + j] = TestR[i * 40 + j];
			Coef[i * 40 + j] = TestR[i * 40 + j];
		}
	


	std::vector<double> UU_vec(3 * TestNum * 40);
	auto UU = UU_vec.data();
	std::vector<double> dU_vec(3 * TestNum * 40);
	auto dU = dU_vec.data();
	s_mm(3 * TestNum, 40, 13, Q, R, UU);
	for (int i = 0;i < 3 * TestNum *40;i++)
		dU[i]= regressorVector[i]-UU[i];


	//计算CoefInv, Coef*CoefInv=EYE(13)

	std::vector<double> EYE_vec(40* 40);
	auto EYE = EYE_vec.data();
	for (int i = 0;i < 40;i++)
		for (int j = 0;j < 40;j++)
		{
			EYE[i*40 + j] = 0;
			if (i == j)
				EYE[i*40 + j] = 1;
		}

	// 求解 A的广义逆pinv 和 x
	std::vector<double> pinvInv_vec(40 * 13);
	auto pinvInv = pinvInv_vec.data();

	// 所需的中间变量，请对U的对角线元素做处理
	std::vector<double> UInv_vec(40 * 13);
	auto UInv = UInv_vec.data();

	double tauInv[40];
	aris::Size pInv[40];
	aris::Size rankInv;

	s_householder_utp(13, 40, Coef, UInv, tauInv, pInv, rankInv, 1e-10);

	// 根据QR分解的结果求广义逆，相当于Matlab中的 pinv(A) //
	double tau2Inv[40];

	s_householder_utp2pinv(13, 40, rankInv, UInv, tauInv, pInv, pinvInv, tau2Inv, 1e-10);
	// 根据QR分解的结果求广义逆，相当于Matlab中的 pinv(A)*b //
	s_mm(40, 13, 40, EYE, pinvInv, CoefInv);
}


void jointdynamics::LoadParasExtYang(const double *positionL, const double *sensorL, const double * estParasL0, double* Load, double *StatisError)
{

	double CutFreq = 5;
	A[0][0] = 0; A[0][1] = 1; A[0][2] = 0;
	A[1][0] = 0; A[1][1] = 0; A[1][2] = 1;
	A[2][0] = -CutFreq * CutFreq * CutFreq;
	A[2][1] = -2 * CutFreq * CutFreq;
	A[2][2] = -2 * CutFreq;
	B[0] = 0; B[1] = 0;
	B[2] = -A[2][0];
	//positionList[id(2, 2, 6)];
	double stateMot0[RobotAxis][3] = { 0 };
	double stateMot1[RobotAxis][3] = { 0 };
	double stateTor0[RobotAxis][3] = { 0 };
	double stateTor1[RobotAxis][3] = { 0 };



	double q[RobotAxis];
	double dq[RobotAxis];
	double ddq[RobotAxis];
	double ts[RobotAxis];

	double intDT = 8 * DT;
	int length = 6;
	std::vector<double> regressorMatrix_vec(3 * SampleNum * LoadTotalParas);
	double* regressorVector = regressorMatrix_vec.data();

	std::vector<double> regressorMatrixFric_vec(3 * SampleNum * 6);
	double* regressorVectorFric = regressorMatrixFric_vec.data();

	std::vector<double> regressorForces_vec(3 * SampleNum);
	double* regressorForces = regressorForces_vec.data();

	double posCur[RobotAxis];
	double torCur[RobotAxis];

	for (int j = 0; j < RobotAxis; j++)
	{
		stateMot0[j][0] = positionL[j];
		stateTor0[j][0] = sensorL[j];
	}

	for (int i = 0; i < SampleNum; i++)
	{

		for (int j = 0; j < RobotAxis; j++)
		{

			posCur[j] = positionL[RobotAxis*i + j];
			torCur[j] = sensorL[RobotAxis*i + j];

			stateMot1[j][0] = stateMot0[j][0] + intDT * (A[0][0] * stateMot0[j][0] + A[0][1] * stateMot0[j][1] + A[0][2] * stateMot0[j][2] + B[0] * posCur[j]);
			stateMot1[j][1] = stateMot0[j][1] + intDT * (A[1][0] * stateMot0[j][0] + A[1][1] * stateMot0[j][1] + A[1][2] * stateMot0[j][2] + B[1] * posCur[j]);
			stateMot1[j][2] = stateMot0[j][2] + intDT * (A[2][0] * stateMot0[j][0] + A[2][1] * stateMot0[j][1] + A[2][2] * stateMot0[j][2] + B[2] * posCur[j]);

			stateTor1[j][0] = stateTor0[j][0] + intDT * (A[0][0] * stateTor0[j][0] + A[0][1] * stateTor0[j][1] + A[0][2] * stateTor0[j][2] + B[0] * torCur[j]);
			stateTor1[j][1] = stateTor0[j][1] + intDT * (A[1][0] * stateTor0[j][0] + A[1][1] * stateTor0[j][1] + A[1][2] * stateTor0[j][2] + B[1] * torCur[j]);
			stateTor1[j][2] = stateTor0[j][2] + intDT * (A[2][0] * stateTor0[j][0] + A[2][1] * stateTor0[j][1] + A[2][2] * stateTor0[j][2] + B[2] * torCur[j]);
		}

		for (int j = 0; j < RobotAxis; j++)
		{
			q[j] = stateMot1[j][0];
			dq[j] = stateMot1[j][1];
			ddq[j] = stateMot1[j][2];
			ts[j] = stateTor1[j][0];
		}

		for (int k = 0; k < RobotAxis; k++)
		{
			q[k] = q[k] * DirectionFlag[k] + JointOffset[k] + ZeroOffset[k];
			dq[k] = dq[k] * DirectionFlag[k];
			ddq[k] = ddq[k] * DirectionFlag[k];

		}

		double LoadVec[3 * LoadTotalParas];
		LoadFullMatrix(q, dq, ddq, ts, LoadVec);
		double Y[3][LoadTotalParas];
		for (int m = 0; m < 3; m++)
			for (int n = 0; n < LoadTotalParas; n++)
				Y[m][n] = LoadVec[LoadTotalParas * m + n];

		double Y1[3][6] = { 0 };
		Y1[0][0] = 1 * sign(dq[2]); Y1[0][1] = dq[2];
		Y1[1][2] = 1 * sign(dq[4]); Y1[1][3] = dq[4];
		Y1[2][4] = 1 * sign(dq[5]); Y1[2][5] = dq[5];


		for (int m = 0; m < 3; m++)
		{
			for (int n = 0; n < LoadTotalParas; n++)
			{
				regressorVector[(i * 3 + m) * LoadTotalParas + n] = Y[m][n];

			}

			for (int n = 0; n < 6; n++)
			{
				regressorVectorFric[(i * 3 + m) * 6 + n] = Y1[m][n];

			}

		}

		regressorForces[i * 3 + 0] = ts[2];
		regressorForces[i * 3 + 1] = ts[4];
		regressorForces[i * 3 + 2] = ts[5];


		for (int j = 0; j < 6; j++)
		{

			stateMot0[j][0] = stateMot1[j][0];
			stateMot0[j][1] = stateMot1[j][1];
			stateMot0[j][2] = stateMot1[j][2];

			stateTor0[j][0] = stateTor1[j][0];
			stateTor0[j][1] = stateTor1[j][1];
			stateTor0[j][2] = stateTor1[j][2];
		}

	}

	std::vector<double> QwithFric_vec(3 * SampleNum * (LoadTotalParas + 6));
	auto QwithFric = QwithFric_vec.data();
	for (int i = 0;i < 3 * SampleNum;i++)
	{
		for (int j = 0;j < LoadTotalParas;j++)
			QwithFric[i*(LoadTotalParas + 6) + j] = regressorVector[i*LoadTotalParas + j];
		for (int j = LoadTotalParas;j < LoadTotalParas + 6;j++)
			QwithFric[i*(LoadTotalParas + 6) + j] = regressorVectorFric[i * 6 + j - LoadTotalParas];
	}


	std::vector<double> BaseTor_vec(3 * SampleNum);
	auto BaseTor = BaseTor_vec.data();
	s_mm(3 * SampleNum, 1, LoadTotalParas + 6, QwithFric, estParasL0, BaseTor);

	std::vector<double> LoadTor_vec(3 * SampleNum);
	auto LoadTor = LoadTor_vec.data();
	for (int i = 0;i < 3 * SampleNum;i++)
		LoadTor[i] = regressorForces[i] - BaseTor[i];

	std::vector<double> LoadRegressor_vec(3 * SampleNum * 10);
	auto LoadRegressor = LoadRegressor_vec.data();
	for (int i = 0;i < 3 * SampleNum;i++)
		for (int j = 0;j < 10;j++)
			LoadRegressor[i*10 + j] = regressorVector[i*LoadTotalParas + 30 + j];


	// 求解 A的广义逆pinv 和 x
	std::vector<double> Lpinv_vec(3 * SampleNum * 10);
	auto Lpinv = Lpinv_vec.data();

	// 所需的中间变量，请对U的对角线元素做处理
	std::vector<double> Q_vec(3 * SampleNum * 10);
	auto Q = Q_vec.data();

	std::vector<double> tau_vec(3 * SampleNum);
	auto tau = tau_vec.data();

	std::vector<aris::Size> p_vec(3 * SampleNum);
	auto p = p_vec.data();

	aris::Size rank;

    s_householder_utp(3 * SampleNum, 10, LoadRegressor, Q, tau, p, rank, 1e-3);
	
	// 根据QR分解的结果求广义逆，相当于Matlab中的 pinv(A) //
	double tau2[3 * SampleNum];
    s_householder_utp2pinv(3 * SampleNum, 10, rank, Q, tau, p, Lpinv, tau2, 1e-3);
	// 根据QR分解的结果求广义逆，相当于Matlab中的 pinv(A)*b //
	s_mm(10, 1, 3 * SampleNum, Lpinv, LoadTor, Load);



	// 求解 A的广义逆pinv 和 x
	std::vector<double> pinv_vec(3 * SampleNum * (LoadTotalParas + 6));
	auto pinv = pinv_vec.data();

	// 所需的中间变量，请对U的对角线元素做处理
	std::vector<double> UQ_vec(3 * SampleNum * (LoadTotalParas + 6));
	auto UQ = UQ_vec.data();

	std::vector<double> tauQ_vec(3 * SampleNum);
	auto tauQ = tauQ_vec.data();

	std::vector<aris::Size> pQ_vec(3 * SampleNum);
	auto pQ = pQ_vec.data();

	aris::Size rankQ;

    s_householder_utp(3 * SampleNum, LoadTotalParas + 6, QwithFric, UQ, tauQ, pQ, rankQ, 1e-3);

	// 根据QR分解的结果求广义逆，相当于Matlab中的 pinv(A) //
	double tauQ2[3 * SampleNum];

    s_householder_utp2pinv(3 * SampleNum, LoadTotalParas + 6, rankQ, UQ, tauQ, pQ, pinv, tauQ2, 1e-3);
	// 根据QR分解的结果求广义逆，相当于Matlab中的 pinv(A)*b //
	double estParas[LoadTotalParas + 6] = { 0 };
	s_mm(LoadTotalParas + 6, 1, 3 * SampleNum, pinv, regressorForces, estParas);

    for (int i = 0;i < 46;i++)
        std::cout << estParas[i] << std::endl;

	//Calculate Model Error
	std::vector<double> Error_vec(3 * SampleNum);
	auto Error = Error_vec.data();

	s_mm(3 * SampleNum, 1, LoadTotalParas + 6, QwithFric, estParas, Error);
	for (int i = 0;i < 3 * SampleNum;i++)
		Error[i] = Error[i] - regressorForces[i];

	double SumError[3] = { 0 };
	for (int j = 0;j < 3;j++)
		for (int i = 0;i < SampleNum;i++)
			SumError[j] = SumError[j] + Error[i * 3 + j] * Error[i * 3 + j];

	for (int j = 0;j < 3;j++)
		StatisError[j] = sqrt(SumError[j] / SampleNum);


}


void jointdynamics::LoadParasExt(const double *dEst,const double *Coef, const double*CoefInv,double *Load)
{
    double A0[13][10]={0};
    A0[0][0] = -7.54319895211347E-3;
    A0[0][1] = 2.940732674575371E-2;
    A0[0][2] = -6.735224297140328E-3;
    A0[0][3] = -4.215928513213807E-2;
    A0[0][4] = 2.770866655375189E-2;
    A0[0][5] = -3.236148722176504E-3;
    A0[0][6] = -3.288365945939263E-1;
    A0[0][7] = 1.683674172863261E-1;
    A0[0][8] = -4.409593974683785E-1;
    A0[0][9] = -1.080188212542064E-1;
    A0[1][0] = 2.459412175843069E-2;
    A0[1][1] = 2.299375793262387E-2;
    A0[1][2] = -1.239290004698341E-2;
    A0[1][3] = 2.009174052858257E-1;
    A0[1][4] = -1.425511796446176E-1;
    A0[1][5] = 1.176691522489087E-2;
    A0[1][6] = 4.95217661627108E-1;
    A0[1][7] = 6.495770060634166E-2;
    A0[1][8] = -2.285027328820865E-1;
    A0[1][9] = -6.600263213023068E-2;
    A0[2][0] = 5.259428035599421E-3;
    A0[2][1] = -1.601628800082738E-1;
    A0[2][2] = 4.322412204089508E-2;
    A0[2][3] = -5.967870808060962E-2;
    A0[2][4] = 5.832332699788419E-2;
    A0[2][5] = 2.052223628212512E-3;
    A0[2][6] = 3.813338088139936E-2;
    A0[2][7] = -9.557319382595261E-2;
    A0[2][8] = 4.449764835237131E-1;
    A0[2][9] = -1.370313648091881E-1;
    A0[3][0] = -8.255148680246559E-3;
    A0[3][1] = -8.92173824562245E-2;
    A0[3][2] = 2.164664100474995E-2;
    A0[3][3] = 2.190916236519812E-3;
    A0[3][4] = 7.106514150923267E-2;
    A0[3][5] = -2.687081449257768E-2;
    A0[3][6] = 4.696294696562886E-2;
    A0[3][7] = 9.733454286329107E-1;
    A0[3][8] = 1.267241057617374E-1;
    A0[3][9] = 1.067906563306526E-2;
    A0[4][0] = -3.639198692907122E-3;
    A0[4][1] = 9.030728612207548E-1;
    A0[4][2] = -2.867544810062981E-1;
    A0[4][3] = 7.421790915681513E-2;
    A0[4][4] = -1.433130262212204E-1;
    A0[4][5] = 1.408795289413467E-3;
    A0[4][6] = -7.989790536113345E-3;
    A0[4][7] = 7.87167627956159E-2;
    A0[4][8] = 1.12160385185973E-1;
    A0[4][9] = -1.544032733401368E-2;
    A0[5][0] = 5.256204542499308E-3;
    A0[5][1] = -7.301907278282227E-2;
    A0[5][2] = 3.099430489965549E-2;
    A0[5][3] = -6.133554142264172E-2;
    A0[5][4] = 1.998002130722304E-2;
    A0[5][5] = 5.861442359448809E-2;
    A0[5][6] = 3.271474866328619E-1;
    A0[5][7] = 8.654896355910435E-3;
    A0[5][8] = -1.465450761631431E-1;
    A0[5][9] = 1.143457348509767E-2;
    A0[6][0] = 6.06729265707072E-2;
    A0[6][1] = -2.11824823997904E-1;
    A0[6][2] = 5.032970460015663E-2;
    A0[6][3] = 5.302867249145721E-1;
    A0[6][4] = -3.80897315478578E-1;
    A0[6][5] = 4.842501135671548E-2;
    A0[6][6] = -2.077304157020059E-1;
    A0[6][7] = 1.075167472739577E-2;
    A0[6][8] = 6.436179155324408E-2;
    A0[6][9] = 5.831699655064405E-3;
    A0[7][0] = 9.230901807631509E-2;
    A0[7][1] = -7.388933463878622E-2;
    A0[7][2] = -4.724539616897652E-2;
    A0[7][3] = -2.757567081711205E-1;
    A0[7][4] = -6.355775113703722E-1;
    A0[7][5] = 4.916310327584915E-1;
    A0[7][6] = 3.225223840807312E-1;
    A0[7][7] = 3.823780053561065E-2;
    A0[7][8] = 1.669314493978099E-2;
    A0[7][9] = -5.935072798402396E-4;
    A0[8][0] = -6.216941245536119E-1;
    A0[8][1] = 1.046520439511566E-1;
    A0[8][2] = 4.755947509212226E-1;
    A0[8][3] = 2.507986149751604E-1;
    A0[8][4] = -3.451560721707806E-1;
    A0[8][5] = -6.026228762152101E-2;
    A0[8][6] = -1.492290127538505E-1;
    A0[8][7] = 1.655777632633159E-2;
    A0[8][8] = 7.276747241242691E-3;
    A0[8][9] = -1.573424800256093E-3;
    A0[9][0] = 4.123039869202205E-2;
    A0[9][1] = 1.902430641136359E-1;
    A0[9][2] = 5.837967720392218E-1;
    A0[9][3] = 5.488703815113569E-2;
    A0[9][4] = 2.695953567076703E-1;
    A0[9][5] = -1.315166738899023E-1;
    A0[9][6] = 4.723442625690059E-1;
    A0[9][7] = -2.803650741840079E-2;
    A0[9][8] = -1.411294816070878E-4;
    A0[9][9] = -8.065600800339981E-4;
    A0[10][0] = 5.095200883818052E-1;
    A0[10][1] = 1.71147532129506E-1;
    A0[10][2] = 5.384797602777248E-1;
    A0[10][3] = -3.327176353278898E-1;
    A0[10][4] = -2.487136440463936E-1;
    A0[10][5] = -1.23159537380222E-1;
    A0[10][6] = -2.645433458194963E-1;
    A0[10][7] = 2.611776744625929E-2;
    A0[10][8] = 6.393169687679224E-3;
    A0[10][9] = 2.952329903709067E-4;
    A0[11][0] = 7.63409037516979E-2;
    A0[11][1] = -8.360853706282816E-2;
    A0[11][2] = -1.753847081331544E-2;
    A0[11][3] = -2.746120956143726E-1;
    A0[11][4] = -1.587705278841552E-1;
    A0[11][5] = -1.890328274729111E-1;
    A0[11][6] = -1.562703903641718E-1;
    A0[11][7] = 3.258803010186313E-2;
    A0[11][8] = -2.637005182893601E-2;
    A0[11][9] = 1.432775270859407E-3;
    A0[12][0] = 4.885929489047498E-3;
    A0[12][1] = -1.018160119824223E-1;
    A0[12][2] = -2.285455681410842E-1;
    A0[12][3] = -4.912870581770615E-2;
    A0[12][4] = -3.487108196788577E-1;
    A0[12][5] = -8.245066797607572E-1;
    A0[12][6] = 2.211839564438602E-1;
    A0[12][7] = -1.562254931189791E-2;
    A0[12][8] = 3.536256041471485E-3;
    A0[12][9] = -5.609080651350741E-4;

	for (int i = 0;i < 13;i++)
		for (int j = 0;j < 10;j++)
            A0[i][j] = Coef[i * 40 + 30 + j];

    double Avec[13*10]={0};
    for (int i=0;i<13;i++)
        for (int j=0;j<10;j++)
            Avec[i*10+j]=A0[i][j];
	// 求解 A的广义逆pinv 和 x
    double pinv[LoadReduceParas* 10];

	// 所需的中间变量，请对U的对角线元素做处理
	double U[LoadReduceParas* 10];
	double tau[LoadReduceParas];
	aris::Size p[LoadReduceParas];
	aris::Size rank;

	// 根据 A 求出中间变量，相当于做 QR 分解 //
// 请对 U 的对角线元素做处理
    s_householder_utp(LoadReduceParas, 10, Avec, U, tau, p, rank, 1e-10);

	// 根据QR分解的结果求广义逆，相当于Matlab中的 pinv(A) //
	double tau2[LoadReduceParas];
    s_householder_utp2pinv(LoadReduceParas, 10, rank, U, tau, p, pinv, tau2, 1e-10);
	// 根据QR分解的结果求广义逆，相当于Matlab中的 pinv(A)*b //
	s_mm(10, 1, LoadReduceParas, pinv, dEst, Load);
}





