#include"sevenjointdynamics.h"
#include<stdio.h>
#include<math.h>
#include<array>
#include"robotconfig.h"
#include <aris.hpp>

using namespace SevenJointDynamicsInt;

using namespace CONFIG;
using namespace aris::plan;
using namespace aris::dynamic;

double A[3][3];
double B[3];

extern double t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20,
t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40,
t41, t42, t43, t44, t45, t46, t47, t48, t49, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t60,
t61, t62, t63, t64, t65, t66, t67, t68, t69, t70, t71, t72, t73, t74, t75, t76, t77, t78, t79, t80,
t81, t82, t83, t84, t85, t86, t87, t88, t89, t90, t91, t92, t93, t94, t95, t96, t97, t98, t99, t100,
t101, t102, t103, t104, t105, t106, t107, t108, t109, t110, t111, t112, t113, t114, t115, t116, t117, t118, t119, t120,
t121, t122, t123, t124, t125, t126, t127, t128, t129, t130, t131, t132, t133, t134, t135, t136, t137, t138, t139, t140,
t141, t142, t143, t144, t145, t146, t147, t148, t149, t150, t151, t152, t153, t154, t155, t156, t157, t158, t159, t160,
t161, t162, t163, t164, t165, t166, t167, t168, t169, t170, t171, t172, t173, t174, t175, t176, t177, t178, t179, t180,
t181, t182, t183, t184, t185, t186, t187, t188, t189, t190, t191, t192, t193, t194, t195, t196, t197, t198, t199, t200,
t201, t202, t203, t204, t205, t206, t207, t208, t209, t210, t211, t212, t213, t214, t215, t216, t217, t218, t219, t220,
t221, t222, t223, t224, t225, t226, t227, t228, t229, t230, t231, t232, t233, t234, t235, t236, t237, t238, t239, t240,
t241, t242, t243, t244, t245, t246, t247, t248, t249, t250, t251, t252, t253, t254, t255, t256, t257, t258, t259, t260,
t261, t262, t263, t264, t265, t266, t267, t268, t269, t270, t271, t272, t273, t274, t275, t276, t277, t278, t279, t280,
t281, t282, t283, t284, t285, t286, t287, t288, t289, t290, t291, t292, t293, t294, t295, t296, t297, t298, t299, t300,
t301, t302, t303, t304, t305, t306, t307, t308, t309, t310, t311, t312, t313, t314, t315, t316, t317, t318, t319, t320,
t321, t322, t323, t324, t325, t326, t327, t328, t329, t330, t331, t332, t333, t334, t335, t336, t337, t338, t339, t340,
t341, t342, t343, t344, t345, t346, t347, t348, t349, t350, t351, t352, t353, t354, t355, t356, t357, t358, t359, t360,
t361, t362, t363, t364, t365, t366, t367, t368, t369, t370, t371, t372, t373, t374, t375, t376, t377, t378, t379, t380,
t381, t382, t383, t384, t385, t386, t387, t388, t389, t390, t391, t392, t393, t394, t395, t396, t397, t398, t399, t400,
t401, t402, t403, t404, t405, t406, t407, t408, t409, t410, t411, t412, t413, t414, t415, t416, t417, t418, t419, t420,
t421, t422, t423, t424, t425, t426, t427, t428, t429, t430, t431, t432, t433, t434, t435, t436, t437, t438, t439, t440,
t441, t442, t443, t444, t445, t446, t447, t448, t449, t450, t451, t452, t453, t454, t455, t456, t457, t458, t459, t460,
t461, t462, t463, t464, t465, t466, t467, t468, t469, t470, t471, t472, t473, t474, t475, t476, t477, t478, t479, t480,
t481, t482, t483, t484, t485, t486, t487, t488, t489, t490, t491, t492, t493, t494, t495, t496, t497, t498, t499, t500,
t501, t502, t503, t504, t505, t506, t507, t508, t509, t510, t511, t512, t513, t514, t515, t516, t517, t518, t519, t520,
t521, t522, t523, t524, t525, t526, t527, t528, t529, t530, t531, t532, t533, t534, t535, t536, t537, t538, t539, t540,
t541, t542, t543, t544, t545, t546, t547, t548, t549, t550, t551, t552, t553, t554, t555, t556, t557, t558, t559, t560,
t561, t562, t563, t564, t565, t566, t567, t568, t569, t570, t571, t572, t573, t574, t575, t576, t577, t578, t579, t580,
t581, t582, t583, t584, t585, t586, t587, t588, t589, t590, t591, t592, t593, t594, t595, t596, t597, t598, t599, t600,
t601, t602, t603, t604, t605, t606, t607, t608, t609, t610, t611, t612, t613, t614, t615, t616, t617, t618, t619, t620,
t621, t622, t623, t624, t625, t626, t627, t628, t629, t630, t631, t632, t633, t634, t635, t636, t637, t638, t639, t640,
t641, t642, t643, t644, t645, t646, t647, t648, t649, t650, t651, t652, t653, t654, t655, t656, t657, t658, t659, t660,
t661, t662, t663, t664, t665, t666, t667, t668, t669, t670, t671, t672, t673, t674, t675, t676, t677, t678, t679, t680,
t681, t682, t683, t684, t685, t686, t687, t688, t689, t690, t691, t692, t693, t694, t695, t696, t697, t698, t699, t700,
t701, t702, t703, t704, t705, t706, t707, t708, t709, t710, t711, t712, t713, t714, t715, t716, t717, t718, t719, t720,
t721, t722, t723, t724, t725, t726, t727, t728, t729, t730, t731, t732, t733, t734, t735, t736, t737, t738, t739, t740,
t741, t742, t743, t744, t745, t746, t747, t748, t749, t750, t751, t752, t753, t754, t755, t756, t757, t758, t759, t760,
t761, t762, t763, t764, t765, t766, t767, t768, t769, t770, t771, t772, t773, t774, t775, t776, t777, t778, t779, t780,
t781, t782, t783, t784, t785, t786, t787, t788, t789, t790, t791, t792, t793, t794, t795, t796, t797, t798, t799, t800,
t801, t802, t803, t804, t805, t806, t807, t808, t809, t810, t811, t812, t813, t814, t815, t816, t817, t818, t819, t820,
t821, t822, t823, t824, t825, t826, t827, t828, t829, t830, t831, t832, t833, t834, t835, t836, t837, t838, t839, t840,
t841, t842, t843, t844, t845, t846, t847, t848, t849, t850, t851, t852, t853, t854, t855, t856, t857, t858, t859, t860,
t861, t862, t863, t864, t865, t866, t867, t868, t869, t870, t871, t872, t873, t874, t875, t876, t877, t878, t879, t880,
t881, t882, t883, t884, t885, t886, t887, t888, t889, t890, t891, t892, t893, t894, t895, t896, t897, t898, t899, t900,
t901, t902, t903, t904, t905, t906, t907, t908, t909, t910, t911, t912, t913, t914, t915, t916, t917, t918, t919, t920,
t921, t922, t923, t924, t925, t926, t927, t928, t929, t930, t931, t932, t933, t934, t935, t936, t937, t938, t939, t940,
t941, t942, t943, t944, t945, t946, t947, t948, t949, t950, t951, t952, t953, t954, t955, t956, t957, t958, t959, t960,
t961, t962, t963, t964, t965, t966, t967, t968, t969, t970, t971, t972, t973, t974, t975, t976, t977, t978, t979, t980,
t981, t982, t983, t984, t985, t986, t987, t988, t989, t990, t991, t992, t993, t994, t995, t996, t997, t998, t999, t1000,
t1001, t1002, t1003, t1004, t1005, t1006, t1007, t1008, t1009, t1010, t1011, t1012, t1013, t1014, t1015, t1016, t1017, t1018, t1019, t1020,
t1021, t1022, t1023, t1024, t1025, t1026, t1027, t1028, t1029, t1030, t1031, t1032, t1033, t1034, t1035, t1036, t1037, t1038, t1039, t1040,
t1041, t1042, t1043, t1044, t1045, t1046, t1047, t1048, t1049, t1050, t1051, t1052, t1053, t1054, t1055, t1056, t1057, t1058, t1059, t1060,
t1061, t1062, t1063, t1064, t1065, t1066, t1067, t1068, t1069, t1070, t1071, t1072, t1073, t1074, t1075, t1076, t1077, t1078, t1079, t1080,
t1081, t1082, t1083, t1084, t1085, t1086, t1087, t1088, t1089, t1090, t1091, t1092, t1093, t1094, t1095, t1096, t1097, t1098, t1099, t1100,
t1101, t1102, t1103, t1104, t1105, t1106, t1107, t1108, t1109, t1110, t1111, t1112, t1113, t1114, t1115, t1116, t1117, t1118, t1119, t1120,
t1121, t1122, t1123, t1124, t1125, t1126, t1127, t1128, t1129, t1130, t1131, t1132, t1133, t1134, t1135, t1136, t1137, t1138, t1139, t1140,
t1141, t1142, t1143, t1144, t1145, t1146, t1147, t1148, t1149, t1150, t1151, t1152, t1153, t1154, t1155, t1156, t1157, t1158, t1159, t1160,
t1161, t1162, t1163, t1164, t1165, t1166, t1167, t1168, t1169, t1170, t1171, t1172, t1173, t1174, t1175, t1176, t1177, t1178, t1179, t1180,
t1181, t1182, t1183, t1184, t1185, t1186, t1187, t1188, t1189, t1190, t1191, t1192, t1193, t1194, t1195, t1196, t1197, t1198, t1199, t1200,
t1201, t1202, t1203, t1204, t1205, t1206, t1207, t1208, t1209, t1210, t1211, t1212, t1213, t1214, t1215, t1216, t1217, t1218, t1219, t1220,
t1221, t1222, t1223, t1224, t1225, t1226, t1227, t1228, t1229, t1230, t1231, t1232, t1233, t1234, t1235, t1236, t1237, t1238, t1239, t1240,
t1241, t1242, t1243, t1244, t1245, t1246, t1247, t1248, t1249, t1250, t1251, t1252, t1253, t1254, t1255, t1256, t1257, t1258, t1259, t1260,
t1261, t1262, t1263, t1264, t1265, t1266, t1267, t1268, t1269, t1270, t1271, t1272, t1273, t1274, t1275, t1276, t1277, t1278, t1279, t1280,
t1281, t1282, t1283, t1284, t1285, t1286, t1287, t1288, t1289, t1290, t1291, t1292, t1293, t1294, t1295, t1296, t1297, t1298, t1299, t1300,
t1301, t1302, t1303, t1304, t1305, t1306, t1307, t1308, t1309, t1310, t1311, t1312, t1313, t1314, t1315, t1316, t1317, t1318, t1319, t1320,
t1321, t1322, t1323, t1324, t1325, t1326, t1327, t1328, t1329, t1330, t1331, t1332, t1333, t1334, t1335, t1336, t1337, t1338, t1339, t1340,
t1341, t1342, t1343, t1344, t1345, t1346, t1347, t1348, t1349, t1350, t1351, t1352, t1353, t1354, t1355, t1356, t1357, t1358, t1359, t1360,
t1361, t1362, t1363, t1364, t1365, t1366, t1367, t1368, t1369, t1370, t1371, t1372, t1373, t1374, t1375, t1376, t1377, t1378, t1379, t1380,
t1381, t1382, t1383, t1384, t1385, t1386, t1387, t1388, t1389, t1390, t1391, t1392, t1393, t1394, t1395, t1396, t1397, t1398, t1399, t1400,
t1401, t1402, t1403, t1404, t1405, t1406, t1407, t1408, t1409, t1410, t1411, t1412, t1413, t1414, t1415, t1416, t1417, t1418, t1419, t1420,
t1421, t1422, t1423, t1424, t1425, t1426, t1427, t1428, t1429, t1430, t1431, t1432, t1433, t1434, t1435, t1436, t1437, t1438, t1439, t1440,
t1441, t1442, t1443, t1444, t1445, t1446, t1447, t1448, t1449, t1450, t1451, t1452, t1453, t1454, t1455, t1456, t1457, t1458, t1459, t1460,
t1461, t1462, t1463, t1464, t1465, t1466, t1467, t1468, t1469, t1470, t1471, t1472, t1473, t1474, t1475, t1476, t1477, t1478, t1479, t1480,
t1481, t1482, t1483, t1484, t1485, t1486, t1487, t1488, t1489, t1490, t1491, t1492, t1493, t1494, t1495, t1496, t1497, t1498, t1499, t1500,
t1501, t1502, t1503, t1504, t1505, t1506, t1507, t1508, t1509, t1510, t1511, t1512, t1513, t1514, t1515, t1516, t1517, t1518, t1519, t1520,
t1521, t1522, t1523, t1524, t1525, t1526, t1527, t1528, t1529, t1530, t1531, t1532, t1533, t1534, t1535, t1536, t1537, t1538, t1539, t1540,
t1541, t1542, t1543, t1544, t1545, t1546, t1547, t1548, t1549, t1550, t1551, t1552, t1553, t1554, t1555, t1556, t1557, t1558, t1559, t1560,
t1561, t1562, t1563, t1564, t1565, t1566, t1567, t1568, t1569, t1570, t1571, t1572, t1573, t1574, t1575, t1576, t1577, t1578, t1579, t1580,
t1581, t1582, t1583, t1584, t1585, t1586, t1587, t1588, t1589, t1590, t1591, t1592, t1593, t1594, t1595, t1596, t1597, t1598, t1599, t1600,
t1601, t1602, t1603, t1604, t1605, t1606, t1607, t1608, t1609, t1610, t1611, t1612, t1613, t1614, t1615, t1616, t1617, t1618, t1619, t1620,
t1621, t1622, t1623, t1624, t1625, t1626, t1627, t1628, t1629, t1630, t1631, t1632, t1633, t1634, t1635, t1636, t1637, t1638, t1639, t1640,
t1641, t1642, t1643, t1644, t1645, t1646, t1647, t1648, t1649, t1650, t1651, t1652, t1653, t1654, t1655, t1656, t1657, t1658, t1659, t1660,
t1661, t1662, t1663, t1664, t1665, t1666, t1667, t1668, t1669, t1670, t1671, t1672, t1673, t1674, t1675, t1676, t1677, t1678, t1679, t1680,
t1681, t1682, t1683, t1684, t1685, t1686, t1687, t1688, t1689, t1690, t1691, t1692, t1693, t1694, t1695, t1696, t1697, t1698, t1699, t1700,
t1701, t1702, t1703, t1704, t1705, t1706, t1707, t1708, t1709, t1710, t1711, t1712, t1713, t1714, t1715, t1716, t1717, t1718, t1719, t1720,
t1721, t1722, t1723, t1724, t1725, t1726, t1727, t1728, t1729, t1730, t1731, t1732, t1733, t1734, t1735, t1736, t1737, t1738, t1739, t1740,
t1741, t1742, t1743, t1744, t1745, t1746, t1747, t1748, t1749, t1750, t1751, t1752, t1753, t1754, t1755, t1756, t1757, t1758, t1759, t1760,
t1761, t1762, t1763, t1764, t1765, t1766, t1767, t1768, t1769, t1770, t1771, t1772, t1773, t1774, t1775, t1776, t1777, t1778, t1779, t1780,
t1781, t1782, t1783, t1784, t1785, t1786, t1787, t1788, t1789, t1790, t1791, t1792, t1793, t1794, t1795, t1796, t1797, t1798, t1799, t1800,
t1801, t1802, t1803, t1804, t1805, t1806, t1807, t1808, t1809, t1810, t1811, t1812, t1813, t1814, t1815, t1816, t1817, t1818, t1819, t1820,
t1821, t1822, t1823, t1824, t1825, t1826, t1827, t1828, t1829, t1830, t1831, t1832, t1833, t1834, t1835, t1836, t1837, t1838, t1839, t1840,
t1841, t1842, t1843, t1844, t1845, t1846, t1847, t1848, t1849, t1850, t1851, t1852, t1853, t1854, t1855, t1856, t1857, t1858, t1859, t1860,
t1861, t1862, t1863, t1864, t1865, t1866, t1867, t1868, t1869, t1870, t1871, t1872, t1873, t1874, t1875, t1876, t1877, t1878, t1879, t1880,
t1881, t1882, t1883, t1884, t1885, t1886, t1887, t1888, t1889, t1890, t1891, t1892, t1893, t1894, t1895, t1896, t1897, t1898, t1899, t1900,
t1901, t1902, t1903, t1904, t1905, t1906, t1907, t1908, t1909, t1910, t1911, t1912, t1913, t1914, t1915, t1916, t1917, t1918, t1919, t1920,
t1921, t1922, t1923, t1924, t1925, t1926, t1927, t1928, t1929, t1930, t1931, t1932, t1933, t1934, t1935, t1936, t1937, t1938, t1939, t1940,
t1941, t1942, t1943, t1944, t1945, t1946, t1947, t1948, t1949, t1950, t1951, t1952, t1953, t1954, t1955, t1956, t1957, t1958, t1959, t1960,
t1961, t1962, t1963, t1964, t1965, t1966, t1967, t1968, t1969, t1970, t1971, t1972, t1973, t1974, t1975, t1976, t1977, t1978, t1979, t1980,
t1981, t1982, t1983, t1984, t1985, t1986, t1987, t1988, t1989, t1990, t1991, t1992, t1993, t1994, t1995, t1996, t1997, t1998, t1999, t2000,
t2001, t2002, t2003, t2004, t2005, t2006, t2007, t2008, t2009, t2010, t2011, t2012, t2013, t2014, t2015, t2016, t2017, t2018, t2019, t2020,
t2021, t2022, t2023, t2024, t2025, t2026, t2027, t2028, t2029, t2030, t2031, t2032, t2033, t2034, t2035, t2036, t2037, t2038, t2039, t2040,
t2041, t2042, t2043, t2044, t2045, t2046, t2047, t2048, t2049, t2050, t2051, t2052, t2053, t2054, t2055, t2056, t2057, t2058, t2059, t2060,
t2061, t2062, t2063, t2064, t2065, t2066, t2067, t2068, t2069, t2070, t2071, t2072, t2073, t2074, t2075, t2076, t2077, t2078, t2079, t2080,
t2081, t2082, t2083, t2084, t2085, t2086, t2087, t2088, t2089, t2090, t2091, t2092, t2093, t2094, t2095, t2096, t2097, t2098, t2099, t2100,
t2101, t2102, t2103, t2104, t2105, t2106, t2107, t2108, t2109, t2110, t2111, t2112, t2113, t2114, t2115, t2116, t2117, t2118, t2119, t2120,
t2121, t2122, t2123, t2124, t2125, t2126, t2127, t2128, t2129, t2130, t2131, t2132, t2133, t2134, t2135, t2136, t2137, t2138, t2139, t2140,
t2141, t2142, t2143, t2144, t2145, t2146, t2147, t2148, t2149, t2150, t2151, t2152, t2153, t2154, t2155, t2156, t2157, t2158, t2159, t2160,
t2161, t2162, t2163, t2164, t2165, t2166, t2167, t2168, t2169, t2170, t2171, t2172, t2173, t2174, t2175, t2176, t2177, t2178, t2179, t2180,
t2181, t2182, t2183, t2184, t2185, t2186, t2187, t2188, t2189, t2190, t2191, t2192, t2193, t2194, t2195, t2196, t2197, t2198, t2199, t2200,
t2201, t2202, t2203, t2204, t2205, t2206, t2207, t2208, t2209, t2210, t2211, t2212, t2213, t2214, t2215, t2216, t2217, t2218, t2219, t2220,
t2221, t2222, t2223, t2224, t2225, t2226, t2227, t2228, t2229, t2230, t2231, t2232, t2233, t2234, t2235, t2236, t2237, t2238, t2239, t2240,
t2241, t2242, t2243, t2244, t2245, t2246, t2247, t2248, t2249, t2250, t2251, t2252, t2253, t2254, t2255, t2256, t2257, t2258, t2259, t2260,
t2261, t2262, t2263, t2264, t2265, t2266, t2267, t2268, t2269, t2270, t2271, t2272, t2273, t2274, t2275, t2276, t2277, t2278, t2279, t2280,
t2281, t2282, t2283, t2284, t2285, t2286, t2287, t2288, t2289, t2290, t2291, t2292, t2293, t2294, t2295, t2296, t2297, t2298, t2299, t2300,
t2301, t2302, t2303, t2304, t2305, t2306, t2307, t2308, t2309, t2310, t2311, t2312, t2313, t2314, t2315, t2316, t2317, t2318, t2319, t2320,
t2321, t2322, t2323, t2324, t2325, t2326, t2327, t2328, t2329, t2330, t2331, t2332, t2333, t2334, t2335, t2336, t2337, t2338, t2339, t2340,
t2341, t2342, t2343, t2344, t2345, t2346, t2347, t2348, t2349, t2350, t2351, t2352, t2353, t2354, t2355, t2356, t2357, t2358, t2359, t2360,
t2361, t2362, t2363, t2364, t2365, t2366, t2367, t2368, t2369, t2370, t2371, t2372, t2373, t2374, t2375, t2376, t2377, t2378, t2379, t2380,
t2381, t2382, t2383, t2384, t2385, t2386, t2387, t2388, t2389, t2390, t2391, t2392, t2393, t2394, t2395, t2396, t2397, t2398, t2399, t2400,
t2401, t2402, t2403, t2404, t2405, t2406, t2407, t2408, t2409, t2410, t2411, t2412, t2413, t2414, t2415, t2416, t2417, t2418, t2419, t2420,
t2421, t2422, t2423, t2424, t2425, t2426, t2427, t2428, t2429, t2430, t2431, t2432, t2433, t2434, t2435, t2436, t2437, t2438, t2439, t2440,
t2441, t2442, t2443, t2444, t2445, t2446, t2447, t2448, t2449, t2450, t2451, t2452, t2453, t2454, t2455, t2456, t2457, t2458, t2459, t2460,
t2461, t2462, t2463, t2464, t2465, t2466, t2467, t2468, t2469, t2470, t2471, t2472, t2473, t2474, t2475, t2476, t2477, t2478, t2479, t2480,
t2481, t2482, t2483, t2484, t2485, t2486, t2487, t2488, t2489, t2490, t2491, t2492, t2493, t2494, t2495, t2496, t2497, t2498, t2499, t2500,
t2501, t2502, t2503, t2504, t2505, t2506, t2507, t2508, t2509, t2510, t2511, t2512, t2513, t2514, t2515, t2516, t2517, t2518, t2519, t2520,
t2521, t2522, t2523, t2524, t2525, t2526, t2527, t2528, t2529, t2530, t2531, t2532, t2533, t2534, t2535, t2536, t2537, t2538, t2539, t2540,
t2541, t2542, t2543, t2544, t2545, t2546, t2547, t2548, t2549, t2550, t2551, t2552, t2553, t2554, t2555, t2556, t2557, t2558, t2559, t2560,
t2561, t2562, t2563, t2564, t2565, t2566, t2567, t2568, t2569, t2570, t2571, t2572, t2573, t2574, t2575, t2576, t2577, t2578, t2579, t2580,
t2581, t2582, t2583, t2584, t2585, t2586, t2587, t2588, t2589, t2590, t2591, t2592, t2593, t2594, t2595, t2596, t2597, t2598, t2599, t2600,
t2601, t2602, t2603, t2604, t2605, t2606, t2607, t2608, t2609, t2610, t2611, t2612, t2613, t2614, t2615, t2616, t2617, t2618, t2619, t2620,
t2621, t2622, t2623, t2624, t2625, t2626, t2627, t2628, t2629, t2630, t2631, t2632, t2633, t2634, t2635, t2636, t2637, t2638, t2639, t2640,
t2641, t2642, t2643, t2644, t2645, t2646, t2647, t2648, t2649, t2650, t2651, t2652, t2653, t2654, t2655, t2656, t2657, t2658, t2659, t2660,
t2661, t2662, t2663, t2664, t2665, t2666, t2667, t2668, t2669, t2670, t2671, t2672, t2673, t2674, t2675, t2676, t2677, t2678, t2679, t2680,
t2681, t2682, t2683, t2684, t2685, t2686, t2687, t2688, t2689, t2690, t2691, t2692, t2693, t2694, t2695, t2696, t2697, t2698, t2699, t2700,
t2701, t2702, t2703, t2704, t2705, t2706, t2707, t2708, t2709, t2710, t2711, t2712, t2713, t2714, t2715, t2716, t2717, t2718, t2719, t2720,
t2721, t2722, t2723, t2724, t2725, t2726, t2727, t2728, t2729, t2730, t2731, t2732, t2733, t2734, t2735, t2736, t2737, t2738, t2739, t2740,
t2741, t2742, t2743, t2744, t2745, t2746, t2747, t2748, t2749, t2750, t2751, t2752, t2753, t2754, t2755, t2756, t2757, t2758, t2759, t2760,
t2761, t2762, t2763, t2764, t2765, t2766, t2767, t2768, t2769, t2770, t2771, t2772, t2773, t2774, t2775, t2776, t2777, t2778, t2779, t2780,
t2781, t2782, t2783, t2784, t2785, t2786, t2787, t2788, t2789, t2790, t2791, t2792, t2793, t2794, t2795, t2796, t2797, t2798, t2799, t2800,
t2801, t2802, t2803, t2804, t2805, t2806, t2807, t2808, t2809, t2810, t2811, t2812, t2813, t2814, t2815, t2816, t2817, t2818, t2819, t2820,
t2821, t2822, t2823, t2824, t2825, t2826, t2827, t2828, t2829, t2830, t2831, t2832, t2833, t2834, t2835, t2836, t2837, t2838, t2839, t2840,
t2841, t2842, t2843, t2844, t2845, t2846, t2847, t2848, t2849, t2850, t2851, t2852, t2853, t2854, t2855, t2856, t2857, t2858, t2859, t2860,
t2861, t2862, t2863, t2864, t2865, t2866, t2867, t2868, t2869, t2870, t2871, t2872, t2873, t2874, t2875, t2876, t2877, t2878, t2879, t2880,
t2881, t2882, t2883, t2884, t2885, t2886, t2887, t2888, t2889, t2890, t2891, t2892, t2893, t2894, t2895, t2896, t2897, t2898, t2899, t2900,
t2901, t2902, t2903, t2904, t2905, t2906, t2907, t2908, t2909, t2910, t2911, t2912, t2913, t2914, t2915, t2916, t2917, t2918, t2919, t2920,
t2921, t2922, t2923, t2924, t2925, t2926, t2927, t2928, t2929, t2930, t2931, t2932, t2933, t2934, t2935, t2936, t2937, t2938, t2939, t2940,
t2941, t2942, t2943, t2944, t2945, t2946, t2947, t2948, t2949, t2950, t2951, t2952, t2953, t2954, t2955, t2956, t2957, t2958, t2959, t2960,
t2961, t2962, t2963, t2964, t2965, t2966, t2967, t2968, t2969, t2970, t2971, t2972, t2973, t2974, t2975, t2976, t2977, t2978, t2979, t2980,
t2981, t2982, t2983, t2984, t2985, t2986, t2987, t2988, t2989, t2990, t2991, t2992, t2993, t2994, t2995, t2996, t2997, t2998, t2999, t3000,
t3001, t3002, t3003, t3004, t3005, t3006, t3007, t3008, t3009, t3010, t3011, t3012, t3013, t3014, t3015, t3016, t3017, t3018, t3019, t3020,
t3021, t3022, t3023, t3024, t3025, t3026, t3027, t3028, t3029, t3030, t3031, t3032, t3033, t3034, t3035, t3036, t3037, t3038, t3039, t3040,
t3041, t3042, t3043, t3044, t3045, t3046, t3047, t3048, t3049, t3050, t3051, t3052, t3053, t3054, t3055, t3056, t3057, t3058, t3059, t3060,
t3061, t3062, t3063, t3064, t3065, t3066, t3067, t3068, t3069, t3070, t3071, t3072, t3073, t3074, t3075, t3076, t3077, t3078, t3079, t3080,
t3081, t3082, t3083, t3084, t3085, t3086, t3087, t3088, t3089, t3090, t3091, t3092, t3093, t3094, t3095, t3096, t3097, t3098, t3099, t3100,
t3101, t3102, t3103, t3104, t3105, t3106, t3107, t3108, t3109, t3110, t3111, t3112, t3113, t3114, t3115, t3116, t3117, t3118, t3119, t3120,
t3121, t3122, t3123, t3124, t3125, t3126, t3127, t3128, t3129, t3130, t3131, t3132, t3133, t3134, t3135, t3136, t3137, t3138, t3139, t3140,
t3141, t3142, t3143, t3144, t3145, t3146, t3147, t3148, t3149, t3150, t3151, t3152, t3153, t3154, t3155, t3156, t3157, t3158, t3159, t3160,
t3161, t3162, t3163, t3164, t3165, t3166, t3167, t3168, t3169, t3170, t3171, t3172, t3173, t3174, t3175, t3176, t3177, t3178, t3179, t3180,
t3181, t3182, t3183, t3184, t3185, t3186, t3187, t3188, t3189, t3190, t3191, t3192, t3193, t3194, t3195, t3196, t3197, t3198, t3199, t3200,
t3201, t3202, t3203, t3204, t3205, t3206, t3207, t3208, t3209, t3210, t3211, t3212, t3213, t3214, t3215, t3216, t3217, t3218, t3219, t3220,
t3221, t3222, t3223, t3224, t3225, t3226, t3227, t3228, t3229, t3230, t3231, t3232, t3233, t3234, t3235, t3236, t3237, t3238, t3239, t3240,
t3241, t3242, t3243, t3244, t3245, t3246, t3247, t3248, t3249, t3250, t3251, t3252, t3253, t3254, t3255, t3256, t3257, t3258, t3259, t3260,
t3261, t3262, t3263, t3264, t3265, t3266, t3267, t3268, t3269, t3270, t3271, t3272, t3273, t3274, t3275, t3276, t3277, t3278, t3279, t3280,
t3281, t3282, t3283, t3284, t3285, t3286, t3287, t3288, t3289, t3290, t3291, t3292, t3293, t3294, t3295, t3296, t3297, t3298, t3299, t3300;



sevenjointdynamics::sevenjointdynamics()
{
	A[0][0] = 0; A[0][1] = 1; A[0][2] = 0;
	A[1][0] = 0; A[1][1] = 0; A[1][2] = 1;
	A[2][0] = -CutoffFrequency * CutoffFrequency * CutoffFrequency;
	A[2][1] = -2 * CutoffFrequency * CutoffFrequency;
	A[2][2] = -2 * CutoffFrequency;
	B[0] = 0; B[1] = 0;
	B[2] = -A[2][0];
}

int SevenSign(double x)
{
	if (x > 0) return 1;
	if (x == 0) return 0;
	if (x < 0) return -1;
}

void SevenJointMatrix(const double* q, const double* dq, const double* ddq, const double* ts, double* distalVec)
{

	//double[] qTemp=new double[common.RobotAxis];
  //  , dqTemp, ddqTemp;
	double q1, q2, q3, q4, q5, q6, q7;
	double dq1, dq2, dq3, dq4, dq5, dq6, dq7;
	double ddq1, ddq2, ddq3, ddq4, ddq5, ddq6, ddq7;
	double ts1, ts2, ts3, ts4, ts5, ts6, ts7;
	double g = 9.81;

	q1 = q[0];
	q2 = q[1];
	q3 = q[2];
	q4 = q[3];
	q5 = q[4];
	q6 = q[5];
	q7 = q[6];

	dq1 = dq[0]; dq2 = dq[1]; dq3 = dq[2]; dq4 = dq[3]; dq5 = dq[4]; dq6 = dq[5]; dq7 = dq[6];
	ddq1 = ddq[0]; ddq2 = ddq[1]; ddq3 = ddq[2]; ddq4 = ddq[3]; ddq5 = ddq[4]; ddq6 = ddq[5]; ddq7 = ddq[6];

	ts1 = ts[0]; ts2 = ts[1]; ts3 = ts[2]; ts4 = ts[3]; ts5 = ts[4]; ts6 = ts[5]; ts7 = ts[6];

	double A0[RobotAxis][JointGroupDim];
	for (int i = 0; i < RobotAxis; i++)
		for (int j = 0; j < JointGroupDim; j++)
			A0[i][j] = 0;

	double DF = 0;//The Sixth Coordinate in Wrist
	t2 = sin(q2);
	t3 = cos(q2);
	t4 = ddq1 * t2;
	t5 = dq1 * dq1;
	t6 = ddq1 * t3;
	t7 = dq1 * dq2*t2*t3;
	t8 = dq2 * dq2;
	t9 = t2 * t3*t5;
	t10 = cos(q3);
	t11 = dq1 * dq2*t3;
	t12 = t4 + t11;
	t13 = sin(q3);
	t14 = dq2 * t13;
	t15 = dq1 * t2*t10;
	t16 = t14 + t15;
	t17 = dq2 * t10;
	t21 = dq1 * t2*t13;
	t18 = t17 - t21;
	t19 = t10 * t12;
	t24 = dq1 * t3;
	t20 = dq3 - t24;
	t22 = dq3 * t18;
	t23 = ddq2 * t13;
	t25 = t16 * t16;
	t26 = t18 * t20;
	t27 = t12 * t13;
	t28 = dq3 * t16;
	t29 = t3 * t16*t18;
	t30 = t16 * t18;
	t31 = dq1 * dq2*t2;
	t32 = t20 * t20;
	t33 = t18 * t18;
	t34 = t16 * t20;
	t35 = t2 * t2;
	t36 = ddq3 - t6 + t30 + t31;
	t37 = d3 * ddq2;
	t38 = g * t2;
	t48 = d3 * t2*t3*t5;
	t39 = t37 + t38 - t48;
	t40 = d3 * t12;
	t41 = d3 * dq1*dq2*t3;
	t42 = t40 + t41;
	t43 = d3 * t8;
	t44 = g * t3;
	t45 = d3 * t5*t35;
	t46 = t43 + t44 + t45;
	t47 = ddq3 - t6 - t30 + t31;
	t49 = t13 * t39;
	t50 = t10 * t42;
	t51 = t49 + t50;
	t52 = t10 * t39;
	t55 = t13 * t42;
	t53 = t52 - t55;
	t54 = t19 + t22 + t23 - t26;
	t56 = cos(q4);
	t57 = sin(q4);
	t58 = ddq3 - t6 + t31;
	t59 = t19 + t22 + t23;
	t60 = t20 * t57;
	t61 = t16 * t56;
	t62 = t60 + t61;
	t63 = t16 * t57;
	t69 = t20 * t56;
	t64 = t63 - t69;
	t65 = t57 * t58;
	t66 = t56 * t59;
	t71 = dq4 * t64;
	t67 = t65 + t66 - t71;
	t68 = dq4 - t17 + t21;
	t70 = t63 - t69;
	t92 = t64 * t68;
	t72 = t65 + t66 - t71 - t92;
	t73 = t62 * t68;
	t74 = dq4 * t62;
	t75 = t57 * t59;
	t81 = t56 * t58;
	t76 = t73 + t74 + t75 - t81;
	t77 = t62 * t62;
	t78 = t68 * t68;
	t79 = t77 - t78;
	t85 = ddq2 * t10;
	t86 = t62 * t64;
	t80 = ddq4 + t27 + t28 - t85 - t86;
	t82 = t13 * t62*t64;
	t83 = t74 + t75 - t81;
	t84 = t63 - t69;
	t87 = t63 - t69;
	t88 = ddq4 + t27 + t28 - t85 + t86;
	t89 = t56 * t64*t68;
	t90 = t56 * t62*t68;
	t91 = t63 - t69;
	t93 = t56 * t88;
	t94 = t53 * t57;
	t95 = t46 * t56;
	t96 = t94 + t95;
	t97 = t46 * t57;
	t103 = t53 * t56;
	t98 = t97 - t103;
	t99 = t73 - t74 - t75 + t81;
	t100 = t68 * (t63 - t69);
	t101 = t65 + t66 - t71 + t100;
	t102 = t63 - t69;
	t104 = d3 * t10*t51;
	t105 = t57 * t96;
	t555 = t56 * t98;
	t106 = t105 - t555;
	t107 = ddq4 + t27 + t28 - t85;
	t108 = cos(q5);
	t109 = sin(q5);
	t110 = t68 * t109;
	t111 = t62 * t108;
	t112 = t110 + t111;
	t113 = t62 * t109;
	t114 = t107 * t109;
	t119 = t68 * t108;
	t115 = t113 - t119;
	t116 = t67 * t108;
	t120 = dq5 * t115;
	t117 = t114 + t116 - t120;
	t118 = dq5 + t63 - t69;
	t121 = t108 * t117;
	t155 = t109 * t112*t118;
	t122 = t121 - t155;
	t123 = t113 - t119;
	t131 = t115 * t118;
	t124 = t114 + t116 - t120 - t131;
	t125 = dq5 * t112;
	t126 = t67 * t109;
	t127 = t112 * t118;
	t129 = t107 * t108;
	t128 = t125 + t126 + t127 - t129;
	t130 = t108 * t128;
	t132 = t109 * t124;
	t133 = t130 + t132;
	t134 = t112 * t112;
	t135 = t113 - t119;
	t141 = t112 * t115;
	t136 = ddq5 + t74 + t75 - t81 - t141;
	t137 = t108 * t136;
	t138 = t118 * t118;
	t142 = t134 - t138;
	t139 = t109 * t142;
	t140 = t137 + t139;
	t143 = t57 * t112*t115;
	t144 = t125 + t126 - t129;
	t145 = t109 * t144;
	t146 = t108 * t115*t118;
	t147 = t145 + t146;
	t148 = t113 - t119;
	t149 = t113 - t119;
	t150 = t112 * (t113 - t119);
	t151 = ddq5 + t74 + t75 - t81 + t150;
	t152 = t113 - t119;
	t153 = t125 + t126 - t127 - t129;
	t154 = t108 * t112*t118;
	t156 = t146 - t155;
	t157 = ddq5 + t74 + t75 - t81;
	t158 = t113 - t119;
	t159 = d5 * t107;
	t160 = d5 * t64*t68;
	t175 = d5 * t67;
	t161 = t49 + t50 + t160 - t175;
	t162 = t108 * t161;
	t163 = d5 * t62*t64;
	t164 = -t97 + t103 + t159 + t163;
	t165 = t162 - t109 * t164;
	t169 = d5 * t78;
	t170 = d5 * t77;
	t166 = t94 + t95 - t169 - t170;
	t167 = t109 * t166;
	t168 = t113 - t119;
	t171 = t113 - t119;
	t172 = t113 - t119;
	t173 = t109 * t136;
	t174 = t113 - t119;
	t176 = t108 * (t94 + t95 - t169 - t170);
	t177 = t134 + t138;
	t178 = d5 * t108*t177;
	t179 = d5 * t109*t151;
	t180 = t176 + t178 + t179;
	t181 = t109 * t161;
	t182 = t108 * t164;
	t183 = t181 + t182;
	t184 = t109 * t151;
	t185 = t108 * t151;
	t186 = d5 * t62*(t63 - t69);
	t187 = -t97 + t103 + t159 + t186;
	t188 = t118 * (t113 - t119);
	t189 = t114 + t116 - t120 + t188;
	t195 = t109 * t187;
	t190 = t162 - t195;
	t191 = t108 * t187;
	t192 = t109 * (t49 + t50 + t160 - t175);
	t193 = t191 + t192;
	t194 = t113 - t119;
	t196 = t108 * t190;
	t197 = t109 * t193;
	t198 = t109 * t190;
	t199 = d5 * t108*t190;
	t200 = d5 * t109*t193;
	t201 = cos(q6);
	t202 = sin(q6);
	t203 = t118 * t202;
	t204 = t112 * t201;
	t205 = t203 + t204;
	t206 = t112 * t202;
	t208 = t118 * t201;
	t207 = t206 - t208;
	t209 = t117 * t201;
	t210 = t157 * t202;
	t213 = dq6 * t207;
	t211 = t209 + t210 - t213;
	t212 = dq6 + t113 - t119;
	t214 = t201 * t211;
	t216 = t202 * t205*t212;
	t215 = t214 - t216;
	t217 = t108 * t215;
	t218 = t109 * t205*(t206 - t208);
	t219 = t217 + t218;
	t220 = t202 * t211;
	t221 = t201 * t205*t212;
	t222 = t220 + t221;
	t223 = dq6 * t205;
	t224 = t117 * t202;
	t225 = t205 * t212;
	t231 = t157 * t201;
	t226 = t223 + t224 + t225 - t231;
	t229 = t207 * t212;
	t227 = t209 + t210 - t213 - t229;
	t228 = t206 - t208;
	t230 = t201 * t227;
	t602 = t202 * t226;
	t232 = t230 - t602;
	t233 = t201 * t226;
	t234 = t202 * t227;
	t235 = t233 + t234;
	t236 = t205 * t205;
	t237 = t206 - t208;
	t238 = t108 * t235;
	t239 = t206 - t208;
	t240 = t212 * t212;
	t241 = t236 - t240;
	t242 = t202 * t241;
	t248 = t205 * t207;
	t243 = ddq6 + t125 + t126 - t129 - t248;
	t244 = t201 * t243;
	t245 = t242 + t244;
	t246 = t212 * (t206 - t208);
	t247 = t209 + t210 - t213 + t246;
	t249 = t108 * t245;
	t250 = t109 * t247;
	t251 = t249 + t250;
	t252 = t201 * t241;
	t281 = t202 * t243;
	t253 = t252 - t281;
	t254 = t223 + t224 - t231;
	t255 = t202 * t254;
	t256 = t201 * t212*(t206 - t208);
	t257 = t255 + t256;
	t258 = t108 * t257;
	t610 = t109 * t205*t207;
	t259 = t258 - t610;
	t260 = t201 * t254;
	t275 = t202 * t207*t212;
	t261 = t260 - t275;
	t262 = t206 - t208;
	t263 = t206 - t208;
	t264 = t223 + t224 - t225 - t231;
	t265 = t206 - t208;
	t266 = t205 * (t206 - t208);
	t267 = ddq6 + t125 + t126 - t129 + t266;
	t268 = t202 * t267;
	t269 = t206 - t208;
	t270 = t109 * t264;
	t271 = t206 - t208;
	t272 = t201 * t267;
	t276 = t201 * t207*t212;
	t273 = t216 - t276;
	t274 = ddq6 + t125 + t126 - t129;
	t277 = t108 * t273;
	t278 = t109 * t274;
	t279 = t277 + t278;
	t280 = t221 + t275;
	t282 = t206 - t208;
	t283 = t166 * t201;
	t287 = t193 * t202;
	t288 = t283 - t287;
	t284 = t109 * t288;
	t285 = d5 * t108*t226;
	t286 = t206 - t208;
	t289 = t206 - t208;
	t290 = t206 - t208;
	t291 = t206 - t208;
	t292 = t206 - t208;
	t293 = t166 * t202;
	t294 = t193 * t201;
	t295 = t293 + t294;
	t296 = t109 * t295;
	t297 = t236 + t240;
	t301 = t202 * t297;
	t298 = t272 - t301;
	t299 = t108 * t190*t201;
	t630 = d5 * t108*t227;
	t631 = d5 * t109*t298;
	t300 = t296 + t299 - t630 - t631;
	t302 = t206 - t208;
	t303 = t201 * t288;
	t304 = t202 * t295;
	t305 = t303 + t304;
	t306 = t108 * t305;
	t307 = t206 - t208;
	t308 = t202 * t247;
	t312 = t201 * t264;
	t309 = t308 - t312;
	t310 = d5 * t109*t309;
	t311 = t206 - t208;
	t313 = t206 - t208;
	t314 = t206 - t208;
	t315 = d5 * t109*t190;
	t316 = t201 * t295;
	t317 = t202 * t288;
	t318 = t316 - t317;
	t319 = d5 * t109*t318;
	t320 = cos(q7);
	t321 = sin(q7);
	t322 = t211 * t320;
	t323 = t205 * t321;
	t331 = t212 * t320;
	t324 = t323 - t331;
	t325 = t274 * t321;
	t332 = dq7 * t324;
	t326 = t322 + t325 - t332;
	t327 = t212 * t321;
	t328 = t205 * t320;
	t329 = t327 + t328;
	t330 = dq7 + t206 - t208;
	t333 = t320 * t326;
	t339 = t321 * t329*t330;
	t334 = t333 - t339;
	t335 = t321 * t326;
	t336 = t320 * t329*t330;
	t337 = t335 + t336;
	t338 = t109 * t337;
	t340 = t201 * t334;
	t341 = t202 * t329*(t323 - t331);
	t342 = t340 + t341;
	t343 = t108 * t342;
	t344 = t338 + t343;
	t345 = t202 * t334;
	t662 = t201 * t324*t329;
	t346 = t345 - t662;
	t347 = t211 * t321;
	t348 = t329 * t330;
	t349 = dq7 * t329;
	t353 = t274 * t320;
	t350 = t347 + t348 + t349 - t353;
	t355 = t324 * t330;
	t351 = t322 + t325 - t332 - t355;
	t352 = t323 - t331;
	t354 = t320 * t350;
	t356 = t321 * t351;
	t357 = t354 + t356;
	t358 = t329 * t329;
	t359 = t323 - t331;
	t360 = t320 * t351;
	t367 = t321 * t350;
	t361 = t360 - t367;
	t362 = t109 * t361;
	t363 = t201 * t357;
	t364 = t323 - t331;
	t365 = t202 * t357;
	t366 = t323 - t331;
	t368 = t323 - t331;
	t371 = t324 * t329;
	t369 = ddq7 + t223 + t224 - t231 - t371;
	t370 = t330 * t330;
	t372 = t320 * t369;
	t378 = t358 - t370;
	t373 = t321 * t378;
	t374 = t372 + t373;
	t375 = t330 * (t323 - t331);
	t376 = t322 + t325 - t332 + t375;
	t377 = t321 * t369;
	t379 = t202 * t376;
	t380 = t201 * t374;
	t381 = t379 + t380;
	t669 = t320 * t378;
	t382 = t377 - t669;
	t383 = t321 * (t358 - t370);
	t384 = t372 + t383;
	t385 = t347 + t349 - t353;
	t386 = t321 * t385;
	t387 = t320 * t385;
	t395 = t321 * t324*t330;
	t388 = t387 - t395;
	t389 = t109 * t388;
	t390 = t320 * t330*(t323 - t331);
	t391 = t386 + t390;
	t392 = t202 * t391;
	t393 = t201 * t329*(t323 - t331);
	t394 = t392 + t393;
	t396 = t201 * t391;
	t679 = t202 * t324*t329;
	t397 = t396 - t679;
	t398 = t323 - t331;
	t399 = t329 * (t323 - t331);
	t400 = ddq7 + t223 + t224 - t231 + t399;
	t401 = t323 - t331;
	t402 = t321 * t400;
	t403 = t323 - t331;
	t404 = t347 - t348 + t349 - t353;
	t405 = t320 * t400;
	t406 = t323 - t331;
	t407 = t323 - t331;
	t408 = t202 * t404;
	t409 = t323 - t331;
	t410 = t201 * t404;
	t411 = t323 - t331;
	t412 = t323 - t331;
	t413 = t320 * t324*t330;
	t414 = ddq7 + t223 + t224 - t231;
	t415 = t339 - t413;
	t416 = t201 * t414;
	t689 = t202 * t415;
	t417 = t416 - t689;
	t418 = t202 * t414;
	t419 = t201 * t415;
	t420 = t418 + t419;
	t421 = t336 + t395;
	t691 = t108 * t420;
	t692 = t109 * t421;
	t422 = t691 - t692;
	t423 = t323 - t331;
	t424 = DF * t236;
	t425 = DF * t240;
	t426 = t283 - t287 + t424 + t425;
	t427 = t323 - t331;
	t428 = t323 - t331;
	t429 = t323 - t331;
	t430 = t321 * t426;
	t431 = DF * t320*t369;
	t432 = t323 - t331;
	t433 = DF * t211;
	t442 = DF * t207*t212;
	t434 = t162 - t195 + t433 - t442;
	t435 = t320 * t434;
	t436 = DF * t274;
	t437 = DF * t205*t207;
	t438 = t293 + t294 + t436 + t437;
	t439 = t321 * t438;
	t440 = t435 + t439;
	t441 = t323 - t331;
	t443 = t202 * t440;
	t444 = DF * t321*t369;
	t445 = t323 - t331;
	t446 = t323 - t331;
	t447 = t323 - t331;
	t448 = t323 - t331;
	t449 = t323 - t331;
	t450 = t323 - t331;
	t451 = t323 - t331;
	t452 = t323 - t331;
	t453 = t323 - t331;
	t454 = t323 - t331;
	t455 = t323 - t331;
	t456 = t323 - t331;
	t457 = t323 - t331;
	t458 = t358 + t370;
	t459 = DF * t321*t400;
	t460 = DF * t320*t458;
	t464 = t320 * t426;
	t461 = t459 + t460 - t464;
	t462 = t321 * t434;
	t466 = t320 * t438;
	t463 = t462 - t466;
	t465 = t201 * t461;
	t467 = t202 * t463;
	t468 = t465 + t467;
	t469 = DF * t320*t400;
	t477 = DF * t321*t458;
	t470 = t430 + t469 - t477;
	t471 = t320 * t458;
	t472 = t402 + t471;
	t480 = t321 * t458;
	t473 = t405 - t480;
	t474 = t202 * t351;
	t481 = t201 * t473;
	t475 = t474 - t481;
	t476 = t202 * t461;
	t478 = t109 * t470;
	t479 = d5 * t108*t472;
	t482 = d5 * t109*t475;
	t713 = t108 * t468;
	t483 = t478 + t479 + t482 - t713;
	t715 = t201 * t463;
	t484 = t476 - t715;
	t485 = t323 - t331;
	t486 = t321 * t440;
	t487 = DF * t321*t376;
	t505 = t320 * t463;
	t506 = DF * t320*t404;
	t488 = t486 + t487 - t505 - t506;
	t489 = t321 * t463;
	t490 = DF * t320*t376;
	t491 = DF * t321*t404;
	t492 = t320 * t440;
	t493 = t489 + t490 + t491 + t492;
	t494 = t320 * t376;
	t495 = t321 * t404;
	t496 = t494 + t495;
	t497 = t321 * t376;
	t501 = t320 * t404;
	t498 = t497 - t501;
	t499 = t201 * t498;
	t500 = t323 - t331;
	t502 = t323 - t331;
	t503 = t323 - t331;
	t504 = t323 - t331;
	t507 = t109 * t488;
	t508 = t108 * t201*t493;
	t509 = t323 - t331;
	t510 = DF * t321*t440;
	t520 = DF * t320*t463;
	t511 = t510 - t520;
	t512 = t202 * t426;
	t513 = t486 - t505;
	t519 = t201 * t513;
	t514 = t512 - t519;
	t515 = DF * t320*t440;
	t516 = t489 + t492;
	t517 = DF * t321*t463;
	t518 = t515 + t517;
	t521 = t109 * t511;
	t522 = d5 * t109*t514;
	t523 = t108 * t201*t518;
	t743 = d5 * t108*t516;
	t524 = t521 + t522 + t523 - t743;
	t525 = t3 * t3;
	t526 = t19 + t22 + t23 + t26;
	t527 = t25 - t32;
	t528 = t32 - t33;
	t529 = t10 * t16*t20;
	t530 = t32 + t33;
	t531 = t13 * t46;
	t532 = t25 + t32;
	t533 = t56 * t67;
	t545 = t57 * t62*t68;
	t534 = t533 - t545;
	t535 = t63 - t69;
	t536 = t56 * t76;
	t537 = t57 * t72;
	t538 = t536 + t537;
	t539 = t57 * t79;
	t540 = t56 * t80;
	t541 = t539 + t540;
	t542 = t57 * t83;
	t543 = t63 - t69;
	t544 = t57 * t88;
	t546 = t63 - t69;
	t547 = t57 * t80;
	t548 = t77 + t78;
	t549 = t93 - t57 * t548;
	t550 = t56 * t96;
	t551 = t63 - t69;
	t552 = t56 * t99;
	t553 = t57 * t101;
	t554 = t552 + t553;
	t556 = d3 * t13*t51;
	t557 = t56 * t122;
	t558 = t109 * t117;
	t559 = t154 + t558;
	t560 = t108 * t124;
	t819 = t109 * t128;
	t561 = t560 - t819;
	t562 = t56 * t133;
	t563 = t113 - t119;
	t820 = t108 * t142;
	t564 = t173 - t820;
	t565 = t57 * t189;
	t566 = t143 - t56 * t147;
	t567 = t108 * t144;
	t568 = t109 * t115*t118;
	t569 = t113 - t119;
	t570 = t113 - t119;
	t571 = t57 * t153;
	t572 = t56 * t156;
	t573 = t572 - t57 * t157;
	t574 = t113 - t119;
	t575 = t113 - t119;
	t576 = d5 * t109*t136;
	t577 = t113 - t119;
	t578 = t113 - t119;
	t579 = t56 * t180;
	t580 = d5 * t109*t177;
	t824 = d5 * t108*t151;
	t581 = t167 + t580 - t824;
	t582 = t57 * t124;
	t583 = t185 - t109 * t177;
	t584 = t582 - t56 * t583;
	t585 = t108 * t177;
	t586 = t184 + t585;
	t587 = d5 * t108*t153;
	t774 = d5 * t108*t189;
	t775 = d5 * t109*t153;
	t588 = t196 + t197 - t774 - t775;
	t589 = t113 - t119;
	t590 = t108 * t153;
	t591 = t56 * (t590 - t109 * t189);
	t592 = t108 * t189;
	t593 = t109 * t153;
	t594 = t592 + t593;
	t595 = t199 + t200;
	t596 = t57 * t166;
	t597 = t57 * t222;
	t598 = t56 * t219;
	t599 = t597 + t598;
	t600 = t109 * t215;
	t825 = t108 * t205*t207;
	t601 = t600 - t825;
	t603 = t57 * t232;
	t604 = t206 - t208;
	t605 = t109 * t235;
	t606 = t206 - t208;
	t607 = t109 * t245;
	t827 = t108 * t247;
	t608 = t607 - t827;
	t609 = t56 * t251;
	t611 = t56 * t259;
	t612 = t109 * t257;
	t613 = t108 * t205*(t206 - t208);
	t614 = t612 + t613;
	t615 = t206 - t208;
	t616 = t108 * t264;
	t617 = t206 - t208;
	t618 = t206 - t208;
	t619 = t108 * t274;
	t620 = t56 * t279;
	t621 = t620 - t57 * t280;
	t622 = t206 - t208;
	t623 = t108 * t288;
	t624 = t109 * t190*t202;
	t625 = t206 - t208;
	t626 = t206 - t208;
	t627 = t206 - t208;
	t628 = t206 - t208;
	t629 = t108 * t226;
	t632 = t56 * t300;
	t633 = t57 * t190*t202;
	t634 = t632 + t633;
	t635 = t108 * t295;
	t636 = d5 * t109*t227;
	t830 = t109 * t190*t201;
	t831 = d5 * t108*t298;
	t637 = t635 + t636 - t830 - t831;
	t638 = t201 * t297;
	t639 = t268 + t638;
	t640 = t57 * t639;
	t641 = t109 * t227;
	t642 = t641 - t108 * t298;
	t643 = t640 - t56 * t642;
	t644 = t109 * t298;
	t645 = t108 * t227;
	t646 = t644 + t645;
	t647 = t206 - t208;
	t657 = t202 * (t283 - t287);
	t658 = t316 - t657;
	t648 = t57 * t658;
	t649 = t206 - t208;
	t650 = t206 - t208;
	t651 = t108 * t309;
	t652 = t201 * t247;
	t653 = t202 * t264;
	t654 = t652 + t653;
	t655 = t206 - t208;
	t656 = t109 * (t308 - t312);
	t659 = t108 * t337;
	t834 = t109 * t342;
	t660 = t659 - t834;
	t661 = t56 * t344;
	t663 = t57 * t346;
	t664 = t661 + t663;
	t665 = t323 - t331;
	t666 = t323 - t331;
	t667 = t108 * t361;
	t668 = t323 - t331;
	t670 = t109 * t382;
	t671 = t201 * t384;
	t672 = t379 + t671;
	t673 = t108 * t672;
	t674 = t670 + t673;
	t675 = t201 * t376;
	t796 = t202 * t384;
	t676 = t675 - t796;
	t677 = t108 * t382;
	t678 = t108 * t388;
	t680 = t109 * t397;
	t681 = t678 + t680;
	t798 = t108 * t397;
	t682 = t389 - t798;
	t683 = t57 * t394;
	t684 = t323 - t331;
	t685 = t323 - t331;
	t686 = t323 - t331;
	t687 = t323 - t331;
	t688 = t323 - t331;
	t690 = t57 * t417;
	t693 = t690 - t56 * t422;
	t694 = t109 * t420;
	t695 = t108 * t421;
	t696 = t694 + t695;
	t697 = t323 - t331;
	t698 = t201 * (t435 + t439);
	t699 = t323 - t331;
	t700 = t323 - t331;
	t701 = t323 - t331;
	t702 = t323 - t331;
	t703 = t323 - t331;
	t704 = t323 - t331;
	t705 = t323 - t331;
	t706 = t323 - t331;
	t707 = t323 - t331;
	t708 = t323 - t331;
	t709 = t323 - t331;
	t710 = t323 - t331;
	t711 = t323 - t331;
	t712 = t201 * t350;
	t714 = t56 * t483;
	t716 = t714 - t57 * t484;
	t717 = t109 * t468;
	t718 = t108 * t470;
	t719 = d5 * t108*t475;
	t842 = d5 * t109*t472;
	t720 = t717 + t718 + t719 - t842;
	t721 = t108 * t472;
	t722 = t109 * (t474 - t481);
	t723 = t721 + t722;
	t724 = t109 * t472;
	t725 = t724 - t108 * t475;
	t726 = t56 * t725;
	t727 = t202 * t473;
	t728 = t201 * t351;
	t729 = t727 + t728;
	t730 = t57 * t729;
	t731 = t726 + t730;
	t732 = t108 * t488;
	t733 = d5 * t109*t496;
	t734 = t323 - t331;
	t735 = t320 * (t435 + t439);
	t736 = t489 + t490 + t491 + t735;
	t737 = t323 - t331;
	t738 = t108 * t496;
	t739 = t323 - t331;
	t740 = t323 - t331;
	t741 = t202 * t498;
	t742 = t323 - t331;
	t744 = t56 * t524;
	t745 = t108 * t511;
	t746 = d5 * t108*t514;
	t747 = t108 * t514;
	t748 = t321 * (t462 - t466);
	t749 = t492 + t748;
	t750 = t201 * t426;
	t751 = t202 * t513;
	t752 = t57 * (t750 + t751);
	t753 = t109 * t514;
	t754 = t25 - t33;
	t755 = t57 * t67;
	t756 = t90 + t755;
	t757 = t56 * t72;
	t758 = t757 - t57 * t76;
	t759 = t56 * t79;
	t760 = t56 * t83;
	t761 = t57 * t68*(t63 - t69);
	t762 = t63 - t69;
	t763 = t57 * t122;
	t764 = t56 * t112*t115;
	t765 = t57 * t133;
	t766 = t113 - t119;
	t767 = t109 * (t134 - t138);
	t768 = t137 + t767;
	t769 = t113 - t119;
	t770 = t57 * t156;
	t771 = t56 * t157;
	t772 = t113 - t119;
	t773 = t57 * t180;
	t776 = t57 * t219;
	t777 = t776 - t56 * t222;
	t778 = t56 * t232;
	t779 = t206 - t208;
	t780 = t57 * t259;
	t781 = t56 * t261;
	t782 = t780 + t781;
	t783 = t206 - t208;
	t784 = t206 - t208;
	t785 = t57 * t279;
	t786 = t109 * (t283 - t287);
	t787 = t206 - t208;
	t788 = t57 * t300;
	t789 = t206 - t208;
	t790 = d5 * t109*t658;
	t791 = t199 + t790;
	t792 = t57 * t344;
	t793 = t792 - t56 * t346;
	t794 = t323 - t331;
	t795 = t323 - t331;
	t797 = t57 * t674;
	t799 = t56 * t394;
	t800 = t323 - t331;
	t801 = t323 - t331;
	t802 = t323 - t331;
	t803 = t56 * t417;
	t804 = t57 * t422;
	t805 = t803 + t804;
	t806 = t323 - t331;
	t807 = t323 - t331;
	t808 = t323 - t331;
	t809 = t323 - t331;
	t810 = t323 - t331;
	t811 = t57 * t483;
	t812 = t56 * t484;
	t813 = t108 * t201*t736;
	t814 = t323 - t331;
	t815 = DF * t321*(t462 - t466);
	t816 = t515 + t815;
	t817 = t62 * (t63 - t69);
	t818 = t63 - t69;
	t821 = t109 * t118*(t113 - t119);
	t822 = t113 - t119;
	t823 = t113 - t119;
	t826 = t206 - t208;
	t828 = t206 - t208;
	t829 = t206 - t208;
	t832 = t109 * t305;
	t833 = t206 - t208;
	t835 = t323 - t331;
	t836 = t323 - t331;
	t837 = t323 - t331;
	t838 = t323 - t331;
	t839 = t323 - t331;
	t840 = t323 - t331;
	t841 = t323 - t331;
	t843 = t323 - t331;
	t844 = d5 * t109*t749;
	t845 = t113 - t119;
	t846 = t202 * t212*(t206 - t208);
	t847 = t206 - t208;
	t848 = t323 - t331;
	t849 = t323 - t331;
	t850 = t323 - t331;
	t851 = t206 - t208;
	t852 = t321 * t330*(t323 - t331);
	t853 = t323 - t331;
	t854 = t323 - t331;
	t855 = t323 - t331;
	A0[0][5] = ddq1;
	A0[0][10] = t7 + t2 * t12;
	A0[0][11] = t2 * (t6 - dq1 * dq2*t2*2.0) + t3 * (t4 + dq1 * dq2*t3*2.0);
	A0[0][12] = t2 * (ddq2 + t9) + t3 * (t8 - t5 * t35);
	A0[0][13] = -t7 + t3 * (t6 - dq1 * dq2*t2);
	A0[0][14] = t3 * (ddq2 - t9) - t2 * (t8 - t5 * t525);
	A0[0][20] = t29 + t2 * (t10*t59 - t13 * t16*t20);
	A0[0][21] = -t2 * (t13*t526 + t10 * (t27 + t28 + t34 - ddq2 * t10)) - t3 * t754;
	A0[0][22] = -t3 * t54 + t2 * (t10*t36 + t13 * t527);
	A0[0][23] = -t29 + t2 * (t13*(t27 + t28 - ddq2 * t10) - t10 * t18*t20);
	A0[0][24] = t3 * (t27 + t28 - t34 - ddq2 * t10) - t2 * (t13*t47 + t10 * t528);
	A0[0][25] = -t3 * t58 + t2 * (t10*t18*t20 + t13 * t16*t20);
	A0[0][26] = t3 * t51 - t2 * (t531 + d3 * t10*t36 - d3 * t13*t530);
	A0[0][27] = t3 * t53 + t2 * (-t10 * t46 + d3 * t13*t47 + d3 * t10*t532);
	A0[0][28] = t2 * (t10*t51 - t13 * t53 + d3 * t13*(t27 + t28 - t34 - ddq2 * t10) + d3 * t10*t54);
	A0[0][29] = t2 * (t104 - d3 * t13*t53);
	A0[0][30] = -t3 * t756 + t2 * (t82 + t10 * t534);
	A0[0][31] = -t3 * t758 - t2 * (t10*t538 - t13 * (t77 - t70 * t70));
	A0[0][32] = t2 * (t13*t101 + t10 * t541) + t3 * (t759 - t57 * t80);
	A0[0][33] = t3 * (t760 - t57 * t64*t68) - t2 * (t82 - t10 * (t89 + t542));
	A0[0][34] = -t3 * (t93 - t57 * (t78 - t87 * t87)) + t2 * (t13*t99 - t10 * (t544 + t56 * (t78 - t84 * t84)));
	A0[0][35] = t3 * (t90 + t761) + t2 * (t13*t107 - t10 * (t89 - t57 * t62*t68));
	A0[0][36] = t2 * (-t13 * t96 + d3 * t13*(t547 + t56 * (t78 + t91 * t91)) + d3 * t10*t76 + t10 * t51*t57) + t3 * t51*t56;
	A0[0][37] = t2 * (t13*t98 + d3 * t10*t72 + d3 * t13*t549 + t10 * t51*t56) - t3 * t51*t57;
	A0[0][38] = -t3 * t106 - t2 * (-t10 * (t550 + t57 * t98) + d3 * t13*t554 + d3 * t10*(t77 + t102 * t102));
	A0[0][39] = t2 * (t104 - d3 * t13*t106);
	A0[0][40] = -t3 * (t763 - t56 * t112*t115) + t2 * (t10*(t143 + t557) + t13 * t559);
	A0[0][41] = t3 * (t765 + t56 * (t134 - t123 * t123)) + t2 * (t13*t561 - t10 * (t562 - t57 * (t134 - t135 * t135)));
	A0[0][42] = t2 * (t13*t564 + t10 * (t565 + t56 * t140)) - t3 * (t57*t140 - t56 * (t114 + t116 - t120 + t131));
	A0[0][43] = -t2 * (t10*t566 + t13 * (t567 - t109 * t115*t118)) - t3 * (t764 + t57 * t147);
	A0[0][44] = -t3 * (t56*t153 - t57 * (t109*(ddq5 + t74 + t75 - t81 + t141) + t108 * (t138 - t148 * t148))) - t2 * (t10*(t571 + t56 * (t184 + t108 * (t138 - t149 * t149))) - t13 * (t185 - t109 * (t138 - t152 * t152)));
	A0[0][45] = t3 * (t770 + t771) - t2 * (t13*(t154 + t568) + t10 * t573);
	A0[0][46] = t2 * (t10*(t56*(t167 - d5 * t108*t136 + d5 * t109*(t138 + t168 * t168)) + t57 * t165) - t13 * (t176 + t576 + d5 * t108*(t138 + t171 * t171)) + d3 * t10*(t137 - t109 * (t138 + t172 * t172)) + d3 * t13*(t56*(t173 + t108 * (t138 + t174 * t174)) - t57 * t128)) - t3 * (t57*(t167 - d5 * t108*t136 + d5 * t109*(t138 + t158 * t158)) - t56 * t165);
	A0[0][47] = t2 * (t13*t581 + t10 * (t579 - t57 * t183) - d3 * t10*t586 - d3 * t13*t584) - t3 * (t773 + t56 * t183);
	A0[0][48] = -t2 * (t13*(t198 + t587 - t108 * t193 - d5 * t109*t189) - d3 * t13*(t591 + t57 * (t134 + t194 * t194)) + d3 * t10*t594 + t10 * t56*t588) + t3 * t57*(t196 + t197 - d5 * t109*(t125 + t126 - t127 - t129) - d5 * t108*t189);
	A0[0][49] = -t2 * (t13*(t315 - d5 * t108*t193) - d3 * t10*(t196 + t197) + t10 * t56*t595 + d3 * t13*(t596 - t56 * (t198 - t108 * t193))) + t3 * t57*t595;
	A0[0][50] = -t3 * t777 + t2 * (t10*t599 + t13 * t601);
	A0[0][51] = t3 * (t778 + t57 * (t238 - t109 * (t236 - t228 * t228))) + t2 * (t10*(t603 - t56 * (t238 - t109 * (t236 - t237 * t237))) - t13 * (t605 + t108 * (t236 - t239 * t239)));
	A0[0][52] = t2 * (t13*t608 + t10 * (t609 - t57 * t253)) - t3 * (t57*t251 + t56 * t253);
	A0[0][53] = -t3 * t782 + t2 * (t13*t614 + t10 * (t611 - t57 * t261));
	A0[0][54] = t2 * (t13*(t616 - t109 * (t202*(ddq6 + t125 + t126 - t129 + t248) + t201 * (t240 - t262 * t262))) - t10 * (t56*(t270 + t108 * (t268 + t201 * (t240 - t263 * t263))) - t57 * (t272 - t202 * (t240 - t265 * t265)))) + t3 * (t57*(t270 + t108 * (t268 + t201 * (t240 - t269 * t269))) + t56 * (t272 - t202 * (t240 - t271 * t271)));
	A0[0][55] = t2 * (t10*t621 - t13 * (t619 - t109 * t273)) - t3 * (t785 + t56 * t280);
	A0[0][56] = -t2 * (-t10 * (t56*(t284 + t285 + d5 * t109*(t281 + t201 * (t240 + t286 * t286)) - t108 * t190*t202) + t57 * t190*t201) + t13 * (t623 + t624 + d5 * t108*(t281 + t201 * (t240 + t289 * t289)) - d5 * t109*t226) + d3 * t10*(t629 + t109 * (t281 + t201 * (t240 + t290 * t290))) + d3 * t13*(t57*(t244 - t202 * (t240 + t291 * t291)) - t56 * (t108*(t281 + t201 * (t240 + t292 * t292)) - t109 * t226))) - t3 * (t57*(t284 + t285 + d5 * t109*(t281 + t201 * (t240 + t282 * t282)) - t108 * t190*t202) - t56 * t190*t201);
	A0[0][57] = -t2 * (t10*t634 - t13 * t637 + d3 * t10*t646 - d3 * t13*t643) + t3 * (t788 - t56 * t202*(t162 - t195));
	A0[0][58] = -t3 * (t56*(t317 - t201 * t295) - t57 * (t306 + t310 + d5 * t108*(t236 + t302 * t302))) - t2 * (t13*(t832 - d5 * t108*t309 + d5 * t109*(t236 + t311 * t311)) - t10 * (t648 - t56 * (t306 + t310 + d5 * t108*(t236 + t307 * t307))) - d3 * t10*(t656 + t108 * (t236 + t314 * t314)) + d3 * t13*(t56*(t651 - t109 * (t236 + t313 * t313)) - t57 * t654));
	A0[0][59] = -t2 * (t13*(t315 - d5 * t108*t318) - d3 * t10*(t196 + t109 * t318) + t10 * t56*(t199 + t319) + d3 * t13*(t57*t305 - t56 * (t198 - t108 * t318))) + t3 * t57*(t199 + t319);
	A0[0][60] = -t3 * t793 - t2 * (t13*t660 - t10 * t664);
	A0[0][61] = -t2 * (t13*(t667 + t109 * (t363 - t202 * (t358 - t368 * t368))) - t10 * (t56*(t362 - t108 * (t363 - t202 * (t358 - t364 * t364))) - t57 * (t365 + t201 * (t358 - t366 * t366)))) - t3 * (t57*(t362 - t108 * (t363 - t202 * (t358 - t352 * t352))) + t56 * (t365 + t201 * (t358 - t359 * t359)));
	A0[0][62] = t2 * (t10*(t56*(t109*(t377 - t320 * (t358 - t370)) + t108 * t381) + t57 * (t202*t374 - t201 * t376)) - t13 * (t677 - t109 * t381)) - t3 * (t797 + t56 * t676);
	A0[0][63] = t3 * (t799 + t57 * (t389 - t108 * (t201*(t386 + t413) - t202 * t324*t329))) + t2 * (t13*t681 + t10 * (t683 - t56 * t682));
	A0[0][64] = t3 * (t56*(t410 - t202 * (t402 + t320 * (t370 - t409 * t409))) + t57 * (t108*(t408 + t201 * (t402 + t320 * (t370 - t412 * t412))) - t109 * (t405 - t321 * (t370 - t411 * t411)))) + t2 * (t10*(t57*(t410 - t202 * (t402 + t320 * (t370 - t403 * t403))) - t56 * (t108*(t408 + t201 * (t402 + t320 * (t370 - t401 * t401))) - t109 * (t405 - t321 * (t370 - t398 * t398)))) - t13 * (t109*(t408 + t201 * (t402 + t320 * (t370 - t407 * t407))) + t108 * (t405 - t321 * (t370 - t406 * t406))));
	A0[0][65] = -t3 * t805 - t2 * (t10*t693 - t13 * t696);
	A0[0][66] = t2 * (t10*(t57*(t698 - t202 * (t430 + t431 - DF * t321*(t370 + t448 * t448))) - t56 * (t108*(t443 + t201 * (t430 + t431 - DF * t321*(t370 + t449 * t449))) + t109 * (t444 - t320 * t426 + DF * t320*(t370 + t450 * t450)) - d5 * t108*(t372 - t321 * (t370 + t451 * t451)) - d5 * t109*(t201*(t377 + t320 * (t370 + t452 * t452)) - t202 * t350))) - t13 * (t109*(t443 + t201 * (t430 + t431 - DF * t321*(t370 + t441 * t441))) - t108 * (t444 - t320 * t426 + DF * t320*(t370 + t445 * t445)) - d5 * t109*(t372 - t321 * (t370 + t446 * t446)) + d5 * t108*(t201*(t377 + t320 * (t370 + t447 * t447)) - t202 * t350)) + d3 * t13*(t57*(t712 + t202 * (t377 + t320 * (t370 + t457 * t457))) - t56 * (t109*(t372 - t321 * (t370 + t455 * t455)) - t108 * (t201*(t377 + t320 * (t370 + t456 * t456)) - t202 * t350))) - d3 * t10*(t108*(t372 - t321 * (t370 + t453 * t453)) + t109 * (t201*(t377 + t320 * (t370 + t454 * t454)) - t202 * t350))) + t3 * (t56*(t201*t440 - t202 * (t430 + t431 - DF * t321*(t370 + t432 * t432))) + t57 * (t108*(t443 + t201 * (t430 + t431 - DF * t321*(t370 + t423 * t423))) + t109 * (t444 - t320 * t426 + DF * t320*(t370 + t427 * t427)) - d5 * t108*(t372 - t321 * (t370 + t428 * t428)) - d5 * t109*(t201*(t377 + t320 * (t370 + t429 * t429)) - t202 * t350)));
	A0[0][67] = t2 * (-t10 * t716 + t13 * t720 + d3 * t10*t723 + d3 * t13*t731) + t3 * (t811 + t812);
	A0[0][68] = -t3 * (t57*(t507 + t508 - d5 * t109*(t499 - t202 * (t358 + t509 * t509)) - d5 * t108*t496) - t56 * t202*t493) + t2 * (t10*(t56*(t507 + t508 - d5 * t109*(t499 - t202 * (t358 + t500 * t500)) - d5 * t108*t496) + t57 * t202*t493) - t13 * (t732 + t733 - d5 * t108*(t499 - t202 * (t358 + t485 * t485)) - t109 * t201*t493) + d3 * t10*(t738 + t109 * (t499 - t202 * (t358 + t504 * t504))) - d3 * t13*(t57*(t741 + t201 * (t358 + t503 * t503)) + t56 * (t108*(t499 - t202 * (t358 + t502 * t502)) - t109 * t496)));
	A0[0][69] = -t3 * (t57*t524 - t56 * t202*t518) - t2 * (-t10 * (t744 + t57 * t202*t518) + t13 * (t745 + t746 + d5 * t109*t516 - t109 * t201*t518) + d3 * t10*(t753 - t108 * t516) + d3 * t13*(t752 - t56 * (t747 + t109 * t516)));
	A0[1][10] = -t9;
	A0[1][11] = t5 * t35 - t5 * t525;
	A0[1][12] = t4;
	A0[1][13] = t9;
	A0[1][14] = t6;
	A0[1][15] = ddq2;
	A0[1][16] = t44;
	A0[1][17] = -t38;
	A0[1][20] = t529 + t13 * t59;
	A0[1][21] = t10 * t526 - t13 * (t27 + t28 + t34 - t85);
	A0[1][22] = t13 * t36 - t10 * t527;
	A0[1][23] = -t10 * (t27 + t28 - t85) - t13 * t18*t20;
	A0[1][24] = t10 * t47 - t13 * t528;
	A0[1][25] = -t529 + t13 * t18*t20;
	A0[1][26] = t10 * t46 - d3 * t13*t36 - d3 * t10*t530;
	A0[1][27] = -t531 - d3 * t10*t47 + d3 * t13*t532;
	A0[1][28] = t10 * t53 + t13 * t51 - d3 * t10*(t27 + t28 - t34 - t85) + d3 * t13*t54;
	A0[1][29] = t556 + d3 * t10*t53;
	A0[1][30] = t13 * t534 - t10 * t62*t64;
	A0[1][31] = -t13 * t538 - t10 * (t77 - t535 * t535);
	A0[1][32] = -t10 * t101 + t13 * t541;
	A0[1][33] = t13 * (t542 + t56 * t68*(t63 - t69)) + t10 * t62*(t63 - t69);
	A0[1][34] = -t10 * t99 - t13 * (t544 + t56 * (t78 - t543 * t543));
	A0[1][35] = -t10 * t107 - t13 * (t89 - t545);
	A0[1][36] = t10 * t96 - d3 * t10*(t547 + t56 * (t78 + t546 * t546)) + d3 * t13*t76 + t13 * t51*t57;
	A0[1][37] = -t10 * t98 + d3 * t13*t72 - d3 * t10*t549 + t13 * t51*t56;
	A0[1][38] = t13 * (t550 + t57 * (t97 - t103)) + d3 * t10*t554 - d3 * t13*(t77 + t551 * t551);
	A0[1][39] = t556 + d3 * t10*t106;
	A0[1][40] = -t10 * t559 + t13 * (t557 + t57 * t112*(t113 - t119));
	A0[1][41] = -t10 * t561 - t13 * (t562 - t57 * (t134 - t563 * t563));
	A0[1][42] = -t10 * t564 + t13 * (t565 + t56 * t768);
	A0[1][43] = -t13 * t566 + t10 * (t567 - t568);
	A0[1][44] = -t13 * (t571 + t56 * (t184 + t108 * (t138 - t570 * t570))) - t10 * (t185 - t109 * (t138 - t569 * t569));
	A0[1][45] = t10 * (t154 + t821) - t13 * t573;
	A0[1][46] = t13 * (t56*(t167 - d5 * t108*t136 + d5 * t109*(t138 + t574 * t574)) + t57 * t190) + t10 * (t176 + t576 + d5 * t108*(t138 + t575 * t575)) + d3 * t13*(t137 - t109 * (t138 + t578 * t578)) - d3 * t10*(t56*(t173 + t108 * (t138 + t577 * t577)) - t57 * t128);
	A0[1][47] = -t10 * t581 + t13 * (t579 - t57 * t193) + d3 * t10*t584 - d3 * t13*t586;
	A0[1][48] = t10 * (t198 + t587 - t108 * t193 - d5 * t109*t189) - d3 * t10*(t591 + t57 * (t134 + t589 * t589)) - d3 * t13*t594 - t13 * t56*t588;
	A0[1][49] = t10 * (t315 - d5 * t108*t193) + d3 * t13*(t196 + t197) - t13 * t56*t595 + d3 * t10*(t596 - t56 * (t198 - t108 * t193));
	A0[1][50] = -t10 * t601 + t13 * t599;
	A0[1][51] = t13 * (t603 - t56 * (t238 - t109 * (t236 - t604 * t604))) + t10 * (t605 + t108 * (t236 - t606 * t606));
	A0[1][52] = t13 * (t609 - t57 * (t252 - t281)) - t10 * t608;
	A0[1][53] = -t10 * t614 + t13 * (t611 - t57 * t261);
	A0[1][54] = -t10 * (t616 - t109 * (t268 + t201 * (t240 - t615 * t615))) - t13 * (t56*(t270 + t108 * (t268 + t201 * (t240 - t617 * t617))) - t57 * (t272 - t202 * (t240 - t618 * t618)));
	A0[1][55] = t13 * t621 + t10 * (t619 - t109 * t273);
	A0[1][56] = t10 * (t623 + t624 + d5 * t108*(t281 + t201 * (t240 + t625 * t625)) - d5 * t109*t226) + t13 * (t56*(t285 + t786 + d5 * t109*(t281 + t201 * (t240 + t622 * t622)) - t108 * t190*t202) + t57 * t201*(t162 - t195)) - d3 * t13*(t629 + t109 * (t281 + t201 * (t240 + t628 * t628))) + d3 * t10*(t57*(t244 - t202 * (t240 + t626 * t626)) - t56 * (t108*(t281 + t201 * (t240 + t627 * t627)) - t109 * t226));
	A0[1][57] = -t10 * t637 - t13 * t634 - d3 * t10*t643 - d3 * t13*t646;
	A0[1][58] = t13 * (t648 - t56 * (t306 + t310 + d5 * t108*(t236 + t647 * t647))) + t10 * (t109*(t303 + t304) - d5 * t108*t309 + d5 * t109*(t236 + t649 * t649)) + d3 * t13*(t656 + t108 * (t236 + t655 * t655)) + d3 * t10*(t56*(t651 - t109 * (t236 + t650 * t650)) - t57 * t654);
	A0[1][59] = t10 * (t315 - d5 * t108*(t316 - t657)) + d3 * t13*(t196 + t109 * t658) + d3 * t10*(t57*(t303 + t304) - t56 * (t198 - t108 * t658)) - t13 * t56*t791;
	A0[1][60] = t10 * t660 + t13 * t664;
	A0[1][61] = t10 * (t667 + t109 * (t363 - t202 * (t358 - t668 * t668))) + t13 * (t56*(t362 - t108 * (t363 - t202 * (t358 - t665 * t665))) - t57 * (t365 + t201 * (t358 - t666 * t666)));
	A0[1][62] = t13 * (t56*t674 - t57 * t676) + t10 * (t677 - t109 * t672);
	A0[1][63] = -t10 * t681 + t13 * (t683 - t56 * t682);
	A0[1][64] = t13 * (t57*(t410 - t202 * (t402 + t320 * (t370 - t686 * t686))) - t56 * (t108*(t408 + t201 * (t402 + t320 * (t370 - t685 * t685))) - t109 * (t405 - t321 * (t370 - t684 * t684)))) + t10 * (t109*(t408 + t201 * (t402 + t320 * (t370 - t688 * t688))) + t108 * (t405 - t321 * (t370 - t687 * t687)));
	A0[1][65] = -t10 * t696 - t13 * t693;
	A0[1][66] = -t13 * (t56*(t109*(t444 - t464 + DF * t320*(t370 + t700 * t700)) + t108 * (t443 + t201 * (t430 + t431 - DF * t321*(t370 + t699 * t699))) - d5 * t108*(t372 - t321 * (t370 + t701 * t701)) - d5 * t109*(t201*(t377 + t320 * (t370 + t702 * t702)) - t202 * t350)) - t57 * (t698 - t202 * (t430 + t431 - DF * t321*(t370 + t697 * t697)))) - t10 * (t108*(t444 - t464 + DF * t320*(t370 + t704 * t704)) - t109 * (t443 + t201 * (t430 + t431 - DF * t321*(t370 + t703 * t703))) + d5 * t109*(t372 - t321 * (t370 + t705 * t705)) - d5 * t108*(t201*(t377 + t320 * (t370 + t706 * t706)) - t202 * t350)) - d3 * t10*(t57*(t712 + t202 * (t377 + t320 * (t370 + t711 * t711))) - t56 * (t109*(t372 - t321 * (t370 + t709 * t709)) - t108 * (t201*(t377 + t320 * (t370 + t710 * t710)) - t202 * t350))) - d3 * t13*(t108*(t372 - t321 * (t370 + t707 * t707)) + t109 * (t201*(t377 + t320 * (t370 + t708 * t708)) - t202 * t350));
	A0[1][67] = -t13 * t716 - t10 * t720 + d3 * t13*t723 - d3 * t10*t731;
	A0[1][68] = t13 * (t56*(t507 + t813 - d5 * t109*(t499 - t202 * (t358 + t737 * t737)) - d5 * t108*t496) + t57 * t202*t736) + t10 * (t732 + t733 - d5 * t108*(t499 - t202 * (t358 + t734 * t734)) - t109 * t201*t736) + d3 * t13*(t738 + t109 * (t499 - t202 * (t358 + t739 * t739))) + d3 * t10*(t57*(t741 + t201 * (t358 + t742 * t742)) + t56 * (t108*(t499 - t202 * (t358 + t740 * t740)) - t109 * t496));
	A0[1][69] = t10 * (t745 + t746 + t844 - t109 * t201*(t515 - DF * t321*(t466 - t321 * (t162 - t195 + t433 - DF * t212*(t206 - t208))))) + t13 * (t744 + t57 * t202*t816) - d3 * t13*(t753 - t108 * t749) + d3 * t10*(t752 - t56 * (t747 + t109 * t749));
	A0[2][20] = -t30;
	A0[2][21] = t754;
	A0[2][22] = t54;
	A0[2][23] = t30;
	A0[2][24] = -t27 - t28 + t34 + t85;
	A0[2][25] = t58;
	A0[2][26] = -t49 - t50;
	A0[2][27] = -t52 + t55;
	A0[2][30] = t756;
	A0[2][31] = t758;
	A0[2][32] = t547 - t759;
	A0[2][33] = -t760 + t761;
	A0[2][34] = t56 * (ddq4 + t27 + t28 - t85 + t817) - t57 * (t78 - t762 * t762);
	A0[2][35] = -t90 - t57 * t64*t68;
	A0[2][36] = -t51 * t56;
	A0[2][37] = t51 * t57;
	A0[2][38] = t106;
	A0[2][40] = t763 - t764;
	A0[2][41] = -t765 - t56 * (t134 - t766 * t766);
	A0[2][42] = -t56 * t189 + t57 * t768;
	A0[2][43] = t57 * (t145 + t108 * t118*(t113 - t119)) + t56 * t112*(t113 - t119);
	A0[2][44] = -t57 * (t184 + t108 * (t138 - t769 * t769)) + t56 * (t125 + t126 - t127 - t129);
	A0[2][45] = -t770 - t771;
	A0[2][46] = t57 * (t167 - d5 * t108*t136 + d5 * t109*(t138 + t772 * t772)) - t56 * t190;
	A0[2][47] = t773 + t56 * t193;
	A0[2][48] = -t57 * t588;
	A0[2][49] = -t57 * t595;
	A0[2][50] = t777;
	A0[2][51] = -t778 - t57 * (t238 - t109 * (t236 - t779 * t779));
	A0[2][52] = t57 * (t249 + t250) + t56 * (t252 - t281);
	A0[2][53] = t782;
	A0[2][54] = -t57 * (t270 + t108 * (t268 + t201 * (t240 - t783 * t783))) - t56 * (t272 - t202 * (t240 - t784 * t784));
	A0[2][55] = t785 + t56 * (t221 + t846);
	A0[2][56] = t57 * (t285 + t786 + d5 * t109*(t281 + t201 * (t240 + t787 * t787)) - t108 * t190*t202) - t56 * t190*t201;
	A0[2][57] = -t788 + t56 * t202*(t162 - t195);
	A0[2][58] = -t56 * t658 - t57 * (t306 + t310 + d5 * t108*(t236 + t789 * t789));
	A0[2][59] = -t57 * t791;
	A0[2][60] = t793;
	A0[2][61] = t57 * (t362 - t108 * (t363 - t202 * (t358 - t794 * t794))) + t56 * (t365 + t201 * (t358 - t795 * t795));
	A0[2][62] = t797 + t56 * (t675 - t796);
	A0[2][63] = -t799 - t57 * t682;
	A0[2][64] = -t56 * (t410 - t202 * (t402 + t320 * (t370 - t800 * t800))) - t57 * (t108*(t408 + t201 * (t402 + t320 * (t370 - t802 * t802))) - t109 * (t405 - t321 * (t370 - t801 * t801)));
	A0[2][65] = t805;
	A0[2][66] = -t57 * (t109*(t444 - t464 + DF * t320*(t370 + t807 * t807)) + t108 * (t443 + t201 * (t430 + t431 - DF * t321*(t370 + t806 * t806))) - d5 * t108*(t372 - t321 * (t370 + t808 * t808)) - d5 * t109*(t201*(t377 + t320 * (t370 + t809 * t809)) - t202 * t350)) - t56 * (t698 - t202 * (t430 + t431 - DF * t321*(t370 + t810 * t810)));
	A0[2][67] = -t811 - t812;
	A0[2][68] = t57 * (t507 + t813 - d5 * t109*(t499 - t202 * (t358 + t814 * t814)) - d5 * t108*t496) - t56 * t202*t736;
	A0[2][69] = t57 * (t521 + t522 - d5 * t108*(t492 - t321 * (t466 - t321 * (t162 - t195 + t433 - DF * t212*(t206 - t208)))) + t108 * t201*t816) - t56 * t202*t816;
	A0[3][30] = t817;
	A0[3][31] = t77 - t818 * t818;
	A0[3][32] = t101;
	A0[3][33] = -t86;
	A0[3][34] = t99;
	A0[3][35] = t107;
	A0[3][36] = -t94 - t95;
	A0[3][37] = t98;
	A0[3][40] = t559;
	A0[3][41] = t561;
	A0[3][42] = t564;
	A0[3][43] = -t567 + t821;
	A0[3][44] = t185 - t109 * (t138 - t822 * t822);
	A0[3][45] = -t154 - t568;
	A0[3][46] = -t576 - t108 * t166 - d5 * t108*(t138 + t823 * t823);
	A0[3][47] = t580 - t824 + t109 * (t94 + t95 - t169 - t170);
	A0[3][48] = -t198 - t587 + t108 * t193 + d5 * t109*t189;
	A0[3][49] = -t315 + d5 * t108*t193;
	A0[3][50] = t601;
	A0[3][51] = -t605 - t108 * (t236 - t826 * t826);
	A0[3][52] = -t827 + t109 * (t242 + t244);
	A0[3][53] = t614;
	A0[3][54] = t616 - t109 * (t268 + t201 * (t240 - t828 * t828));
	A0[3][55] = -t619 + t109 * t273;
	A0[3][56] = -t623 - t624 - d5 * t108*(t281 + t201 * (t240 + t829 * t829)) + d5 * t109*t226;
	A0[3][57] = t636 - t830 - t831 + t108 * (t293 + t294);
	A0[3][58] = -t832 + d5 * t108*(t308 - t312) - d5 * t109*(t236 + t833 * t833);
	A0[3][59] = -t315 + d5 * t108*(t316 - t657);
	A0[3][60] = -t659 + t834;
	A0[3][61] = -t667 - t109 * (t363 - t202 * (t358 - t835 * t835));
	A0[3][62] = -t677 + t109 * t672;
	A0[3][63] = t681;
	A0[3][64] = -t109 * (t408 + t201 * (t402 + t320 * (t370 - t837 * t837))) - t108 * (t405 - t321 * (t370 - t836 * t836));
	A0[3][65] = t694 + t108 * (t336 + t852);
	A0[3][66] = t108 * (t444 - t464 + DF * t320*(t370 + t839 * t839)) - t109 * (t443 + t201 * (t430 + t431 - DF * t321*(t370 + t838 * t838))) + d5 * t109*(t372 - t321 * (t370 + t840 * t840)) - d5 * t108*(t201*(t377 + t320 * (t370 + t841 * t841)) - t202 * t350);
	A0[3][67] = t717 - t842 + t108 * (t430 + t469 - t477) + d5 * t108*(t474 - t481);
	A0[3][68] = -t732 - t733 + d5 * t108*(t499 - t202 * (t358 + t843 * t843)) + t109 * t201*t736;
	A0[3][69] = -t745 - t746 - t844 + t109 * t201*(t515 - DF * t321*(t466 - t321 * (t162 - t195 + t433 - DF * t212*(t206 - t208))));
	A0[4][40] = t150;
	A0[4][41] = t134 - t845 * t845;
	A0[4][42] = t189;
	A0[4][43] = -t141;
	A0[4][44] = -t125 - t126 + t127 + t129;
	A0[4][45] = t157;
	A0[4][46] = -t195 + t108 * (t49 + t50 + t160 - t175);
	A0[4][47] = -t181 - t191;
	A0[4][50] = t222;
	A0[4][51] = t232;
	A0[4][52] = -t252 + t281;
	A0[4][53] = -t260 + t846;
	A0[4][54] = t272 - t202 * (t240 - t847 * t847);
	A0[4][55] = -t221 - t275;
	A0[4][56] = t201 * (t162 - t195);
	A0[4][57] = -t190 * t202;
	A0[4][58] = -t317 + t201 * (t293 + t294);
	A0[4][60] = t346;
	A0[4][61] = -t365 - t201 * (t358 - t848 * t848);
	A0[4][62] = -t675 + t796;
	A0[4][63] = t394;
	A0[4][64] = t410 - t202 * (t402 + t320 * (t370 - t849 * t849));
	A0[4][65] = -t416 + t689;
	A0[4][66] = t698 - t202 * (t430 + t431 - DF * t321*(t370 + t850 * t850));
	A0[4][67] = t476 + t201 * (t466 - t321 * (t162 - t195 + t433 - DF * t212*(t206 - t208)));
	A0[4][68] = t202 * t736;
	A0[4][69] = t202 * (t515 - DF * t321*(t466 - t321 * (t162 - t195 + t433 - DF * t212*(t206 - t208))));
	A0[5][50] = t266;
	A0[5][51] = t236 - t851 * t851;
	A0[5][52] = t247;
	A0[5][53] = -t248;
	A0[5][54] = -t223 - t224 + t225 + t231;
	A0[5][55] = t274;
	A0[5][56] = -t287 + t201 * (t94 + t95 - t169 - t170);
	A0[5][57] = -t293 - t294;
	A0[5][60] = t337;
	A0[5][61] = t361;
	A0[5][62] = t382;
	A0[5][63] = -t387 + t852;
	A0[5][64] = t405 - t321 * (t370 - t853 * t853);
	A0[5][65] = -t336 - t395;
	A0[5][66] = -t444 + t320 * (t283 - t287 + t424 + t425) - DF * t320*(t370 + t854 * t854);
	A0[5][67] = -t430 - t469 + t477;
	A0[5][68] = t487 - t506 + t321 * (t435 + t439) + t320 * (t466 - t321 * (t162 - t195 + t433 - DF * t212*(t206 - t208)));
	A0[5][69] = DF * t321*(t435 + t439) + DF * t320*(t466 - t321 * (t162 - t195 + t433 - DF * t212*(t206 - t208)));
	A0[6][60] = t399;
	A0[6][61] = t358 - t855 * t855;
	A0[6][62] = t376;
	A0[6][63] = -t371;
	A0[6][64] = -t347 + t348 - t349 + t353;
	A0[6][65] = t414;
	A0[6][66] = -t435 - t439;
	A0[6][67] = -t466 + t321 * (t162 - t195 + t433 - DF * t212*(t206 - t208));


	for (int i = 0; i < 7; i++)
		for (int j = 0; j < JointGroupDim; j++)
			distalVec[(JointGroupDim)* i + j] = A0[i][j];

}

//inline int id(int m, int n, int cols) { return m * cols + n;}




void sevenjointdynamics::SevenRLS(const double *positionL, const double *sensorL, double *estParas, double *Coef, double *CoefInv, double *StatisError)
{
	//positionList[id(2, 2, 6)];
	double stateMot0[7][3] = { 0 };
	double stateMot1[7][3] = { 0 };
	double stateTor0[7][3] = { 0 };
	double stateTor1[7][3] = { 0 };



	double q[7];
	double dq[7];
	double ddq[7];
	double ts[7];
	//std::array<double, 6> estParas;

	double intDT = 8 * DT;
	int length = 7;
	std::vector<double> regressorMatrix_vec(7 * SampleNum * JointGroupDim);
	double* regressorVector = regressorMatrix_vec.data();

	std::vector<double> regressorMatrixFric_vec(7 * SampleNum * (2 * 7));
	double* regressorVectorFric = regressorMatrixFric_vec.data();

	std::vector<double> regressorForces_vec(7 * SampleNum);
	double* regressorForces = regressorForces_vec.data();

	double posCur[7];
	double torCur[7];
	for (int j = 0; j < 7; j++)
	{
		stateMot0[j][0] = positionL[j];
		stateTor0[j][0] = sensorL[j];
	}

	for (int i = 0; i < SampleNum; i++)
	{

		for (int j = 0; j < 7; j++)
		{

			posCur[j] = positionL[RobotAxis*i + j];
			torCur[j] = sensorL[RobotAxis*i + j];

			stateMot1[j][0] = stateMot0[j][0] + intDT * (A[0][0] * stateMot0[j][0] + A[0][1] * stateMot0[j][1] + A[0][2] * stateMot0[j][2] + B[0] * posCur[j]);
			stateMot1[j][1] = stateMot0[j][1] + intDT * (A[1][0] * stateMot0[j][0] + A[1][1] * stateMot0[j][1] + A[1][2] * stateMot0[j][2] + B[1] * posCur[j]);
			stateMot1[j][2] = stateMot0[j][2] + intDT * (A[2][0] * stateMot0[j][0] + A[2][1] * stateMot0[j][1] + A[2][2] * stateMot0[j][2] + B[2] * posCur[j]);

			stateTor1[j][0] = stateTor0[j][0] + intDT * (A[0][0] * stateTor0[j][0] + A[0][1] * stateTor0[j][1] + A[0][2] * stateTor0[j][2] + B[0] * torCur[j]);
			stateTor1[j][1] = stateTor0[j][1] + intDT * (A[1][0] * stateTor0[j][0] + A[1][1] * stateTor0[j][1] + A[1][2] * stateTor0[j][2] + B[1] * torCur[j]);
			stateTor1[j][2] = stateTor0[j][2] + intDT * (A[2][0] * stateTor0[j][0] + A[2][1] * stateTor0[j][1] + A[2][2] * stateTor0[j][2] + B[2] * torCur[j]);
		}

		for (int j = 0; j < 7; j++)
		{
			q[j] = stateMot1[j][0];
			dq[j] = stateMot1[j][1];
			ddq[j] = stateMot1[j][2];
			ts[j] = stateTor1[j][0];
		}

		for (int k = 0; k < 7; k++)
		{
			q[k] = q[k] * DirectionFlag[k] + JointOffset[k] + ZeroOffset[k];
			dq[k] = dq[k] * DirectionFlag[k];
			ddq[k] = ddq[k] * DirectionFlag[k];

		}
		double distalVec[7 * JointGroupDim];
		SevenJointMatrix(q, dq, ddq, ts, distalVec);
		double Y[7][JointGroupDim];
		for (int m = 0; m < 7; m++)
			for (int n = 0; n < JointGroupDim; n++)
				Y[m][n] = distalVec[JointGroupDim * m + n];

		double Y1[7][2 * 7];
		for (int m = 0; m < 7; m++)
		{
			for (int n = 0; n < 2 * 7; n++)
			{
				Y1[m][n] = 0;
				if (n == 2 * m)
					Y1[m][n] = 1 * SevenSign(dq[m]);
				if (n == 2 * m + 1)
					Y1[m][n] = dq[m];
			}
		}



		for (int m = 0; m < 7; m++)
		{
			for (int n = 0; n < JointGroupDim; n++)
			{
				regressorVector[(i * 7 + m)*JointGroupDim + n] = Y[m][n];

			}

			for (int n = 0; n < 2 * 7; n++)
			{
				regressorVectorFric[(i * 7 + m) * 2 * 7 + n] = Y1[m][n];

			}


			regressorForces[i * 7 + m] = ts[m];

		}

		for (int j = 0; j < 7; j++)
		{

			stateMot0[j][0] = stateMot1[j][0];
			stateMot0[j][1] = stateMot1[j][1];
			stateMot0[j][2] = stateMot1[j][2];

			stateTor0[j][0] = stateTor1[j][0];
			stateTor0[j][1] = stateTor1[j][1];
			stateTor0[j][2] = stateTor1[j][2];
		}
		std::cout << i << std::endl;
	}

	// 所需的中间变量，请对U的对角线元素做处理
	std::vector<double> U_vec(7 * SampleNum * JointGroupDim);
	auto U = U_vec.data();

	std::vector<double> tau_vec(7 * SampleNum);
	auto tau = tau_vec.data();

	std::vector<aris::Size> p_vec(7 * SampleNum);
	auto p = p_vec.data();

	aris::Size rank;

	// 根据 A 求出中间变量，相当于做 QR 分解 //
   // 请对 U 的对角线元素做处理
	s_householder_utp(7 * SampleNum, JointGroupDim, regressorVector, U, tau, p, rank, 1e-10);

	std::vector<double> TestQ_vec(7 * SampleNum * JointGroupDim);
	auto TestQ = TestQ_vec.data();

	std::vector<double> TestR_vec(7 * SampleNum * JointGroupDim);
	auto TestR = TestR_vec.data();

	s_householder_ut2qmn(7 * SampleNum, JointGroupDim, U, tau, TestQ);
	s_householder_ut2r(7 * SampleNum, JointGroupDim, U, tau, TestR);
	s_permutate_inv(JointGroupDim, 7 * SampleNum, p, TestR, T(JointGroupDim));

	//Test QR
	//s_permutate(TotalParas, 3 * SampleNum, p, TestR, T(TotalParas));
	//s_mm(3 * SampleNum, TotalParas, 3 * SampleNum, TestQ, TestR, UU);
	//s_householder_ut2r(k, n, U, tau, R);
	//s_householder_ut2qmn(m, k, U, tau, q);
	//for (int i = 0;i < 3 * SampleNum*TotalParas;i++)
		//dU[i]= regressorVector[i]-UU[i];


	std::vector<double> Q_vec(7 * SampleNum * JointReduceDim);
	auto Q = Q_vec.data();
	std::vector<double> R_vec(JointReduceDim * JointGroupDim);
	auto R = R_vec.data();
	for (int i = 0;i < 7 * SampleNum;i++)
		for (int j = 0;j < JointReduceDim;j++)
			Q[i*JointReduceDim + j] = TestQ[i * JointGroupDim + j];

	for (int i = 0;i < JointReduceDim;i++)
		for (int j = 0;j < JointGroupDim;j++)
		{
			R[i*JointGroupDim + j] = TestR[i * JointGroupDim + j];
			Coef[i*JointGroupDim + j] = TestR[i * JointGroupDim + j];
		}

	//s_mm(3 * SampleNum, TotalParas, ReduceParas, Q, R, UU);
	//for (int i = 0;i < 3 * SampleNum*TotalParas;i++)
		//dU[i]= regressorVector[i]-UU[i];



	std::vector<double> QwithFric_vec(7 * SampleNum * (JointReduceDim + 2 * 7));
	auto QwithFric = QwithFric_vec.data();
	for (int i = 0;i < 7 * SampleNum;i++)
	{
		for (int j = 0;j < JointReduceDim;j++)
			QwithFric[i*(JointReduceDim + 2 * 7) + j] = Q[i*JointReduceDim + j];
		for (int j = JointReduceDim;j < JointReduceDim + 2 * 7;j++)
			QwithFric[i*(JointReduceDim + 2 * 7) + j] = regressorVectorFric[i * 2 * 7 + j - JointReduceDim];
	}

	// 求解 A的广义逆pinv 和 x
	std::vector<double> pinv_vec(7 * SampleNum * (JointReduceDim + 2 * 7));
	auto pinv = pinv_vec.data();

	// 所需的中间变量，请对U的对角线元素做处理
	std::vector<double> UQ_vec(7 * SampleNum * (JointReduceDim + 2 * 7));
	auto UQ = UQ_vec.data();

	std::vector<double> tauQ_vec(7 * SampleNum);
	auto tauQ = tauQ_vec.data();

	std::vector<aris::Size> pQ_vec(7 * SampleNum);
	auto pQ = pQ_vec.data();

	aris::Size rankQ;

	s_householder_utp(7 * SampleNum, JointReduceDim + 2 * 7, QwithFric, UQ, tauQ, pQ, rankQ, 1e-10);

	// 根据QR分解的结果求广义逆，相当于Matlab中的 pinv(A) //
	std::vector<double> tauQ2_vec(7 * SampleNum);
	auto tauQ2 = tauQ2_vec.data();

	s_householder_utp2pinv(7 * SampleNum, JointReduceDim + 2 * 7, rankQ, UQ, tauQ, pQ, pinv, tauQ2, 1e-10);
	// 根据QR分解的结果求广义逆，相当于Matlab中的 pinv(A)*b //
	s_mm(JointReduceDim + 2 * 7, 1, 7 * SampleNum, pinv, regressorForces, estParas);


	/*
	std::ofstream outfile("C:/Users/gk/Desktop/Kaanh_gk/EstParas.txt");
	if (!outfile)
	{
		std::cout << "Unable to open otfile";
		exit(1); // terminate with error
	}

	for (int i = 0;i < 3 * SampleNum*TotalParas;i++)
		outfile << regressorVector[i] << std::endl;

	outfile.close();
	*/

	//Calculate Model Error
	std::vector<double> Error_vec(7 * SampleNum);
	auto Error = Error_vec.data();

	s_mm(7 * SampleNum, 1, JointReduceDim + 2 * 7, QwithFric, estParas, Error);
	for (int i = 0;i < 7 * SampleNum;i++)
		Error[i] = Error[i] - regressorForces[i];

	double SumError[7] = { 0 };
	for (int j = 0;j < 7;j++)
		for (int i = 0;i < SampleNum;i++)
			SumError[j] = SumError[j] + Error[i * 7 + j] * Error[i * 7 + j];

	for (int j = 0;j < 7;j++)
        StatisError[j] = sqrt(SumError[j]/ SampleNum);


	//计算CoefInv, Coef*CoefInv=EYE(30)

	std::vector<double> EYE_vec(JointGroupDim * JointGroupDim);
	auto EYE = EYE_vec.data();
	for (int i = 0;i < JointGroupDim;i++)
		for (int j = 0;j < JointGroupDim;j++)
		{
			EYE[i*JointGroupDim + j] = 0;
			if (i == j)
				EYE[i*JointGroupDim + j] = 1;
		}

	// 求解 A的广义逆pinv 和 x
	std::vector<double> pinvInv_vec(JointGroupDim * JointReduceDim);
	auto pinvInv = pinvInv_vec.data();

	// 所需的中间变量，请对U的对角线元素做处理
	std::vector<double> UInv_vec(JointGroupDim * JointReduceDim);
	auto UInv = UInv_vec.data();

	double tauInv[JointGroupDim];
	aris::Size pInv[JointGroupDim];
	aris::Size rankInv;

	s_householder_utp(JointReduceDim, JointGroupDim, Coef, UInv, tauInv, pInv, rankInv, 1e-10);

	// 根据QR分解的结果求广义逆，相当于Matlab中的 pinv(A) //
	double tau2Inv[JointGroupDim];

	s_householder_utp2pinv(JointReduceDim, JointGroupDim, rankInv, UInv, tauInv, pInv, pinvInv, tau2Inv, 1e-10);
	// 根据QR分解的结果求广义逆，相当于Matlab中的 pinv(A)*b //
	s_mm(JointGroupDim, JointReduceDim, JointGroupDim, EYE, pinvInv, CoefInv);

}



void sevenjointdynamics::SevenJointCollision(const double * q, const double *dq, const double *ddq, const double *ts, const double *estParas, double * CoefInv, double * CollisionFT)
{

	double q0[RobotAxis], dq0[RobotAxis], ddq0[RobotAxis];
	for (int k = 0; k < RobotAxis; k++)
	{
		q0[k] = q[k] * DirectionFlag[k] + JointOffset[k] + ZeroOffset[k];
		dq0[k] = dq[k] * DirectionFlag[k];
		ddq0[k] = ddq[k] * DirectionFlag[k];

	}

	double distalVec[RobotAxis * JointGroupDim];
	SevenJointMatrix(q0, dq0, ddq0, ts, distalVec);
	std::vector<double> Ybase_vec(RobotAxis * JointReduceDim);
	auto Ybase = Ybase_vec.data();
	s_mm(RobotAxis, JointReduceDim, JointGroupDim, distalVec, CoefInv, Ybase);


	double YbaseMat[RobotAxis][JointReduceDim];
	for (int m = 0; m < RobotAxis; m++)
		for (int n = 0; n < JointReduceDim; n++)
			YbaseMat[m][n] = Ybase[JointReduceDim * m + n];

	double Y1[RobotAxis][2 * RobotAxis];
	for (int m = 0; m < RobotAxis; m++)
	{
		for (int n = 0; n < 2 * RobotAxis; n++)
		{
			Y1[m][n] = 0;
			if (n == 2 * m)
				Y1[m][n] = 1 * SevenSign(dq0[m]);
			if (n == 2 * m + 1)
				Y1[m][n] = 0 * dq0[m];
		}
	}

	double YtolMat[RobotAxis][JointReduceDim + 2 * RobotAxis];

	for (int m = 0; m < RobotAxis; m++)
	{
		for (int n = 0; n < JointReduceDim; n++)
		{
			YtolMat[m][n] = YbaseMat[m][n];
		}

		for (int n = JointReduceDim; n < JointReduceDim + 2 * RobotAxis; n++)
		{
			YtolMat[m][n] = Y1[m][n - JointReduceDim];
		}
	}


	double estTor[7] = { 0 };
	for (int i = 0; i < 7; i++)
		for (int j = 0; j < JointReduceDim + 2 * 7; j++)
			estTor[i] = estTor[i] + YtolMat[i][j] * estParas[j];

	for (int i = 0; i < 7; i++)
		CollisionFT[i] = estTor[i];


}




void SevenLoadMatrix(const double* q, const double* dq, const double* ddq, const double* ts, double* distalVec)
{
	double q1, q2, q3, q4, q5, q6;
	double dq1, dq2, dq3, dq4, dq5, dq6;
	double ddq1, ddq2, ddq3, ddq4, ddq5, ddq6;
	double ts1, ts2, ts3, ts4, ts5, ts6;
	double g = 9.81;


	q1 = q[0];
	q2 = q[1];
	q3 = q[2];
	q4 = q[3];
	q5 = q[4];
	q6 = q[5];

	dq1 = dq[0]; dq2 = dq[1]; dq3 = dq[2]; dq4 = dq[3]; dq5 = dq[4]; dq6 = dq[5];
	ddq1 = ddq[0]; ddq2 = ddq[1]; ddq3 = ddq[2]; ddq4 = ddq[3]; ddq5 = ddq[4]; ddq6 = ddq[5];

	ts1 = ts[0]; ts2 = ts[1]; ts3 = ts[2];

	double A0[3][40];
	for (int i = 0; i < RobotAxis / 2; i++)
		for (int j = 0; j < 40; j++)
			A0[i][j] = 0;


	double DF = 0;



	for (int i = 0; i < 3; i++)
		for (int j = 0; j < 40; j++)
			distalVec[40 * i + j] = A0[i][j];

}



void sevenjointdynamics::SevenLoadRLS(const double *positionL, const double *sensorL, double *estParas, double *Coef, double *StatisError)
{
	//positionList[id(2, 2, 6)];
	double stateMot0[RobotAxis][3] = { 0 };
	double stateMot1[RobotAxis][3] = { 0 };
	double stateTor0[RobotAxis][3] = { 0 };
	double stateTor1[RobotAxis][3] = { 0 };



	double q[RobotAxis];
	double dq[RobotAxis];
	double ddq[RobotAxis];
	double ts[RobotAxis];

	double intDT = 8 * DT;
	int length = 6;
	std::vector<double> regressorMatrix_vec(3 * SampleNum * LoadTotalParas);
	double* regressorVector = regressorMatrix_vec.data();

	std::vector<double> regressorMatrixFric_vec(3 * SampleNum * 6);
	double* regressorVectorFric = regressorMatrixFric_vec.data();

	std::vector<double> regressorForces_vec(3 * SampleNum);
	double* regressorForces = regressorForces_vec.data();

	double posCur[RobotAxis];
	double torCur[RobotAxis];

	for (int j = 0; j < RobotAxis; j++)
	{
		stateMot0[j][0] = positionL[j];
		stateTor0[j][0] = sensorL[j];
	}

	for (int i = 0; i < SampleNum; i++)
	{

		for (int j = 0; j < RobotAxis; j++)
		{

			posCur[j] = positionL[RobotAxis*i + j];
			torCur[j] = sensorL[RobotAxis*i + j];

			stateMot1[j][0] = stateMot0[j][0] + intDT * (A[0][0] * stateMot0[j][0] + A[0][1] * stateMot0[j][1] + A[0][2] * stateMot0[j][2] + B[0] * posCur[j]);
			stateMot1[j][1] = stateMot0[j][1] + intDT * (A[1][0] * stateMot0[j][0] + A[1][1] * stateMot0[j][1] + A[1][2] * stateMot0[j][2] + B[1] * posCur[j]);
			stateMot1[j][2] = stateMot0[j][2] + intDT * (A[2][0] * stateMot0[j][0] + A[2][1] * stateMot0[j][1] + A[2][2] * stateMot0[j][2] + B[2] * posCur[j]);

			stateTor1[j][0] = stateTor0[j][0] + intDT * (A[0][0] * stateTor0[j][0] + A[0][1] * stateTor0[j][1] + A[0][2] * stateTor0[j][2] + B[0] * torCur[j]);
			stateTor1[j][1] = stateTor0[j][1] + intDT * (A[1][0] * stateTor0[j][0] + A[1][1] * stateTor0[j][1] + A[1][2] * stateTor0[j][2] + B[1] * torCur[j]);
			stateTor1[j][2] = stateTor0[j][2] + intDT * (A[2][0] * stateTor0[j][0] + A[2][1] * stateTor0[j][1] + A[2][2] * stateTor0[j][2] + B[2] * torCur[j]);
		}

		for (int j = 0; j < RobotAxis; j++)
		{
			q[j] = stateMot1[j][0];
			dq[j] = stateMot1[j][1];
			ddq[j] = stateMot1[j][2];
			ts[j] = stateTor1[j][0];
		}

		for (int k = 0; k < RobotAxis; k++)
		{
			q[k] = q[k] * DirectionFlag[k] + JointOffset[k] + ZeroOffset[k];
			dq[k] = dq[k] * DirectionFlag[k];
			ddq[k] = ddq[k] * DirectionFlag[k];

		}

		double LoadVec[3 * 40];
		SevenLoadMatrix(q, dq, ddq, ts, LoadVec);
		double Y[3][40];
		for (int m = 0; m < 3; m++)
			for (int n = 0; n < 40; n++)
				Y[m][n] = LoadVec[40 * m + n];

		double Y1[3][6] = { 0 };
		Y1[0][0] = 1 * SevenSign(dq[2]); Y1[0][1] = dq[2];
		Y1[1][2] = 1 * SevenSign(dq[4]); Y1[1][3] = dq[4];
		Y1[2][4] = 1 * SevenSign(dq[5]); Y1[2][5] = dq[5];


		for (int m = 0; m < 3; m++)
		{
			for (int n = 0; n < 40; n++)
			{
				regressorVector[(i * 3 + m) * 40 + n] = Y[m][n];

			}

			for (int n = 0; n < 6; n++)
			{
				regressorVectorFric[(i * 3 + m) * 6 + n] = Y1[m][n];

			}

		}

		regressorForces[i * 3 + 0] = ts[2];
		regressorForces[i * 3 + 1] = ts[4];
		regressorForces[i * 3 + 2] = ts[5];


		for (int j = 0; j < 6; j++)
		{

			stateMot0[j][0] = stateMot1[j][0];
			stateMot0[j][1] = stateMot1[j][1];
			stateMot0[j][2] = stateMot1[j][2];

			stateTor0[j][0] = stateTor1[j][0];
			stateTor0[j][1] = stateTor1[j][1];
			stateTor0[j][2] = stateTor1[j][2];
		}

	}


	// 所需的中间变量，请对U的对角线元素做处理
	std::vector<double> U_vec(3 * SampleNum * LoadTotalParas);
	auto U = U_vec.data();
	std::vector<double> UU_vec(3 * SampleNum * LoadTotalParas);
	auto UU = UU_vec.data();
	std::vector<double> dU_vec(3 * SampleNum * LoadTotalParas);
	auto dU = dU_vec.data();

	std::vector<double> tau_vec(3 * SampleNum);
	auto tau = tau_vec.data();

	std::vector<aris::Size> p_vec(3 * SampleNum);
	auto p = p_vec.data();

	aris::Size rank;

	// 根据 A 求出中间变量，相当于做 QR 分解 //
   // 请对 U 的对角线元素做处理
	s_householder_utp(3 * SampleNum, LoadTotalParas, regressorVector, U, tau, p, rank, 1e-10);


	std::vector<double> TestR_vec(3 * SampleNum * LoadTotalParas);
	auto TestR = TestR_vec.data();
	std::vector<double> TestQ_vec(3 * SampleNum * LoadTotalParas);
	auto TestQ = TestQ_vec.data();
	std::vector<double> Q_vec(3 * SampleNum * LoadReduceParas);
	auto Q = Q_vec.data();
	std::vector<double> R_vec(LoadReduceParas * LoadTotalParas);
	auto R = R_vec.data();
	//s_householder_ut2q(3 * SampleNum, LoadTotalParas, U, tau, TestQ);
	s_householder_ut2qmn(3 * SampleNum, LoadTotalParas, U, tau, TestQ);

	s_householder_ut2r(3 * SampleNum, LoadTotalParas, U, tau, TestR);
	s_permutate_inv(LoadTotalParas, 3 * SampleNum, p, TestR, T(LoadTotalParas));


	//Test QR
	//s_permutate(TotalParas, 3 * SampleNum, p, TestR, T(TotalParas));
	//s_mm(3 * SampleNum, TotalParas, 3 * SampleNum, TestQ, TestR, UU);
	//s_householder_ut2r(k, n, U, tau, R);
	//s_householder_ut2qmn(m, k, U, tau, q);
	//for (int i = 0;i < 3 * SampleNum*TotalParas;i++)
		//dU[i]= regressorVector[i]-UU[i];






	for (int i = 0;i < LoadReduceParas;i++)
		for (int j = 0;j < LoadTotalParas;j++)
		{
			R[i*LoadTotalParas + j] = TestR[i * LoadTotalParas + j];
			Coef[i*LoadTotalParas + j] = TestR[i * LoadTotalParas + j];
		}
	for (int i = 0;i < 3 * SampleNum;i++)
		for (int j = 0;j < LoadReduceParas;j++)
			Q[i*LoadReduceParas + j] = TestQ[i * LoadTotalParas + j];



	//s_mm(3 * SampleNum, TotalParas, ReduceParas, Q, R, UU);
	//for (int i = 0;i < 3 * SampleNum*TotalParas;i++)
		//dU[i]= regressorVector[i]-UU[i];



	std::vector<double> QwithFric_vec(3 * SampleNum * (LoadReduceParas + 6));
	auto QwithFric = QwithFric_vec.data();
	for (int i = 0;i < 3 * SampleNum;i++)
	{
		for (int j = 0;j < LoadReduceParas;j++)
			QwithFric[i*(LoadReduceParas + 6) + j] = Q[i*LoadReduceParas + j];
		for (int j = LoadReduceParas;j < LoadReduceParas + 6;j++)
			QwithFric[i*(LoadReduceParas + 6) + j] = regressorVectorFric[i * 6 + j - LoadReduceParas];
	}



	// 求解 A的广义逆pinv 和 x
	std::vector<double> pinv_vec(3 * SampleNum * (LoadReduceParas + 6));
	auto pinv = pinv_vec.data();

	// 所需的中间变量，请对U的对角线元素做处理
	std::vector<double> UQ_vec(3 * SampleNum * (LoadReduceParas + 6));
	auto UQ = UQ_vec.data();

	std::vector<double> tauQ_vec(3 * SampleNum);
	auto tauQ = tauQ_vec.data();

	std::vector<aris::Size> pQ_vec(3 * SampleNum);
	auto pQ = pQ_vec.data();

	aris::Size rankQ;

	s_householder_utp(3 * SampleNum, LoadReduceParas + 6, QwithFric, UQ, tauQ, pQ, rankQ, 1e-10);

	// 根据QR分解的结果求广义逆，相当于Matlab中的 pinv(A) //
	double tauQ2[3 * SampleNum];

	s_householder_utp2pinv(3 * SampleNum, LoadReduceParas + 6, rankQ, UQ, tauQ, pQ, pinv, tauQ2, 1e-10);
	// 根据QR分解的结果求广义逆，相当于Matlab中的 pinv(A)*b //
	s_mm(LoadReduceParas + 6, 1, 3 * SampleNum, pinv, regressorForces, estParas);


	/*
	std::ofstream outfile("C:/Users/gk/Desktop/Kaanh_gk/EstParas.txt");
	if (!outfile)
	{
		std::cout << "Unable to open otfile";
		exit(1); // terminate with error
	}

	for (int i = 0;i < 3 * SampleNum*TotalParas;i++)
		outfile << regressorVector[i] << std::endl;

	outfile.close();
	*/


	//Calculate Model Error
	std::vector<double> Error_vec(3 * SampleNum);
	auto Error = Error_vec.data();

	s_mm(3 * SampleNum, 1, LoadReduceParas + 6, QwithFric, estParas, Error);
	for (int i = 0;i < 3 * SampleNum;i++)
		Error[i] = Error[i] - regressorVector[i];

	double SumError[3] = { 0 };
	for (int i = 0;i < SampleNum;i++)
		for (int j = 0;j < 3;j++)
			SumError[j] = SumError[j] + Error[i * 3 + j] * Error[i * 3 + j];

	for (int j = 0;j < 3;j++)
		StatisError[j] = sqrt(SumError[j]) / SampleNum;


}

void sevenjointdynamics::SevenLoadParasExt(const double *dEst, const double *dCoef, double *Load)
{
	// 求解 A的广义逆pinv 和 x
	double pinv[LoadReduceParas * 10];

	// 所需的中间变量，请对U的对角线元素做处理
	double U[LoadReduceParas * 10];
	double tau[LoadReduceParas];
	aris::Size p[LoadReduceParas];
	aris::Size rank;

	// 根据 A 求出中间变量，相当于做 QR 分解 //
// 请对 U 的对角线元素做处理
	s_householder_utp(LoadReduceParas, 10, dCoef, U, tau, p, rank, 1e-10);

	// 根据QR分解的结果求广义逆，相当于Matlab中的 pinv(A) //
	double tau2[LoadReduceParas];
	s_householder_utp2pinv(LoadReduceParas, 10, rank, U, tau, p, pinv, tau2, 1e-10);
	// 根据QR分解的结果求广义逆，相当于Matlab中的 pinv(A)*b //
	s_mm(10, 1, LoadReduceParas, pinv, dEst, Load);


}






